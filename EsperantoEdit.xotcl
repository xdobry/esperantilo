# automatically generated from XOTclIDE
# script require component {EspBazaLingvo IDEBaseGUI EspTeknikajIloj}
@ Component EsperantoEdit {
description {la komponento enhavas:
    * Redaktilon
    * Radikaro Redaktilo
API
    * EsperantoBrowser newBrowser - lanĉu Redaktilon
    * EsperantoBrowser redaktuDosieron $dosiero - lanĉu Redaktilon kaj redaktu dosieron
    * EsperantoBrowser redaktuTekston $teksto - lanĉu Redaktilon kaj redaktu tekston

}
}
package provide EsperantoEdit 0.993
package require EspBazaLingvo
package require EspTeknikajIloj
package require IDEBaseGUI
@ Class EditKursoro {
description {Kursoro, kiu bazas sur TkWindow.}
}
Class EditKursoro -parameter {win kursoro vortkomenco stopIndex}
@ ::EditKursoro idemeta categories {base-api manipulation}
@ ::EditKursoro idemeta categoriesMethods {{sekvaSigno malAntauen estasFino} {konservuKursoron reaktivuKursoron}}
@ ::EditKursoro idemeta component EsperantoEdit
EditKursoro instproc estasFino {} {
    my instvar kursoro stopIndex win
    # kiam stopIndex ne deinita uzi "text mark" stopIndex
    if {$stopIndex eq ""} {
        $win compare $kursoro >= stopIndex
    } else {
        $win compare $kursoro >= $stopIndex
    }
}
EditKursoro instproc konservuKursoron {} {
    my instvar win kursoro
    $win mark set kursoro $kursoro
    #my halt
    $win mark gravity kursoro right
}
EditKursoro instproc konservuKursoronNomo nomo {
    my instvar win vortkomenco
    $win mark set $nomo $vortkomenco
    $win mark gravity $nomo right
}
EditKursoro instproc malAntauen {} {
    my instvar win kursoro
    set kursoro [$win index "$kursoro - 1 chars"]
}
EditKursoro instproc metuFinon index {
    my instvar stopIndex win
    set stopIndex $index
    $win mark set stopIndex $index
}
EditKursoro instproc metuVortkomenco {} {
    my vortkomenco [my kursoro]
}
EditKursoro instproc prenuRegionon {komenco fino} {
    my instvar win
    if {$komenco eq "0" || $fino eq "0"} {
        #my halt
    }
    $win get $komenco $fino
}
EditKursoro instproc reaktivuKursoron {} {
    my instvar win kursoro
    set kursoro [$win index kursoro]
}
EditKursoro instproc reaktivuKursoronNomo nomo {
    my instvar win kursoro
    set kursoro [$win index $nomo]
}
EditKursoro instproc sekvaSigno {} {
    my instvar win kursoro
    set signo [$win get $kursoro]
    set kursoro [$win index "$kursoro + 1 chars"]
    return $signo
}
Class EspBrowSaveMix -parameter postSaveAction
@ ::EspBrowSaveMix idemeta component EsperantoEdit
@ EspBrowSaveMix instproc saveFileAs {} {
description {Klasso, kiu estas uzato por aldoni al redaktilo aktiono, kiu devas estis farita post konservado de dosiero}
}
EspBrowSaveMix instproc saveFileAs {filename text} {
    set ret [next]
    my instvar postSaveAction
    eval $postSaveAction
    return $ret
}
Class EspErrorReporter -parameter {{tipo eraro} {errorMsg {}} {komento {}}}
@ ::EspErrorReporter idemeta component EsperantoEdit
EspErrorReporter instproc destroy {} {
    my instvar win
    ::destroy $win
    next
}
EspErrorReporter instproc estasProgramEraro {} {
    my instvar tipo
    expr {$tipo eq "eraro"}
}
EspErrorReporter instproc generateReport {} {
    my instvar cxuRetaKonekto win tipo win
    if {$tipo ne "eraro" && [string trim [$win.comment get 1.0 end] "\t \n"] eq ""} {
        EsperantoBrowser message [mc "Bonvolu skribu komenton"]
        focus $win.comment
        return
    }
    if {![winfo exists $win]} {
        return
    }
    if {$cxuRetaKonekto} {
        my testRapurtuOnline
    } else {
        my generateReportAlDosiero
    }
}
EspErrorReporter instproc generateReportAlDosiero {} {
   my instvar win errorMsg userName
   set file [tk_getSaveFile -initialfile errorReport.xml]
   if {$file eq ""} return
   set of [open $file w]
   set raporto [my prenuXMLRaporton]
   puts $of $raporto
   my konservuRaporton $raporto
   close $of
   ::tk_messageBox -type ok -message [mc "La erara raporto %s estis sukcese kreita. Bonvolu sendi ĝin al mail@xdobry.de" $file]
   my destroy
}
EspErrorReporter instproc init {} {
    my instvar win errorMsg komento mail userName cxuRetaKonekto
    set cxuRetaKonekto 1
    my requireNamespace
    set win [Object autoname .errorReporter]
    ::toplevel $win
    wm withdraw $win
    wm protocol [winfo toplevel $win] WM_DELETE_WINDOW [list [self] destroy]
    wm title $win [mc "Raportilo de Eraroj"]
    frame $win.fmsg
    label $win.bug -image [IDE::Toolbar createImage bug]
    if {![my estasProgramEraro]} {
        set m [mc "Skribu raporton pri Esperantilo. Skribu pri eraroj kaj deziroj. Vi povas uzi la esperantan, anglan, germanan aŭ polan lingvon"]
        set kl [mc "Komentoj:"]
    } else {
        set m [mc "Programa eraro okazis en Esperantilo. Vi povas doni aldonajn komentojn. Vi povas uzi la esperantan, anglan, germanan aŭ polan lingvon"]
        set kl [mc "Aldonaj Komentoj:"]
        EsperantoConf statAktiono ER
    }
    append m \n [mc "Se vi estas konektita al interreto, sendu la raporton direkte. Alikaze kreu la raporto-dosieron kaj sendu ĝin al adreso: mail@xdobry.de
Helpu ĉe plibonigo de libera Esperantilo!"]
    ::message $win.msg -text $m -width 400
    label $win.lcomment -text $kl
    my requireNamespace

    frame $win.tf
    entry $win.tf.user -textvariable [self]::userName
    esp::metuXEvento $win.tf.user
    if {[info exists ::tcl_platform(user)]} {
        set userName $::tcl_platform(user)
    }

    entry $win.tf.mail -textvariable [self]::mail
    set mail [EsperantoConf set email]

    text $win.comment -width 60 -height 12
    esp::metuXEventoText $win.comment
    if {$komento ne ""} {
        $win.comment insert 1.0 $komento
    }

    label $win.tf.text -text [mc "via nomo"]
    label $win.tf.lmail -text [mc "retpoŝtadreso (email)"]

    grid $win.tf.text -row 0 -column 0 -sticky e
    grid $win.tf.user -row 0 -column 1
    grid $win.tf.lmail -row 1 -column 0 -sticky e
    grid $win.tf.mail -row 1 -column 1

    pack $win.fmsg -fill x
    pack $win.bug $win.msg -in $win.fmsg -side left
    pack $win.tf $win.lcomment -anchor w
    pack $win.comment -expand yes -fill both -padx 10 -pady 10

    frame $win.bf -border 3 -relief raised

    button $win.bf.ok -text [mc "OK"] -command [list [self] generateReport]
    pack $win.bf.ok -side left
    if {![my estasProgramEraro]} {
        button $win.bf.cancel -text [mc "Ignoru"] -command [list [self] destroy]
        pack $win.bf.cancel -side left
    }
    if {[Object isobject IDE::ErrorStack]} {
        button $win.bf.eb -text {Error Browser} -command [list IDE::ErrorStack newBrowser $errorMsg]
        pack $win.bf.eb -side left -padx 20
    }
    checkbutton $win.creto -text [mc "Ekzistas konekto al la interreto"] -variable [self]::cxuRetaKonekto

    pack $win.creto -anchor w
    pack $win.bf -anchor w -fill x
    focus $win.comment
    wm deiconify $win
}
EspErrorReporter instproc konservuRaporton raporto {
   set d [EsperantoConf prefEspDosierujo]
   if {[file isdirectory $d]} {
       set f [open [file join $d eraroj.txt] a]
       puts $f $raporto
       close $f
   }
}
EspErrorReporter instproc maskString string {
     string map [list & "&amp;" < "&lt;" > "&gt;" \" "&quot;"] $string
}
EspErrorReporter instproc prenuXMLRaporton {} {
   my instvar win errorMsg userName tipo mail
   # <?xml version='1.0' encoding='utf-8'?>
   set ret "<xotclideError>\n"
   set name [[self class] getAppName]
   EsperantoConf set email $mail
   if {$name ne ""} {
       append ret "<application>[my maskString $name]</application>" \n
   }
   append ret "<platform>[array get ::tcl_platform]</platform>\n"
   if {[EsperantoConf array exists statArr]} {
       append ret "<stat>[EsperantoConf array get statArr]</stat>" \n
   }
   append ret "<lng>[EsperantoConf set lingvo]</lng>" \n
   append ret "<tipo>$tipo</tipo>" \n
   append ret "<executable>[info nameofexecutable]</executable>" \n
   append ret "<tclversion>$::tcl_patchLevel</tclversion>" \n
   append ret "<xotclversion>$::xotcl::version$::xotcl::patchlevel</xotclversion>" \n
   set version [[self class] getVersion]
   if {$version ne ""} {
       append ret "<version>[my maskString $version]</version>" \n
   }
   if {$userName ne ""} {
       append ret "<user>[my maskString $userName]</user>" \n
   }
   append ret "<userid>[EsperantoConf prenuUzantoId]</userid>" \n
   append ret "<email>$mail</email>" \n
   set comments [$win.comment get 1.0 end]
   set comments [string range [string range $comments 0 end-2] 0 19500]
   if {$comments ne ""} {
       append ret "<comments>[my maskString $comments]</comments>" \n
   }
   append ret <errorStack>[string range $errorMsg 0 20000]</errorStack> \n
   append ret {</xotclideError>} \n
   return $ret
}
EspErrorReporter instproc raportuOnline xmldata {
    package require http
    if {[EsperantoConf set httpProxy] ne ""} {
        http::config -proxyhost [EsperantoConf set httpProxy] -proxyport [EsperantoConf set httpProxyPort]
    }
    # set action {http://localhost/~joachim/esperantoedit/raportoj/novaraporto.php}
    set action {http://www.esperantilo.org/raportoj/novaraporto.php}
    set id [http::geturl $action -type application/x-www-form-urlencoded -query [eval ::http::formatQuery [list raporto $xmldata]]]
    set data [http::data $id]
    set response [http::ncode $id]
    http::cleanup $id
    if {[expr $response ne "200"]} {
        return
    }
    return $data
}
EspErrorReporter instproc testRapurtuOnline {} {
    my instvar win errorMsg userName mail
    set xmldata [my prenuXMLRaporton]
    if {[catch {my raportuOnline $xmldata} res] || $res eq "" || ![regexp {<uid>(.+)</uid>} $res _ uid]} {
        EsperantoBrowser message [mc "Raportado ne sukcesis.\n%s\nĈu vi estas konektita al interreto?\nSendu la raporton per Email" $res]
        my generateReportAlDosiero
    } else {
        EsperantoBrowser message [mc "Raporto estis sendita.\nLa identigilo de raporto estas '%s'.\n Dankon pro la raporto" $uid]
        my konservuRaporton $xmldata
        if {$errorMsg ne "raporto"} {
            if {[EsperantoConf prenuTempoDeLastaTestoNovaEldono]} {
                if {[EsperantoBrowser yesNo [mc "Ĉu kontroli la ekziston de korekto de programo?"]] eq "yes"} {
                    EsperantoConf testuNovanEldononGUI
                }
            }
        }
        my destroy
    }
}
EspErrorReporter proc getAppName {} {
     # Please init version class varible for your system
     # ErrorReporter set appName XOTclIDE

     if {[my exists appName]} { return [my set appName]}
     return
}
EspErrorReporter proc getVersion {} {
     # Please init version class varible for your system
     # ErrorReporter set version 0.12"

     EsperantoConf prenuEldono
}
EspErrorReporter proc report errorInfo {
    # se tio ekazis kun aktivo prograsu montrilo, malfermu gxin
    set oldGrab [::grab current]
    if {$oldGrab ne ""} {
        foreach w $oldGrab {
            ::grab release $w
        }
    }
    my new [list -errorMsg $errorInfo]
}
EspErrorReporter proc reportuTekston {teksto {errorInfo {}} {tipo raporto}} {
    # se tio ekazis kun aktivo prograsu montrilo, malfermu gxin
    if {[Object isobject ProgresoMontrilo]} {
        foreach p [ProgresoMontrilo info instances] {
            $p cleanUpAfterSignal
            $p destroy
        }
    }
    my new [list -tipo raporto] [list -komento $teksto] [list -errorMsg $errorInfo]
}
Class EspGUIConfigurationMix
@ ::EspGUIConfigurationMix idemeta component EsperantoEdit
EspGUIConfigurationMix instproc getParameter name {
    EsperantoConf getParameter $name
}
EspGUIConfigurationMix proc initializeAfterLoad {} {
    IBGParameterAdapter mixin add EspGUIConfigurationMix
}
Class EspText -superclass {::IDE::Text ::IDE::GUICommands}
@ ::EspText idemeta component EsperantoEdit
EspText instproc copyText {} {
   event generate [my getTextWindow] <<Copy>>
}
EspText instproc cut {} {
   event generate [my getTextWindow] <<Cut>>
}
EspText instproc fileOut {} {
    my instvar win fileName
    if {![info exists fileName]} {
        set fileName rezulto.txt
    }
    set filetypes {{{Text Files} *.txt} {{All files} *}}
    set fname [IDE::Dialog getSaveFile $fileName $filetypes txt]
    if {$fname eq ""} return
    set fileName $fname
    my saveFile $fileName
}
EspText instproc fileSave {} {
    my instvar fileName
    if {![info exists fileName]} {
        my fileOut
    } else {
        my saveFile $fileName
    }
}
EspText instproc fileSaveDenove {} {
    my instvar fileName
    if {![info exists fileName]} {
        my fileOut
    } else {
        my saveFile $fileName
    }
}
EspText instproc fillMenuStruct ms {
    $ms enablementHandler [self]

    $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Malfaru"] -command [list [self] undo] -popdownMenu 1 -accelerator _Control-z -enableList hasUndo]
    if {$::tcl_platform(platform) eq "unix"} {
        set ac _Control-Z
    } else {
        set ac _Control-y
    }
    $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Refaru"] -command [list [self] redo] -accelerator $ac -popdownMenu 1]
    $ms addMenuItem [IDE::MenuSeparator new -childof $ms -popdownMenu 1]
    $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Eltondu"] -command [list [self] cut] -popdownMenu 1 -accelerator _Control-x]
    $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name  [mc "Kopiu"] -command [list [self] copyText] -popdownMenu 1 -accelerator _Control-c]
    $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name  [mc "Intergluu"] -command [list [self] paste] -popdownMenu 1 -accelerator _Control-v]

    if {$::tcl_platform(platform) eq "windows"} {
        set sall Control-a
    } else {
        set sall _Control-/
    }
    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name  [mc "Elektu ĉion"] -command [list [self] selectAll] -popdownMenu 1 -accelerator $sall]]
    $ms addMenuItem [IDE::MenuSeparator new -childof $ms -popdownMenu 1]
    $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Ser\u0109u/Anstata\u16digu..."] -command [list IDE::FindReplace bindToView [self]] -accelerator Control-f -popdownMenu 1]
    $ms addCommand [mc "Konservu"] [list [self] fileSaveDenove]  {} {Control-s} 1
    $ms addCommand [mc "Konservu kiel ..."] [list [self] fileSave] {} {} 1

}
EspText instproc getMenuStruct {} {
    IDE::MenuStruct create [self]::ms [mc "Dosiero"] 0
}
EspText instproc hasUndo {} {
   [my getTextWindow] edit modified
}
EspText instproc paste {} {
   event generate [my getTextWindow] <<Paste>>
}
EspText instproc popMenuWindow {} {
    my getTextWindow
}
EspText instproc redo {} {
    catch {[my getTextWindow] edit redo}
}
EspText instproc saveFile fname {
    set fh [open $fname w]
    fconfigure $fh -encoding utf-8
    puts -nonewline $fh [my getText]
    close $fh
}
EspText instproc selectAll {} {
    [my getTextWindow] tag add sel 1.0 end
}
EspText instproc undo {} {
    set twin [my getTextWindow]
    if {[$twin edit modified]} {
        $twin edit undo
    }
}
@ Class EsperantoBrowser {
description {La principa klaso por redaktilo}
}
Class EsperantoBrowser -superclass {::IDE::Browser ::IDE::GUICommands ::EsperantoStringConverter} -parameter {{atHead 1} {fontaLingvo ?} {celaLingvo ?}}
@ ::EsperantoBrowser idemeta categories {dosiero user-actions lingvistiko derived korektado init-release testado private}
@ ::EsperantoBrowser idemeta categoriesMethods {{fileNew fileSaveDenove reloadFile getFileTypes visituDosierojn fileSave saveFileAs fileOpen fileAppend} {transferFiles montruRevoVortaron montruUzadoFreq ekstraktuFontprogramon montruHTMLKorektilon lancxuSkripton showAbout montruRadikaroRedaktilon montruTezauron montruEnHTML montruEspEspVortaron montruFrazparoVortaron montruEsperantoHelpo translate montruVortaron} {konservoLeksikonon aliguRadikonPorVorto sxargxuREVO aliguDerivonPorVorto sxargxuVortleksikon} {closeWindow canClose closeBrowser} {ignoruVorton aliguRadikon aliguDerivon montruKorektilon sxangxiTajparo montruTajparon spellText getVortaron elektuKorektadoTipo} {getTitle jxusKonservita getMenuStruct quitApp destroy createMenuPreferajxoj fillMenuStruct createMenuKorektado createSystemMenu createMenuTradukado createMenuLingvistiko specificInit} {isValidTextSelection cxuEnvahoGravas estasEsperantoLingvo tekstoSxangxita} {openHTMLBrowser analizuTekstonPer fermuVortaron}}
@ ::EsperantoBrowser idemeta component EsperantoEdit
EsperantoBrowser instproc aliguDerivon {} {
    set vorto [my @editor prenuVorton]
    if {$vorto eq ""} return
    my aliguDerivonPorVorto $vorto
}
EsperantoBrowser instproc aliguDerivonPorVorto vorto {
    set vortaro [my getEspVortaron]
    set erg [$vortaro estasVorto $vorto]
    switch $erg {
        0 {
            EsperantoBrowser message [mc "radiko ne estas rekonata"]
            return 0
        }
        1 {
            set ret [NovaDerivoDlg aliguDerivonDeVortaro $vortaro]
            return [expr {$ret ne ""}]
        }
        2 {
            EsperantoBrowser message [mc "vorto %s estas jam konata" $vorto]
            return 0
        }
        3 {
            EsperantoBrowser message [mc "vorto estas en ignorlisto"]
            return 0
        }
    }
}
EsperantoBrowser instproc aliguRadikon {} {
    set vorto [my @editor prenuVorton]
    if {$vorto eq ""} return
    set radobj [NovaRadikoDlg aliguRadikon $vorto]
}
EsperantoBrowser instproc aliguRadikonPorVorto vorto {
    NovaRadikoDlg aliguRadikon $vorto
}
EsperantoBrowser instproc analizuTekstonPer analiziloKlaso {
    EsperantoConf statAktiono AN
    set ts [$analiziloKlaso new]
    $ts analizuDeFenestro [my @editor]
    $ts rezultuAnalizon
    $ts montruAnalizon
    $ts destroy
}
EsperantoBrowser instproc arangxuPozicion pwin {
    my instvar win

    foreach {pwidth pheight px py} [split [string map {-- +} [wm geometry $pwin]] x+-] break
    foreach {width height x y} [split [string map {-- +} [wm geometry $win]] x+-] break
    foreach {mw mh} [wm maxsize $win] break
    set rw [expr {$mw-$px-$pwidth}]
    set rh [expr {$mh-$py-$pheight}]
    if {$rw>$pwidth} {
        #puts "${rw}x${pheight}+[expr {$px+$pwidth+1}]+$py"
        wm geometry $win "${rw}x${pheight}-0+$py"
        #puts "wm geometry $win ${rw}x${pheight}-0+$py"
    } elseif {$rh>$pheight} {
        #puts "${pwidth}x${rh}+$px+[expr {$py+$pheight+1}]"
        if {$::tcl_platform(platform) eq "windows"} {
            wm geometry $win "${pwidth}x${pheight}+$px-36"
            #puts "wm geometry $win ${pwidth}x${pheight}+$px-36"
        } else {
            wm geometry $win "${pwidth}x${pheight}+$px-0"
            #puts "wm geometry $win ${pwidth}x${pheight}+$px-0"
        }
    } else {
        wm geometry $win "${pwidth}x${pheight}"
        #puts "wm geometry $win ${pwidth}x${pheight}"
    }
}
EsperantoBrowser instproc canClose {} {
    if {[my set havasSxangxojn]} {
        switch [EsperantoBrowser yesNoCancel [mc "Ĉu konservi ŝanĝojn?"] [mc "Forlaso de Programo"]] {
            yes {
                return [my fileSaveDenove]
            }
            no {
                return 1
            }
        }
        return 0
    }
    return 1
}
EsperantoBrowser instproc closeBrowser {} {
    my instvar fontaLingvo celaLingvo
    if {[llength [EsperantoBrowser info instances]]==1} {
        my instvar win
        regexp {\d+x\d+} [wm geometry $win] g
        EsperantoConf set prefGeometry $g
        if {$celaLingvo ne "eo"} {
            EsperantoConf set lingvo $celaLingvo
        } else {
            if {$fontaLingvo ne "?"} {
                EsperantoConf  set lingvo $fontaLingvo
            }
        }
        catch {EsperantoConf konservuVizitajnDosierojn}
        catch {EsperantoConf konservuLastajTradukojosierojn}
        if {![Object isobject IDE::Component]} {
            exit
        }
    }
    my fermuVortaron
    my destroy
}
EsperantoBrowser instproc closeWindow {} {
    if {[my canClose]} {
        my closeBrowser
    }
}
EsperantoBrowser instproc createMenuKorektado {} {
    my instvar gramatikoButono
    set rm [IDE::MenuStruct new -childof [self] [mc "Korektado"] 0]
    $rm enablementHandler [self]

    set c [$rm addCommand [mc "Korektu literumadon"] [list [self] spellText] {} F2]
    $rm addCheckButton [mc "Literumu dum skribado"] [self]::@editor::literumadoDumSkribado
    my @toolbar addMenu $c autospellcheck 4.1
    set c [$rm addCommand [mc "Korektu gramatikon"] [list [my @editor] analizuGramatikonTipografion] {} F3 0 estasEsperantoLingvo]
    set gramatikoButono [my @toolbar addMenu $c gramcheck 4.2]
    set c [$rm addCommand [mc "Korektilo"] [list [self] montruKorektilon] {} F7]
    my @toolbar addMenu $c spellcheck 4.3

    $rm addCommand [mc "Elektu vortaron por korektado"] [list [self] elektuKorektadoTipo]
    $rm addCommand [mc "Nuligu korekton"] [list [self]::@editor nuliguMarkilojn] {} F4
    $rm addSeparator
    $rm addCommand3 [mc "Aligu vorton al ignorlisto"] [list [self] ignoruVorton] isValidTextSelection
    $rm addCommand3 [mc "Aligu novan derivaĵon"] [list [self] aliguDerivon] isValidTextSelection
    $rm addCommand3 [mc "Aligu novan radikon"] [list [self] aliguRadikon] isValidTextSelection
    $rm addSeparator
    $rm addCommand3 [mc "Ignoru selektitan tekston"] [list [self]::@editor ignoruSelekton] isValidTextSelection
    $rm addCommand [mc "Nuligu Ignortekstopartojn"] [list [self]::@editor nuliguIgnorselekton]

    if {![EsperantiloLancxilo estasEsperantileto]} {
        set e [IDE::MenuStruct new -childof $rm "HTML-XML"]
        $rm addCascadeMenu $e
        $e addCommand [mc "Testu HTML"] [list [my @htmlkorektilo] testuHTML]
        $e addCommand [mc "Purigu HTML"] [list [my @htmlkorektilo] puriguHTML]
        $e addCommand [mc "Formatigu HTML"] [list [my @htmlkorektilo] formatiguHTML]
        $e addCommand [mc "HTML al XHTML"] [list [my @htmlkorektilo] konvertuXHTML]
        $e addCommand [mc "XHTML al HTML"] [list [my @htmlkorektilo] tidyStart html]
        $e addCommand [mc "Wiki al HTML"] [list [my @editor] wikiToHTML]
        $e addSeparator
        $e addCommand [mc "Testu XML"] [list [my @htmlkorektilo] testuXML]
        $e addCommand [mc "Formatigu XML"] [list [my @htmlkorektilo] tidyStart identxml]
    }
    return $rm
}
EsperantoBrowser instproc createMenuLingvistiko args {
    set rm [IDE::MenuStruct new -childof [self] [mc "Lingvistiko"] 0]
    $rm addCommand [mc "Redaktilo de Radikaro"] [list [self] montruRadikaroRedaktilon]
    if {![EsperantiloLancxilo estasEsperantileto]} {
        set c [$rm addCommand [mc "Multlingva vortaro"] [list [self] montruVortaron] {} Control-r]
        my @toolbar addMenu $c contents 5.4
        set c [$rm addCommand [mc "ReVo-leksikono"] [list [self] montruRevoVortaron] {} Control-w]
        my @toolbar addMenu $c revo 5.5
        $rm addCommand [mc "Uzado de vortoj en frazpartoj"] [list [self] montruUzadoFreq] {} Control-g
        $rm addCommand [mc "Esperanta tezaŭro"] [list [self] montruTezauron] {} Control-F7
        $rm addCommand [mc "Ludo 'vortaj amikoj'"] [list LudoVortajAmikoj newBrowser]
        $rm addSeparator
        $rm addCommand [mc "Multlingva vortaro de frazpartoj"] [list [self] montruFrazparoVortaron]
        $rm addCommand [mc "Multvorta vortaro pl-eo"] [list [self] montruVortaronPlEo]
        $rm addCommand [mc "Multvorta vortaro en-eo"] [list [self] montruVortaronEnEo]
        $rm addCommand [mc "Esperanto-Esperanto vortaro"] [list [self] montruEspEspVortaron]
        $rm addCommand [mc "Redaktu ekzemplajn regulojn por Korektado"] [list [self] montruGramRegulojn]
        $rm addCommand [mc "Redaktu pli bonajn sinonimojn"] [list [self] montruPriBonajnSinonimojn]
    }
    $rm addCommand [mc "Redaktu liston de ignorvortoj"] [list [self] montruIgnorvortojn]

    if {![EsperantiloLancxilo estasEsperantileto]} {
        set m [IDE::MenuStruct new -childof $rm [mc "Aliaj spertaj funkcioj"]]
        $rm addCascadeMenu $m
        $m addCommand [mc "Refreŝigu vortojn de REVO-dosierujo"] [list [self] sxargxuREVO]
        $m addCommand [mc "Ŝarĝu vortleksikonon"] [list [self] sxargxuVortleksikon]
        $m addCommand [mc "Konservu vortleksikonon"] [list [self] konservoLeksikonon]
        $m addCommand [mc "Lanĉu Tcl-skripton"] [list [self] lancxuSkripton]
        $m addCommand [mc "Ekstraktu Programfonton"] [list [self] ekstraktuFontprogramon]
        if {$::tcl_platform(platform) eq "windows"} {
            $m addCommand [mc "Tcl konsolo"] [list console show]
        }
        set m [IDE::MenuStruct new -childof $rm [mc "Bazaj iloj"]]
        $rm addCascadeMenu $m
        $m addCommand [mc "Disigu en vortoj (Tokenize)"] [list [self] analizuTekstonPer TekstoTokenizer]
        $m addCommand [mc "Disigu en frazoj (Tokenize)"] [list [self] analizuTekstonPer TekstoFrazoTokenizer]
        $m addCommand [mc "Disigu en radikitaj frazoj (Tokenize)"] [list [self] analizuTekstonPer TekstoRadikitaFrazoTokenizer]
        $m addCommand [mc "Analizu Vortoj (Tagger)"] [list [self] analizuTekstonPer TekstoTagger]
        $m addCommand [mc "Sintaksa Analizo (XML)"] [list [self] analizuTekstonPer TekstoSintaksoAnalizilo]
        $m addCommand [mc "Sintaksa Analizo (Listoj)"] [list [self] analizuTekstonPer TekstoSintaksoAnaliziloPerentezo]
        $m addSeparator
        $m addCommand [mc "Asemblu frekventecan liston"] [list [self] analizuTekstonPer TekstoFrekvenco]
        $m addCommand [mc "Trovu superhazardajn vortojn"] [list [self] analizuTekstonPer TekstoKomFrekvenco]
        $m addCommand [mc "Komputu averaĝan frekvenatecan grupon"] [list [self] analizuTekstonPer TestoMezFrekvenco]
        $m addCommand [mc "Komputu datumbazon de frazpartoj"] [list [self] analizuTekstonPer TekstoFrazpartoFrekventeco]
        $m addSeparator
        $m addCommand [mc "Ekstraktu nekonatajn vortojn"] [list [self] analizuTekstonPer EkstraktuNekonatajVortoj]
        $m addCommand [mc "Ekstraktu nekonatajn derivaĵojn"] [list [self] analizuTekstonPer EkstraktuNekonatajDerivoj]
        $m addCommand [mc "Frazoj kun gramatikaj eraroj"] [list [self] analizuTekstonPer TekstoGramKorektilo]
        $m addCommand [mc "Nekonataj tradukoj"] [list [self] analizuTekstonPer TekstoNekonatajTradukoj]
        $m addSeparator
        $m addCommand [mc "Analizu dosieron"] [list DosieroAnalizilo guiTest]
        $m addCommand [mc "Analizu dosierojn"] [list DosieroAnalizilo guiTestMutajn]
        set m [IDE::MenuStruct new -childof $rm [mc "Vikipedio"]]
        $rm addCascadeMenu $m
        $m addCommand [mc "Analizu ligilojn de vikipedio"] [list VikipedioLigilojRetoView newBrowser]
        $m addCommand [mc "Prenu tekston de vikipedio"] [list [self] malfermuDeVikipedio]
    }

    $rm addSeparator
    $rm addCommand [mc "Vortstatistiko"] [list [self] analizuTekstonPer TekstoStatistiko]
    $rm addCommand [mc "Distingu statistike la lingvon"] [list [self] divenuLingvonStatistike]
    $rm addCommand [mc "Marku proprajn nomojn"] [list [self] analizuTekstonPer VortoMarkiloProprajNomoj]
    $rm addCommand [mc "Marku maloftajn radikojn"] [list [self] analizuTekstonPer VortoMarkiloMaloftajRadikoj]
    $rm addCommand [mc "Marku maloftajn vortojn"] [list [self] markuMaloftajnVortojn]
    $rm addCommand [mc "Marku neoficialajn vortojn"] [list [self] analizuTekstonPer VortoMarkiloNeoficialajVortoj]
    if {![EsperantiloLancxilo estasEsperantileto]} {
        $rm addCommand [mc "Marku nekonatajn tradukojn"] [list [self] analizuTekstonPer VortoMarkiloNekonatajTradukoj]
    }
    $rm addCommand [mc "Marku morfemojn"] [list [self] analizuTekstonPer VortoMarkiloMorfemoj]
    $rm addCommand [mc "Malmarku"] [list [self]::@editor malmarku]

    return $rm
}
EsperantoBrowser instproc createMenuPreferajxoj {} {
    set pm [IDE::MenuStruct new -childof [self] [mc "Preferaĵoj"] 0]

    set e [IDE::MenuStruct new -childof $pm [mc "Litergrandeco"]]
    $pm addCascadeMenu $e
    $e addRadioButton "10" EsperantoConf::literGrandeco [list EsperantoConf sxangxiLiterGrandecon] -10
    $e addRadioButton "12" EsperantoConf::literGrandeco [list EsperantoConf sxangxiLiterGrandecon] -12
    $e addRadioButton "14" EsperantoConf::literGrandeco [list EsperantoConf sxangxiLiterGrandecon] -14
    $e addRadioButton "16" EsperantoConf::literGrandeco [list EsperantoConf sxangxiLiterGrandecon] -16
    $e addRadioButton "18" EsperantoConf::literGrandeco [list EsperantoConf sxangxiLiterGrandecon] -18
    $e addRadioButton "20" EsperantoConf::literGrandeco [list EsperantoConf sxangxiLiterGrandecon] -20
    $e addRadioButton "22" EsperantoConf::literGrandeco [list EsperantoConf sxangxiLiterGrandecon] -22
    set e ${pm}::fontfamily
    IDE::MenuStruct $e [mc "Literfamilio"]
    $pm addCascadeMenu $e
    $e addRadioButton "Courier" EsperantoConf::literArto [list EsperantoConf sxangxiLiterArton] Courier
    $e addRadioButton "Times" EsperantoConf::literArto [list EsperantoConf sxangxiLiterArton] Times
    $e addRadioButton "Helvetica" EsperantoConf::literArto [list EsperantoConf sxangxiLiterArton] Helvetica
    if {![EsperantiloLancxilo estasEsperantileto]} {
        set dbvortaro [DBVortaro prenuDepVortaron]
        if {[$dbvortaro cxuVortaroTrovita]} {
            set e ${pm}::lingvo
            IDE::MenuStruct create $e [mc "Traduklingvo"]
            $pm addCascadeMenu $e
            foreach {lng lingvo} [$dbvortaro subtenatajLingvoj] {
                $e addRadioButton [mc $lingvo] EsperantoConf::lingvo {} $lng
            }
        }
    }
    set m [IDE::MenuStruct new -childof $pm [mc "Fonta Lingvo"]]
    $pm addCascadeMenu $m
    $m addRadioButton "Aŭtomata ekkono de lingvo" [self]::fontaLingvo [list [self] sxangxuFontanLingvon] ?
    $m addRadioButton "Esperanta Lingvo" [self]::fontaLingvo [list [self] sxangxuFontanLingvon] eo
    $m addRadioButton "Pola Lingvo" [self]::fontaLingvo [list [self] sxangxuFontanLingvon] pl
    $m addRadioButton "Angla Lingvo" [self]::fontaLingvo [list [self] sxangxuFontanLingvon] en


    set e [IDE::MenuStruct new -childof $pm [mc "Literoj de tajpilo"]]
    $pm addCascadeMenu $e
    foreach {lingvo} [lsort [my @tajparo prenuLingvoj]] {
          $e addRadioButton [mc $lingvo] EsperantoConf::tajparoLingvo [list [self] sxangxiTajparo] $lingvo
    }
    $pm addCommand [mc "Ŝanĝu lingvon de programo"] [list EsperantoConf sxangxuLingvonDeProgramo]
    #$pm addCommand [mc "Konservu preferaĵojn"] [list EsperantoConf savePreferences]
    $pm addCommand [mc "Konservu lokajn ŝanĝojn por eksportado"] [list EsperantiloLancxilo konservuLokajnSxangxojn]
    $pm addSeparator

    set encodings [encoding names]
    if {[llength $encodings]<20} {
        IDE::MenuStruct ${pm}::inputencoding [mc "Lega enkodo"]
        $pm addCascadeMenu ${pm}::inputencoding
        foreach name [encoding names] {
            ${pm}::inputencoding addRadioButton $name [self]::inputencoding {} $name
        }
        IDE::MenuStruct ${pm}::outputencoding [mc "skriba enkodo"]
        $pm addCascadeMenu ${pm}::outputencoding
        foreach name [encoding names] {
            ${pm}::outputencoding addRadioButton $name [self]::outputencoding {} $name
        }
    } else {
        $pm addCommand [mc "Ŝanĝu legan enkodon"] [list [self] setEncoding inputencoding "\u0109an\u011du legatan enkodon"]
        $pm addCommand [mc "Ŝanĝu skriban enkodon"] [list [self] setEncoding outputencoding "\u0109an\u011du skribatan enkodon"]
    }
    $e addSeparator
    set c [$pm addCommand [mc "Redaktu preferaĵojn"] [list PreferajxojDialogo newBrowser]]
    my @toolbar addMenu $c configure 22.4
    return $pm
}
EsperantoBrowser instproc createMenuTradukado {} {
    my instvar fontaLingvo

    set fontaLingvo ?

    set tr [IDE::MenuStruct new -childof [self] [mc "Tradukado"] 0]

    set mitem [$tr addCommand [mc "Traduku enhavon de redaktilo maŝine"] [list [self]::@editor tradukuFrazojnMasxine] 0 Control-t]
    my @toolbar addMenu $mitem trad 5.9
    set mitem [$tr addCommand [mc "Traduku enhavon de redaktilo interaktive"] [list [self]::@editor tradukuFrazojnInteraktive] 0 Control-T]
    my @toolbar addMenu $mitem itrad 5.91

    $tr addCommand [mc "Traduku enhavon de poŝo"] [list [self] tradukuEnposxigon] 0 Control-o
    $tr addCommand [mc "Traduku enhavon al HTML komparigo"] [list [self] tradukuALHTMLKomparigo]
    $tr addCommand [mc "Tradukileto"] [list [self] lancxuTradukileton] 0 Control-l
    $tr addCommand [mc "Tradukada asistanto"] [list [self] lancxuTradukanAsistenton]

    $tr addCommand [mc "Traduku dosieron"] [list [self] tradukuDosiero]

    $tr addSeparator

    set e ${tr}::tmemoro
    IDE::MenuStruct $e [mc "Traduka Memoro"]
    $tr addCascadeMenu $e
    [TMServilo createMenuElementojTradukmemoro $e [self]]
    $tr addCommand [mc "Elektu kampon por tradukado"] [list [self] elektuTradukKampo]
    $tr addCommand [mc "Elektu vortarojn por tradukado"] [list VortarojAro elektuVortarojn]

    return $tr
}
EsperantoBrowser instproc createSystemMenu {} {
    my instvar win
    set ms [IDE::MenuStruct new -childof [self] [mc "Helpo"] 0]
    $ms addCommand [mc "Pri la programo"] [list EsperantoConf showAbout]
    $ms addCommand [mc "Raportu pri programo"] [list EspErrorReporter reportuTekston ""]
    #$ms addCommand [mc "Montru proprajn raportojn"] [list [self] openHTMLBrowser "http://localhost/~joachim/esperantoedit/raportoj/listo.php?uzantoid=[EsperantoConf prenuUzantoId]"]
    $ms addCommand [mc "Montru proprajn raportojn"] [list [self] openHTMLBrowser "http://www.esperantilo.org/raportoj/listo.php?uzantoid=[EsperantoConf prenuUzantoId]"]
    $ms addCommand [mc "Trovu novan eldonon aŭ flikon"] [list EsperantoConf testuNovanEldononGUI]
    $ms addCommand [mc "Montru permesilon"] [list EsperantoConf montruPermesilon]
    if  {[info exists ::starkit::topdir]} {
        $ms addCommand [mc "Esperanta lingvo"] [list [self] montruEsperantoHelpo]
    }
    $ms addSeparator
    $ms addCommand [mc "Retpaĝo de programo"] [list [self] openHTMLBrowser {http://www.esperantilo.org}]

    set rm [my createMenuKorektado]
    set pm [my createMenuPreferajxoj]
    set lm [my createMenuLingvistiko]
    if {![EsperantiloLancxilo estasEsperantileto]} {
        set tr [my createMenuTradukado]
    }

    if {[winfo toplevel $win]=="."} {
        set twin {}
    } else {
        set twin $win
    }
    $ms createTkMenu $twin.mb.helpo $twin
    $rm createTkMenu $twin.mb.korektado $twin
    $pm createTkMenu $twin.mb.preferencoj $twin
    $lm createTkMenu $twin.mb.lingvistiko $twin
    if {![EsperantiloLancxilo estasEsperantileto]} {
        $tr createTkMenu $twin.mb.tradukado $twin
    }
    $twin.mb add cascade -label [$rm set name] -menu $twin.mb.korektado -underline 0
    $twin.mb add cascade -label [$lm set name] -menu $twin.mb.lingvistiko -underline 0
    if {![EsperantiloLancxilo estasEsperantileto]} {
        $twin.mb add cascade -label [$tr set name] -menu $twin.mb.tradukado -underline 0
    }
    $twin.mb add cascade -label [$pm set name] -menu $twin.mb.preferencoj -underline 0
    $twin.mb add cascade -label [$ms set name] -menu $twin.mb.helpo -underline 0

    [winfo toplevel $win] configure -menu $twin.mb
}
EsperantoBrowser instproc cxuEnvahoGravas {} {
    expr {[my @editor hasUndo] && [EsperantoBrowser yesNo [mc "La enhavo de redaktilo ne estis konservita. La ago povas anstataŭigi la enhavon kun alia teksto. Ĉu daŭrigi?"]] ne "yes"}
}
EsperantoBrowser instproc cxuMontrasKorektilon {} {
    my instvar win
    winfo viewable $win.korektilo
}
EsperantoBrowser instproc destroy {} {
    my instvar vortaro
    if {[info exists vortaro] && $vortaro ne "" && ![$vortaro istype Vortaro]} {
        $vortaro destroy
    }
    if {[llength [EsperantoBrowser info instances]]==1} {
        if {![Object isobject IDEStarter]} {
            exit
        }
    }
    next
}
EsperantoBrowser instproc divenuLingvonStatistike {} {
   my instvar fontaLingvo inputencoding
   if {[EsperantiloLancxilo estasEsperantileto]} {
       set fontaLingvo eo
       return
   }
   set lingvo [my @editor prenuLingvoDeTeksto]
   my setStatusBarText [mc "Lingvo rekonita kiel: %s" $lingvo]
   if {[lsearch [EsperantoConf prenuSubtenatajFontajLingvoj] $lingvo]>=0 ||
       [lsearch [[DBVortaro prenuDepVortaron] subtenatajLingvoj] $lingvo]>=0} {
       set fontaLingvo $lingvo
       my remontruFlagojn
   }
}
EsperantoBrowser instproc ekstraktuFontprogramon {} {
    set dir [IDE::Dialog getDir {} 1]
    if {$dir ne ""} {
        foreach f [glob -directory [EsperantoConf prenuFontoDosierujon] *] {
            file copy -force $f $dir
        }
    }
}
EsperantoBrowser instproc elektuKorektadoTipo {{lng {}}} {
    my instvar vortaroTipo vortaro
    set param ""
    if {[info exists vortaro] && [Object isobject $vortaro]} {
        if {[$vortaro istype HunspellTestilo]} {
            set param [$vortaro set afiksoj]
        }
    }
    set ret [VortaroElektilo prenuVortaron $vortaroTipo $param $lng]
    if {[llength $ret]==0} return
    foreach {tipo param} $ret {}
    if {$tipo eq $vortaroTipo && $tipo eq "esperantilo"} {
        return
    }
    switch -exact -- $tipo {
        esperantilo {
            my fermuVortaron
            set vortaro [HunspellTestiloEo prenuVortaron]
        }
        aspell {
            my fermuVortaron
            set vortaro [AspellTestilo prenuInstancoPorLingvo [my prenuFontanLingvon]]
        }
        hunspell {
            if {[info exists vortaro] && [Object isobject $vortaro] && [$vortaro istype HunspellTestilo] && [$vortaro afiksoj] eq [lindex $param 0]} {
                return
            }
            my fermuVortaron
            set vortaro [HunspellTestilo prenuInstancoPorDosieroj [lindex $param 0] [lindex $param 1]]
        }
    }
    set vortaroTipo $tipo
}
EsperantoBrowser instproc elektuTradukKampo {} {
    EsperantoConf pretiguLingvoTradukado eo
    InteraktivaTradukadoGUI elektuTradukKampo
}
EsperantoBrowser instproc estasEsperantoLingvo {} {
    my instvar fontaLingvo
    expr {$fontaLingvo eq "eo" || $fontaLingvo eq "?"}
}
EsperantoBrowser instproc fermuKorektilon {} {
    my instvar win
    if {[my cxuMontrasKorektilon]} {
       grid forget $win.korektilo
    }
}
EsperantoBrowser instproc fermuVortaron {} {
    my instvar vortaro
    if {[info exists vortaro] && [Object isobject $vortaro]} {
        $vortaro fermuVortaron
        set vortaro ""
    }
}
EsperantoBrowser instproc fileAppend {} {
    my instvar inputencoding
    set filename [IDE::Dialog getOpenFile [my getFileTypes]]
    if {$filename!=""} {
        set fh [open $filename r]
        fconfigure $fh -encoding $inputencoding
        set ret [read $fh]
        if {$inputencoding eq "utf-8" && [string index $ret 0] eq "\uFEFF"} {
            set ret [string range $ret 1 end]
        }
        my @editor appendToCursor $ret
        close $fh
    }
}
EsperantoBrowser instproc fileNew {} {
    EsperantoBrowser newBrowser
}
EsperantoBrowser instproc fileOpen {{filenamet {}}} {
    my instvar filename win inputencoding fontaLingvo
    if {[my cxuEnvahoGravas]} return
    set fileTypes [my getFileTypes]
    set i 0
    set de [EsperantoConf set lastaDosieroTipo]
    foreach f $fileTypes {
        if {[lsearch [lindex $f 1] $de]>=0} {
            if {$i>0} {
                set first [lindex $fileTypes $i]
                set fileTypes [lreplace $fileTypes $i $i]
                set fileTypes [linsert $fileTypes 0 $first]
            }
            break
        }
        incr i
    }

    if {$filenamet eq ""} {
        set olddir [pwd]
        set parent [winfo toplevel $win]
        set filenamet [tk_getOpenFile -initialdir [EsperantoConf set lastaDosiero] -parent $parent -filetypes $fileTypes]
        cd $olddir
    }
    if {$filenamet!=""} {
        if {[EsperantoBrowser testuJamRedaktado $filenamet]} {
            return
        }
        EsperantoConf set lastaDosiero [file dirname $filenamet]
        set de [file extension $filenamet]
        foreach i $fileTypes {
            if {[lsearch [lindex $i 1] $de]>=0} {
                EsperantoConf set lastaDosieroTipo $de
                break
            }
        }
        # TODO prefer
        set autoencoding [EsperantoConf set autoEncoding]
        my @editor setText [my fileReadFrom $filenamet $autoencoding]
        EsperantoConf statAktiono MF
        EsperantoConf aliguVizitanDosieron $filenamet
        set filename $filenamet
        my setTitleAddition [file tail $filename]
        if {$autoencoding} {
            my setStatusBarText [mc "Lingvo rekonita kiel: %s enkodo: %s" $fontaLingvo $inputencoding]
            my remontruFlagojn
        } else {
            my divenuLingvonStatistike
        }
    }
}
EsperantoBrowser instproc fileSave {} {
    my instvar filename outputencoding
    set defextension .txt
    set filetypes {{{Text Files} *.txt} {{Html Files} *.html} {{Htm Files} *.htm} {{XML Files} .xml} {{All files} *}}
    if {![info exists filename]} {
        if {[my @editor estasEnhavoHTML]} {
            set tfilename new
            set defextension .html
            set filetypes {{{Html Files} *.html} {{Htm Files} *.htm} {{Text Files} *.txt} {{XML Files} .xml} {{All files} *}}
        } else {
            set tfilename new
        }
    } else {
        set tfilename $filename
    }
    set tfilename [IDE::Dialog getSaveFile $tfilename $filetypes $defextension]
    if {$tfilename==""} {
        return 0
    }
    if {[my saveFileAs $tfilename [my @editor getText]]} {
        set filename $tfilename
        my setTitleAddition [file tail $filename]
        EsperantoConf aliguVizitanDosieron $filename
        return 1
    } else {
        return 0
    }
}
EsperantoBrowser instproc fileSaveDenove {} {
    if {![my exists filename] || [my set filename] eq ""} {
        return [my fileSave]
    } else {
        my saveFileAs [my set filename] [my @editor getText]
        return 1
    }
}
EsperantoBrowser instproc fillMenuStruct ms {
  $ms enablementHandler [self]
  my requireNamespace
  my instvar konservuButono

  set c [$ms addCommand [mc "Nova Fenestro"] [list [self] fileNew] 0 {Control-n}]
  my @toolbar addMenu $c filenew 1.0
  set c [$ms addCommand [mc "Malfermu"] [list [self] fileOpen] 0 {Control-m}]
  my @toolbar addMenu $c fileopen 1.1
  set c [$ms addCommand [mc "Konservu"] [list [self] fileSaveDenove]  {} {Control-s}]
  set konservuButono [my @toolbar addMenu $c filesave 1.2]
  $konservuButono configure -state disabled
  $ms addCommand [mc "Konservu kiel ..."] [list [self] fileSave]
  $ms addSeparator

  set e ${ms}::lastajDosieroj
  IDE::LastVisitedMenuStruct create $e [mc "Malfermu fruan dosieron"] {} -command [list [self] visituDosierojn]
  $e set menuItems {}
  $ms addCascadeMenu $e
  if {![EsperantiloLancxilo estasEsperantileto]} {
      $ms addCommand [mc "Aligu dosieron..."] [list [self] fileAppend]
      $ms addCommand [mc "Relegu la dosieron"] [list [self] reloadFile]
      $ms addCommand [mc "Konservu ĉion"] [list EsperantoBrowser porCxiu fileSave]
  }
  my @toolbar addSeparator 1.3
  if {![EsperantiloLancxilo estasEsperantileto]} {
      $ms addSeparator
      $ms addCommand [mc "Montru en HTML-Foliumilo"] [list [self] montruEnHTML]
      $ms addCommand [mc "Aliformu dosierojn..."] [list [self] transferFiles]
      $ms addSeparator
  }
  $ms addCommand [mc "Fermu la fenestron"] [list [self] closeBrowser]
  $ms addCommand [mc "Forlasu la programon"] [list [self] quitApp] {} _Alt-F4
}
EsperantoBrowser instproc getEspVortaron {} {
    Vortaro prenuVortaron
}
EsperantoBrowser instproc getFileTypes {} {
    return {{{Text Files} .txt} {{Html Files} {.html .htm}} {{XML Files} .xml} {{All files} *}}
}
EsperantoBrowser instproc getMenuStruct {} {
    IDE::MenuStruct create [self]::ms [mc "Dosiero"] 0
}
EsperantoBrowser instproc getTitle {} {
    return "Esperantilo"
}
EsperantoBrowser instproc getVortaron {} {
    my instvar vortaro vortaroTipo
    set lng [my prenuFontanLingvon]
    if {$lng eq "?"} {
        return
    }
    if {[info exists vortaro] && [Object isobject $vortaro]} {
        if {[$vortaro prenuLingvon] eq $lng} {
            return $vortaro
        } else {
            my fermuVortaron
        }
    }
    if {$lng eq "eo"} {
        set vortaro [HunspellTestiloEo prenuVortaron]
        return $vortaro
    }
    set vortaro [HunspellTestilo prenuInstancoPorLingvo $lng]
    if {$vortaro eq ""} {
        if {[EsperantoBrowser yesNo [mc "Literuma vortaro por lingvo %s ne estis trovita.\nĈu vi volas agordi viajn vortarojn?" $lng]] eq "yes"} {
            my elektuKorektadoTipo $lng
        }
    }
    return $vortaro
}
EsperantoBrowser instproc ignoruVorton {} {
    set vorto [my @editor prenuVorton]
    if {$vorto eq ""} return
    [my getVortaron] alliguIgnorvorto [string tolower $vorto]
}
EsperantoBrowser instproc isValidTextSelection {} {
    my @editor isValidTextSelection
}
EsperantoBrowser instproc jxusKonservita {} {
    my instvar filename
    expr {[info exists filename] && $filename ne ""}
}
EsperantoBrowser instproc konservoLeksikonon args {
    set dosiero [IDE::Dialog getSaveFile *.xotcl]
    if {$dosiero ne ""} {
        Radiko konservuVortoj $dosiero
    }
}
EsperantoBrowser instproc lancxuSkripton {} {
    set filetypes {{{Tcl Skripto} {*.tcl *.xotcl}}}
    set file [::IDE::Dialog getOpenFile $filetypes]
    if {$file eq ""} return
    namespace eval :: [list source $file]
}
EsperantoBrowser instproc lancxuTradukanAsistenton {} {
    EsperantoConf pretiguLingvoTradukado eo
    TradukadoAsistento newBrowser
}
EsperantoBrowser instproc lancxuTradukileton {} {
    EsperantoConf pretiguLingvoTradukado eo
    Tradukileto newBrowser
}
EsperantoBrowser instproc malfermuDeVikipedio {} {
    set ret [IDE::IDialogEntry getValueWithCancel [mc "Difinu artikolon de vikipedio por elŝuto"] ""]
    if {$ret eq "_cancel"} return
    set text [VikipediaLegilo prenuArtikolon $ret eo]
    if {$text eq ""} {
        EsperantoBrowser message [mc "Artikolo ne trovita"]
        return
    }
    EsperantoBrowser redaktoTekston $text
}
EsperantoBrowser instproc markuMaloftajnVortojn {} {
    set limo [IDE::IDialogEntry getValueWithCancel [mc "Difinu la grupon de frekventeco"] 9]
    if {$limo eq "_cancel" || ![string is integer $limo]} {
       return
    }
    set ts [VortoMarkiloMaloftajVortoj new -limo $limo]
    EsperantoConf statAktiono AN
    $ts analizuDeFenestro [my @editor]
    $ts rezultuAnalizon
    $ts montruAnalizon
    $ts destroy
}
EsperantoBrowser instproc montruCxiamKorektilon {} {
    my instvar win
    if {![winfo viewable $win.korektilo]} {
        grid $win.korektilo -row 3 -column 0 -sticky ew
    }
}
EsperantoBrowser instproc montruEnHTML {} {
    if {![my @editor estasEnhavoHTML]} {
        EsperantoBrowser message [mc "ŝajnas ne esti en HTML-Formato"]
        return
    }
    if {![my jxusKonservita]} {
        EsperantoBrowser message [mc "konservi unue la enhavon en dosiero"]
        my fileSaveDenove
        if {![my jxusKonservita]} {
            return
        }
    }
    my instvar filename
    my openHTMLBrowser $filename
}
EsperantoBrowser instproc montruEspEspVortaron {} {
    set d [EspEspVortaro prenuDosieron]
    if {[file exists $d]} {
        if {[EsperantoBrowser testuJamRedaktado $d]} {
            return
        }
        set redaktilo [EsperantoBrowser redaktuDosieron $d]
        $redaktilo mixin add EspBrowSaveMix
        $redaktilo postSaveAction "
            \[EspEspVortaro prenuVortaron\] relegu
        "
    } else {
        EsperantoBrowser message [mc "eo-eo vortaro ne trovita en %s" $d]
    }
}
EsperantoBrowser instproc montruEsperantoHelpo {} {
    set ::help_called ""
    source [file join $starkit::topdir lib helpviewer hv.tcl]
}
EsperantoBrowser instproc montruFrazparoVortaron {} {
    set lingvo [my prenuCelanLingvon]
    set d [FrazpartoVortaro prenuDosierujonPorLingvo $lingvo]
    if {[file exists $d]} {
        if {[EsperantoBrowser testuJamRedaktado $d]} {
            return
        }
        set redaktilo [EsperantoBrowser redaktuDosieron $d]
        $redaktilo mixin add EspBrowSaveMix
        $redaktilo postSaveAction "
            set fpv \[FrazpartoVortaro prenuPorLingvo $lingvo\]
            \$fpv leguDeDosiero
        "
    } else {
        EsperantoBrowser message [mc "Frazpartovortaro %s ne ekzistas. Eble Esperantilo ne subtenas la frazpartan vortaron por lingvo %s en tiu eldono" $d $lingvo]
    }
}
EsperantoBrowser instproc montruGramRegulojn {} {
    set d [GramMReguloKorektilo prenuGramKorektiloDosieron]
    if {[file exists $d]} {
        if {[EsperantoBrowser testuJamRedaktado $d]} {
            return
        }
        set redaktilo [EsperantoBrowser redaktuDosieron $d]
        $redaktilo mixin add EspBrowSaveMix
        $redaktilo postSaveAction {GramMReguloKorektilo relegu}
    } else {
        EsperantoBrowser message [mc "Dosiero kun ekzemplaj reguloj %s ne estas trovita" $d]]
    }
}
EsperantoBrowser instproc montruHTMLKorektilon montru {
    my instvar win
    if {$montru} {
        if {![winfo viewable $win.htmlkorektilo]} {
            if {[winfo viewable $win.korektilo]} {
                grid forget $win.korektilo
            }
            grid $win.htmlkorektilo -row 3 -column 0 -sticky ew
        }
    } else {
        if {[winfo viewable $win.htmlkorektilo]} {
            grid forget $win.htmlkorektilo
        }
    }
}
EsperantoBrowser instproc montruIgnorvortojn {} {
    set d [IgnorvortoListo ignorVortoDosiero]
    if {[file exists $d]} {
        if {[EsperantoBrowser testuJamRedaktado $d]} {
            return
        }
        set redaktilo [EsperantoBrowser redaktuDosieron $d]
        $redaktilo mixin add EspBrowSaveMix
        $redaktilo postSaveAction {[Vortaro prenuVortaron] sxarguIgnorvortoj}
    } else {
        EsperantoBrowser message [mc "Dosiero kun ignorvortoj %s ne estas trovita" $d]]
    }
}
EsperantoBrowser instproc montruKorektilon {{rekomencu 0}} {
    my instvar win
    if {![my @editor havasTekston]} return

    if {![my cxuMontrasKorektilon]} {
       if {[winfo viewable $win.htmlkorektilo]} {
           grid forget $win.htmlkorektilo
       }
       grid $win.korektilo -row 2 -column 0 -sticky ew
       update
       my @korektilo rekomencu
    } else {
        if {$rekomencu} {
            my @korektilo korektu
        } else {
            my @korektilo rekomencu
        }
    }
}
EsperantoBrowser instproc montruPriBonajnSinonimojn {} {
    set d [PliBonaVortoKorektilo prenuKorektiloDosieron]
    if {[file exists $d]} {
        if {[EsperantoBrowser testuJamRedaktado $d]} {
            return
        }
        set redaktilo [EsperantoBrowser redaktuDosieron $d]
        $redaktilo mixin add EspBrowSaveMix
        $redaktilo postSaveAction {PliBonaVortoKorektilo relegu}
    } else {
        EsperantoBrowser message [mc "Dosiero kun pli bonaj sinonimoj %s ne estas trovita" $d]]
    }
}
EsperantoBrowser instproc montruRadikaroRedaktilon {} {
    set vorto [my @editor vortoSubKursoro]
    if {$vorto ne ""} {
        set evortaro [Vortaro prenuVortaron]
        #my halt
        if {[$evortaro estasVorto $vorto]==2} {
            RadikaroRedaktilo montruRadikoDerivo [$evortaro set radiko] [$evortaro prenuBazanFormon]
            return
        }
    }
    RadikaroRedaktilo newBrowser
}
EsperantoBrowser instproc montruRevoVortaron {} {
    set vorto [string trim [my @editor vortoSubKursoro]]
    REVOLeksMontrilo newBrowser [string tolower $vorto]
}
EsperantoBrowser instproc montruTajparon {} {
    my instvar win
    if {[winfo exists $win.tajparo] && [winfo viewable $win.tajparo]} {
        grid forget $win.tajparo
    } else {
        my @tajparo metuTajparo [EsperantoConf set tajparoLingvo]
        grid $win.tajparo -row 5 -column 0 -sticky ew
    }
}
EsperantoBrowser instproc montruTezauron {} {
    set vorto [string trim [my @editor vortoSubKursoro]]
    EsperantoConf statAktiono SI
    if {$vorto eq "" || [regexp {\s} $vorto]} {
        TezauroMontrilo newBrowser
        return
    }
    set vortaro [Vortaro prenuVortaron]
    if {[$vortaro estasVorto $vorto]==2} {
        TezauroMontrilo montruPorVorto [$vortaro prenuBazanFormon]
    } else {
        TezauroMontrilo newBrowser
    }
}
EsperantoBrowser instproc montruUzadoFreq {} {
    set vorto [string trim [my @editor vortoSubKursoro]]
    FrazpartoFrekMontrilo newBrowser [string tolower $vorto]
}
EsperantoBrowser instproc montruVortaron {} {
    my instvar fontaLingvo
    set vorto [string trim [my @editor vortoSubKursoro]]

    if {$vorto eq "" || [regexp {\s} $vorto]} {
        TradukaVortaroMontrilo newBrowser
        return
    }
    if {$fontaLingvo eq "eo"} {
        set vortaro [Vortaro prenuVortaron]
        if {[$vortaro estasVorto $vorto]==2} {
            set vorto [$vortaro prenuBazanFormon]
        }
    }
    set flingvo [my prenuFontanLingvon]
    if {$flingvo eq "?"} {
        set flingvo eo
    }
    TradukaVortaroMontrilo trovuTradukoPorLingvoj $vorto $flingvo [my prenuCelanLingvon]
}
EsperantoBrowser instproc montruVortaronEnEo {} {
    EsperantoConf prenuLingvoFabriko en
    set d [EnMultVortTradukado prenuDosieron]
    if {[file exists $d]} {
        if {[EsperantoBrowser testuJamRedaktado $d]} {
            return
        }
        set redaktilo [EsperantoBrowser redaktuDosieron $d]
        $redaktilo mixin add EspBrowSaveMix
        $redaktilo postSaveAction "
            set fpv \[EnMultVortTradukado prenuVortaron\]
            \$fpv relegu
        "
    } else {
        EsperantoBrowser message [mc "Dosiero %s ne ekzistas." $d]
    }
}
EsperantoBrowser instproc montruVortaronPlEo {} {
    EsperantoConf prenuLingvoFabriko pl
    set d [PlMultVortTradukado prenuDosieron]
    if {[file exists $d]} {
        if {[EsperantoBrowser testuJamRedaktado $d]} {
            return
        }
        set redaktilo [EsperantoBrowser redaktuDosieron $d]
        $redaktilo mixin add EspBrowSaveMix
        $redaktilo postSaveAction "
            set fpv \[PlMultVortTradukado prenuVortaron\]
            \$fpv relegu
        "
    } else {
        EsperantoBrowser message [mc "Dosiero %s ne ekzistas." $d]
    }
}
EsperantoBrowser instproc novalingvo {caller lng} {
    my instvar fontaLingvo celaLingvo gramatikoButono
    if {$caller eq [my @flingvobut]} {
        my sxangxuFontanLingvon 0
    } else {
        if {$fontaLingvo eq $celaLingvo} {
            if {$fontaLingvo eq "eo"} {
                set fontaLingvo [EsperantoConf set lingvo]
            } else {
                set fontaLingvo eo
            }
            my remontruFlagojn
        }
    }
    if {$fontaLingvo eq "eo"} {
        $gramatikoButono configure -state normal
    } else {
        $gramatikoButono configure -state disabled
    }
    return 1
}
EsperantoBrowser instproc openHTMLBrowser url {
    iloj::openHTMLBrowser $url
    my setStatusBarText [mc "TTT-montrilo estas lanĉita"]
}
EsperantoBrowser instproc prenuCelanLingvon {} {
    my set celaLingvo
}
EsperantoBrowser instproc prenuFontanLingvon {} {
    my instvar fontaLingvo
    if {$fontaLingvo eq "?"} {
        set lingvo [my @editor prenuLingvoDeTeksto]
        my setStatusBarText [mc "Lingvo rekonita kiel: %s" $lingvo]
        if {[lsearch [EsperantoConf prenuSubtenatajFontajLingvoj] $lingvo]>=0 ||
         [lsearch [[DBVortaro prenuDepVortaron] subtenatajLingvoj] $lingvo]>=0} {
            set fontaLingvo $lingvo
        } else {
            lappend lingvoj [list eo Esperanto]
            foreach {l nomo} [[DBVortaro prenuDepVortaron] subtenatajLingvoj] {
                lappend lingvoj [list $l $nomo]
            }
            set lingvo [IDE::IDialogList getListItem [mc "Elektu la fontan lingvon"] $lingvoj {eo Esperanto}]
            if {$lingvo eq ""} { return "?" }
            set fontaLingvo [lindex $lingvo 0]
        }
        my remontruFlagojn
    }
    return $fontaLingvo
}
EsperantoBrowser instproc prenuTMCelaLingvo {} {
    my set celaLingvo
}
EsperantoBrowser instproc prenuTMFontaLingvo {} {
    my prenuFontanLingvon
}
EsperantoBrowser instproc quitApp {} {
    foreach i [EsperantoBrowser info instances] {
        if {![$i canClose]} {
            return
        }
    }
    exit
}
EsperantoBrowser instproc reloadFile {} {
    my instvar filename
    if {[info exists filename]} {
        my @editor setText [my fileReadFrom $filename]
    }
}
EsperantoBrowser instproc remontruFlagojn {} {
    my instvar gramatikoButono fontaLingvo celaLingvo
    if {$fontaLingvo eq $celaLingvo} {
        if {$fontaLingvo eq "eo"} {
            set celaLingvo [EsperantoConf set lingvo]
        } else {
            set celaLingvo eo
        }
    }
    my @flingvobut sxangxuFlagon
    if {![EsperantiloLancxilo estasEsperantileto]} {
        my @lingvobut sxangxuFlagon
    }
    if {$fontaLingvo eq "eo"} {
        $gramatikoButono configure -state normal
    } else {
        $gramatikoButono configure -state disabled
    }
}
EsperantoBrowser instproc saveFileAs {filename text} {
    my instvar havasSxangxojn konservuButono
    set ret [next]
    if {$ret} {
        set havasSxangxojn 0
        EsperantoConf statAktiono KV
        $konservuButono configure -state disabled
        [my @editor getTextWindow] edit modified 0
        my tekstoSxangxita
        my setStatusBarText [mc "%s estas konservita" [file tail $filename]]
    }
    return $ret
}
EsperantoBrowser instproc showAbout {} {
    IDE::Dialog infoMessage [mc "   Esperantilo %s\nLa programo estas skribita de Artur Trzewik kaj estas GPL licencata\n    hejmpa\u011do http://www.esperantilo.org\nEsperantilo comes with ABSOLUTELY NO WARRANTY\nSee the GNU General Public License for more details. (http://www.gnu.org)" [EsperantoConf prenuEldono]]
}
EsperantoBrowser instproc specificInit {} {
    my instvar win trueString vortaroTipo havasSxangxojn fontaLingvo celaLingvo transFrom transTo inputencoding

    my requireNamespace
    my initVariables
    set inputencoding auto
    set vortaroTipo esperantilo
    set havasSxangxojn 0

    if {$celaLingvo eq "?"} {
        set celaLingvo [EsperantoConf set lingvo]
    }

    set modoj [list $trueString gx gh g^ ^g html utf revo]
    IDE::Toolbar create [self]::@toolbar $win.toolbar
    my @toolbar addCommand [mc "Konvertu"] [list [self] translate] forward 5.2
    my @toolbar addCommand [mc "Montru tajpilon"] [list [self] montruTajparon] keyboard 5.3
    ttk::combobox $win.toolbar.transFrom -values $modoj -textvariable [self]::transFrom -state readonly -width 4  -exportselection 0
    # IDE::StateButton create [self]::transFrom $win.toolbar.transFrom  -states $modoj
    # $win.toolbar.transFrom configure -width 5
    set transFrom gx
    my @toolbar addWin $win.toolbar.transFrom 5.1

    #IDE::StateButton create [self]::transTo $win.toolbar.transTo  -states $modoj
    ttk::combobox $win.toolbar.transTo -values $modoj  -textvariable [self]::transTo -state readonly -width 4 -exportselection 0
    set transTo ĝ
    my @toolbar addWin $win.toolbar.transTo 5.3

    label $win.toolbar.info -text [mc "Tajpu gx por skribi ĝ"]
    # pack $win.toolbar.spelltext $win.toolbar.korektilo $win.toolbar.transFrom $win.toolbar.translate $win.toolbar.transTo $win.toolbar.info -side left

    EsperantoEditor create [self]::@editor $win.editor
    my @editor setText {}
    bind [my @editor getTextWindow] <<Modified>> [list [self] tekstoSxangxita]

    Korektilo create [self]::@korektilo [list -win $win.korektilo]
    LingTajparo create [self]::@tajparo [list -win $win.tajparo] [list -txtWindow [my @editor getTextWindow]]
    HTMLKorektilo create [self]::@htmlkorektilo [list -win $win.htmlkorektilo] [list -editor [my @editor]]

    grid $win.toolbar -sticky ew -column 0 -row 0
    #pack $win.korektilo -fill x -side bottom -expand yes
    grid $win.editor -sticky news -column 0 -row 1
    grid columnconfigure $win 0 -weight 1
    grid rowconfigure $win 1 -weight 1
    my initStatusBar 4 1

    set labwin [LingvoSelektoButono create [self]::@flingvobut $win.toolbar.flingvo -variable [self]::fontaLingvo -esplingvo 0 -callback [self]]
    my @flingvobut set markitaj [EsperantoConf prenuSubtenatajFontajLingvoj]
    my @toolbar addWin $win.toolbar.flingvo 5.85

    if {![EsperantiloLancxilo estasEsperantileto]} {
        set labwin [LingvoSelektoButono create [self]::@lingvobut $win.toolbar.lingvo -variable [self]::celaLingvo -esplingvo 0 -callback [self]]
        my @lingvobut set markitaj [EsperantoConf prenuSubtenatajCelajLingvoj]
        my @toolbar addWin $win.toolbar.lingvo 20.1
    }
    if {[EsperantoConf set prefGeometry] ne ""} {
        wm geometry $win [EsperantoConf set prefGeometry]
    }
    focus [my @editor getTextWindow]
    next
}
EsperantoBrowser instproc spellText {} {
    if {![my @editor havasTekston]} return
    EsperantoConf statAktiono LT
    set vortaro [my getVortaron]
    if {$vortaro eq ""} return
    EsperantoBrowser showBusyWhile {
        set ret [my @editor spellText $vortaro]
    }
    my setStatusBarText [string map [list "\n" " "] $ret]
}
EsperantoBrowser instproc sxangxiTajparo {} {
    my instvar win
    my @tajparo metuTajparo [EsperantoConf set tajparoLingvo]
    grid $win.tajparo -row 5 -column 0 -sticky ew
}
EsperantoBrowser instproc sxangxuFontanLingvon {{remontru 1}} {
    my instvar fontaLingvo celaLingvo
    if {$fontaLingvo eq $celaLingvo} {
        if {$fontaLingvo eq "eo"} {
            set celaLingvo [EsperantoConf set lingvo]
        } else {
            set celaLingvo eo
        }
        my remontruFlagojn
    } else {
        if {$remontru} {
            my remontruFlagojn
        }
    }
    my @editor reliterumu

}
EsperantoBrowser instproc sxargxuREVO args {
    set dosierujo [::IDE::Dialog getDir]
    if {$dosierujo ne ""} {
        REVOLegiloRefresxigo legiDosieron $dosierujo
    }
}
EsperantoBrowser instproc sxargxuVortleksikon {} {
    RadikoKonservadoMix malsxaltuPrivatanKonservadon
    set dosiero [::IDE::Dialog getOpenFile {{{All files} *} {xotcl *.xotcl}}]
    if {$dosiero ne ""} {
        if {[catch {namespace eval :: [list source $dosiero]} mes]} {
            puts $::errorInfo
            IDE::Dialog error [mc "Eraro ĉe ŝarĝo de privata vortaro: %s" $mes]
        }
    }
    RadikoKonservadoMix sxaltuPrivatanKonservadon
}
EsperantoBrowser instproc tekstoSxangxita {} {
    my instvar filename havasSxangxojn konservuButono
    set twin [my @editor getTextWindow]
    my @korektilo tekstoSxangxita
    if {!$havasSxangxojn && [$twin edit modified]} {
        set mark " *"
        set havasSxangxojn 1
        $konservuButono configure -state normal
        my setStatusBarText [mc "Teksto enhavas ŝanĝojn"]
        if {[info exists filename]} {
            my setTitleAddition "[file tail $filename]$mark"
        } else {
            my setTitleAddition $mark
        }
    } elseif {!$havasSxangxojn && ![$twin edit modified]} {
        if {[info exists filename]} {
            my setTitleAddition [file tail $filename]
        } else {
            my setTitleAddition ""
        }
    }
}
EsperantoBrowser instproc tradukuALHTMLKomparigo {} {
    set flingvo [my prenuFontanLingvon]
    if {$flingvo eq "?"} return
    set fname [IDE::Dialog getSaveFile  komparo.html {{{Html Files} *.html} {{Htm Files} *.htm}}]
    if {$fname ne ""} {
        set fabriko [my @editor prenuLingvoFabrikon]
        if {$fabriko eq ""} return
        set out [HTMLKomparadoTradukilo tradukuTekston [my @editor getText] $fabriko]
        set f [open $fname w]
        puts -nonewline $f $out
        close $f
        my openHTMLBrowser $fname
    }
}
EsperantoBrowser instproc tradukuDosiero {} {
    EsperantoConf pretiguLingvoTradukado eo
    TradukadoDosieroAsistento newBrowser
}
EsperantoBrowser instproc tradukuEnposxigon {} {
    my instvar fontaLingvo
    if {[catch {clipboard get} teksto]} {
        my setStatusBarText [mc "Nenio en teksta poŝo"]
    }
    if {$teksto ne ""} {
        EsperantoConf statAktiono TP
        clipboard clear
        EsperantoConf set tradInteraktiva 0
        set fabriko [my @editor prenuLingvoFabrikon]
        if {$fabriko eq ""} return
        clipboard append [TekstoTradukilo tradukuTekston $teksto $fabriko]
        my setStatusBarText [mc "teksta poŝo estas tradukita"]
    } else {
        my setStatusBarText [mc "Nenio en teksta poŝo"]
    }
}
EsperantoBrowser instproc transferFiles {} {
   EsperantoFileConverter new  -childof [self] [Object autoname .converter]
}
EsperantoBrowser instproc translate {} {
    my instvar characterMap trueString transFrom transTo
    if {$transTo eq $transFrom} {
        EsperantoBrowser message [mc "celo- kaj fontoenkodo estas la samaj"]
    }
    set text [my @editor getText]
    EsperantoConf statAktiono TR
    if {($transFrom eq "gx" || $transFrom eq "gh") && $transTo eq "ĝ" && [EsperantoConf set literoKonvertoKunVortaro]} {
        set text [VortaroSignoKonvertilo konvertuTekston $text $transFrom $transTo]
    } else {
        set text [my translateString $text $transFrom $transTo]
    }
    my @editor setText $text
}
EsperantoBrowser instproc visituDosierojn file {
    if {![file isfile $file]} {
        EsperantoBrowser message [mc "Dosiero %s ne estas atingebla" $file]
        return
    }
    my fileOpen $file
}
EsperantoBrowser proc createImage name {
    if {[lsearch [image names] $name]<0} {
        switch $name {
flages {
     image create photo flages -data {R0lGODlhIAAWAPUAADgAAF8AAGEAAGIAAGUAAGcAAGgAAGgBAGwNAKwAAK8AALAAALEAALEBALIA
ALMAALQAALUAALUBALYAALYBALcAALkWAL0WAL4WAIpjAJF3AJF5AJJ6AJJ7AJJ8AJKAAOypAPGt
APKuAPjLAP3PAPnQAPrRAPrSAPrTAP7QAP7UAP/VAP/WAP/XAPraAP/YAP/ZAP/fAP/gAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYAAAaTQEBg
ICgaj8ikUkDAOJ/QqHT6NFCvWKg1y50eumBoIUzOgEShtHrNbrtDH5csRq/b7/h8bFNaqf6AgYKD
hCodJy0siouMjY6PLIeJkJSVkYiWmY6Smp2KnJ6aHCYsK6anqKmqqyseKDAvsbKztLW2LxojKSS8
vb6/wMEkCBYYF8fIycrLzBdjZGBf0F1b01nV1ldBADs=}
}
flagtr {
     image create photo flagtr -data {R0lGODlhIAAWAPYAAE4SEoUfH4ggIIkgII4iIpIjI/8oKP8sLP8uLv8vL/M6Ov8wMP8xMf8yMv8z
M/80NP81Nf82Nv83N/g7O/k7O/o8PP84OP85Of86Ov87O/88PP89Pf8+Pv8/P/9AQP9BQf9CQv9D
Q/9ERP9GRv9KSv9LS/9NTf9RUf9SUv9UVP9YWP9cXP9jY/9kZP9oaP9sbP9vb/+Cgv+Dg/+Ghv+L
i/+Tk/+UlP+Wlv+dnf+goP+lpf+oqP+srP+urv+zs/+3t/+5uf+6uv/AwP/Ly//Nzf/R0f/T0//V
1f/g4P/k5P/m5v/t7f/u7v/39//5+f/6+v/8/P/9/f///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAAAAAAALAAAAAAgABYAAAf+gAABAwKFhoeIiYoCBAoUE5CRkpOUlRMFFRuam5ydnp+amKAcHR4d
oKgbop2kEgwJDhscqZ6rmxwYDyoyNi8bFrO0m7ayGCJBUVLKQCYYwcLEHBZDUk9SPisnJBnPtLYe
CTRSTlI7CBAXGhoZ6tCZmxlHykoeGR7gMCkYHxre77gjmCjzseCDrBE8kODo508ThwwjlijLkcAD
hws1JMao2FCWhg9JlBWJ4GGDBwM0hNwo2dEkAx1SoEBJwSDEBwstQljg1/JiCYFSjpgw0ECaR3ec
Ojxw0UQZkx4zQMgSFurdpg4QUOAgYuQHC4ZUVVm9aiEBhAcHHoQdNvaqqVIM3agSW9uSbl27qAIB
ADs=}
}
flagfr {
     image create photo flagfr -data {R0lGODlhIAAWAPUAAAAMRAATcQASdQAUcwAUdAAVdAAVdgAVdwEWdg8ieQAdxAAeyAAeyQAhwQAi
xQEjxQAixgAjyQAjygAjywEkyQEkyhk3yhk5zhk5z5YiIpYkJPo5Ofo8PP86Ov89PZaBgZGRlZaV
lZaWlpabm5iXlvrX1//b2/Hy+Pb3/fn5+vr4+Pr6+vr///38+//9/f7+/////wAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYAAAbMQEDh
YCgWEYIEiCRqOkOjT0ZDrVYDDYhju30oLKdWakUmq1ilDWfNZhMgE4lcXmFgULAXbL93wUwdHoKD
gwMOEhGJiRQLF3h6fDB+gISVhoiKEYyOeZGSf4GVhYeZmo2PnpOhoh6XpZuokaqsgq6ZsJ2yoLSt
pLenuXyztLaKuJDCu8S+xsDIfcqsxYvOqdGi06acz5+Uy5jN29be0szU4rrk2ObascnqluzH46vr
4Ofu0PCE2fPp9fHutQumDyA/edX+8eqX8J3BQUEAADs=}
}
flaghe {
    # izraela
     image create photo flaghe -data {R0lGODlhIAAWAPYAADE5bTY+bzlBcDpBcFNTVVRiulZkvlZlv11qvW1whG1xhHF0hWJvv11rwV5s
wV9swWBtwmRwwGRxw2VyxGZyxGdzxWh0xXSAynWBynmEy3mFy3yGzIKDjI6OkZGRkZKSkZKSkpGR
lJKSlYGMz4OOz4aQ0IyW05CZ1JOc1Zae1pef15eg15mh15yk2Jyk2Z6m2p+n2qCo2qSs3Kau3amw
3qyz362037G34be947q/4bvB4rvB5LzB5b7D5r/E57/F58HG5MDG6MTJ6cXK6cbL6cbL6snN6tfb
8Nnc8N7g797h8uLk9OPl9OTm9eXn9ers9+vt9+zt+O3u+Pj4+fn5+fr6+fr6+vz8/v39/v39//7+
/v7+/////v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAAAAAAALAAAAAAgABYAAAf+gAQdIiGFhoeIiYohH1VdXJCRkpOUlVwKOkE/m5ydnp+gPwAFBwam
p6ipqqsGAxEVFLGys7S1thSjpay7vAYLQEVDwsPEw0ZEQsXKwiBWXc/Q0c9bXTNLXdTS2h5TW1jf
4OFYXUcpNM/i6VjN2tFXLjEZMBsoKjxd4+1d7PrjNxc4skQ5QUIJNn37nOmjJsUClGcvTOBDmBDh
OBsYbHRhcmIEki5aEPLTd6WFjAwrNLCwN1GfByogtcicOXMckxI1sNHcOXMkQmo7nhyk2IVDkiZM
kipdmnQJFCdLmEpNGgABhAdYs2rN2sDB1q9ZBTCYIKGs2bNo06qVkKuXW1USCXL46EG3rt27ePP2
8Em0L7RAADs=}
}
flagda {
     image create photo flagda -data {R0lGODlhIAAWAPYAAFoWFpIeHp0dHZAiIpIiIpIjI5IkJJIoKJolJZ0kJJ0mJp4mJp0oKJ1ZWZJ3
d/8mJvsuLv8tLf8vL/Y7O/o0NP8wMP8xMf8yMv81Nf82Nv83N/s5Ofo6Ovo8PPo9Pfs8PPo+Pvs/
P/84OP86Ov87O/w8PP88PP89Pf8+Pv8/P/pERP9AQP9BQf9CQv9FRf9ISJKHh52Hh5KSkp2goJ2l
pfuOjv+MjP+QkP+Rkf+Skv+VlfrLy//MzP/Ozv/Pz//Q0PvY2P/a2v/b2//d3frm5v/k5P/q6v/r
6//s7P/09P/29vr6+vv////7+////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAAAAAAALAAAAAAgABYAAAfygAAICwqFhgoJMTM0DQIMh5CRAxMlH5aXHxtATEw1ECGYoaIFHSem
p6YjQk5OOBIrqLGypLKpq62vtbq0taqsrrC6s6W9t8DCw7q+uMHIp7yyy8fOpwYgKdjZ2Ca3ORYt
2uHiARQY5ucYGRdBrDYPIujx8g47Pz73+D49SqxFPPb5AgaUsYSVwYMIEyo0CIMIkiMQI0JswiqJ
EYkYMx45oMKFx48eWwxhpUPDC5AoUxLgQKKly5Yibt2IgOKlzZsGPKDYyXMnCWMVWPQcShRaLGm5
qJkyigppM2pMTzlVupRYNGNJlUa19SsrVKtHsT51FggAOw==}
}
flagcs {
     image create photo flagcs -data {R0lGODlhIAAWAPcAAAAAOgAObwEUcQAUcwAUdAAVdwAWdG0Ucn4SZWNnfBgguCYfrigcoDMcoQAS
xQAVyAAVyQAZxgAZxwEbxAAaxwAbxwEcxwEeyAIiwwAixQIjxwMixgMjxgIkxQQixQQixwYlxgAj
yQEjyAEjyQAjygEjygMjygEjzQMkyQIlygMmygAkzwEkzwQjyAQjyQQjygYgyAQlygQnygQoyggj
xwohxw4iwQIj0AEk0QAl0gIk0gAl1AAl1gAl2AAm2SE+xyI9zyVB0TFN1DVQ1EUZk1wWgH5/hGZ8
4GuB4H2R5LsJNpEPVqgMRK06btoFHc0GJM8KKe8CDecDE/YAAvcBA/UCCPgAAPsAA/sBA/sBBf0A
AfwAAvwBA/0AAv0BA/4AAf8AAP4CA/8DA/9FPf9DQ/xDRIKDhYWFhYaFhamkjoKV5YWZ57nC7LvF
8czT9M7V9dHY9fX19/Hz/fP1/Pb+//j4+Pn5+fn6/vv8/vz8/vz8//z9/v39/v39//78/P/9/f//
/P7+//7////+/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYA
AAj+AAEkSGPEDJozCBMqXMhwYYAfbADZiVOnosWLGDNiNDDhwRE5hPoQGkmypMmTJQd0iOEASBtC
efKgnDlzQAYSMyxQQDKHEJ5ANIOOtEkiRAqWQdz41COUJtEQIUbIqHAhyR2fQJuafArVKAoHQt7A
3KM15c2uUKVGgKGGj89BZQlxRRtChQsHQ+AQ8vOnr9+/gOfSlSqhxho6hARpFUw3BIgbEJqMKUOm
suXLlhl31dCixwIoYLSAGU26dGnNITywwHGgCpgwYmLLnk2bsYgPPBQoAbNli+nfpgVvOLGjSBQw
V74AXz6aqwgPO2wwAdPFN3PmTzmY8EFEChgsyq80Y89QwkMOGkuUcxEvngCGFz4aOPkumv11ASt0
IMgCxot99gUw8AQYVExhxYEIJqjgggoGBAA7}
}
flagja {
     image create photo flagja -data {R0lGODlhIAAWAPUAAE1NTf8AAP8BAf8CAv8DA/8EBP8FBf8GBv8JCf8KCv8REf8TE/8UFP8eHv8f
H/8jI/8mJv8yMv9BQf9PT/9QUP9RUf9WVv9hYf95eYSEhIeHh4iIiI6OjpKSkv+Dg/+Fhf+QkP+l
pf+rq/+urv+1tf+5uf+6uv+7u//Ly//Nzf/Pz//V1f/d3f/i4v/j4//p6fPz8//x8f/z8/j4+Pn5
+fr6+v/6+v/7+//8/P/9/f/+/v///wAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYAAAbiQEBm
oykaj8ikUsOB0WbQqHRKrc46tZ12y+16v1oseJu7bXG48VY8xul2t/g7rWZ/0yyL49GQmHY5dVlf
gSMKAQIBiAEYgGN2XIErCAEGA5cFBAEnO3RekGQ7FZWKpZoRNjtvn4OROy0Ji6WKmiSdX6C3JwED
s6UFAR9wuK1nOyUBmr4BwB7DrF5pu73LwMJm0F2BLZSJvrW32do7F8y+vRAyqsSEOy4MlYkCmQEi
4eJdaSEHsr0g9/jy7Ugx4dACCih0BHpUzEuONy9UxNCykKEaQNg6ebJ4UdXDjmEaguwYBAA7}
}
flagzh {
     image create photo flagzh -data {R0lGODlhIAAWAPYAAE4AAIYAAIkAAIkBAIkCAIoAAI8AAJIAAJIBAPQAAPkAAPkBAPkCAPkDAPoA
APoBAP8AAP8BAP8CAP8DAP8EAP8FAP8GAP8HAP8JAP8KAP8NAP8PAP8QAP8RAP8SAP8WAP8XAP8Y
AP8ZAP8bAP8dAP8eAP8jAP8lAP8pAPkyAP8wAP8xAP86AP88AP89AP8/AP9EAP9NAP9OAP9PAP9a
AP9gAPlrAP9+AP+GAP+LAP+VAP+XAP+eAP+iAP+jAP+qAP+sAP++AP/EAP/FAP/RAP/VAP/WAP/b
AP/zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAAAAAAALAAAAAAgABYAAAfWgAABBQICBIUDhYqLjI2KBgkOCgoLDAopNg2Tm5ydngoHDhATEh4X
EDNBHRAREK6vsLGwoawQOCAQFBoUGLK+vggOFiwwRDUuJhAyP6utv78HDxA0RkVHOR8QLTsbtc++
oRIQPEhCGa4TFt/f0RAkPi89MK4lOive67PSHBwQGNkQTgBRAUFcvlmiWJEaJWLEhQkHZdGK0KoV
hyExRkWMRetVqxA3UODbCKFjrAoGSb4y6XGCM5WuWMKElnDmM5k2OdbMKXEnT4Q/wfkMCgGSpE9I
k3IKBAA7}
}
flagde {
     image create photo flagde -data {R0lGODlhIAAWAPQAAAAAAAIAAAMAACYAAEIAAEMAAJAAAJIAAJIBAJJaAJJ5AJJ7APcAAPoAAPoC
APwAAP0AAP8AAP8CAJKBAPqbAP+eAP+fAPrPAPrSAP/TAP/UAP/WAP/XAPrdAP/iAP/jACH5BAAA
AAAALAAAAAAgABYAAAWCICCOZGmeaKqubOu+cHwGQm3feK7bsjsQhaBwSCwag4dGZMlsOp/QpYEB
eViv2Kx2+0hGv2CmN0x+jsvoCMIhabvf8Li8fU6TExRLZc/v+/+AFRMdHx6Gh4iJioseChcaGZGS
k5SVlhkLGBwbnJ2en6ChG5mboqano5qoq6CkrK+cIQA7}
}
flaghu {
     image create photo flaghu -data {R0lGODlhIAAWAPUAAAJtAgdsBwdvBwdwBwlwCSF1IUwAAAO7AwO/Aw25DQ29DQ2+DQ2/DQ+/DwPA
Aw3CDQ3DDQ/DDw3EDQ/EDznJOTrNOjrOOoIAAIUAAIYAAI4AAJIAAJICApI8PPMAAPgAAPkAAPoA
APoEBP8AAP8EBPpnZ/9paf9qapGSkZKQkJKSkvr29vn6+fr6+v/7+//8/P7//v///wAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYAAAa0QMMl
gykaj8ikEqPxgD7QqHRKrX42oZF2y+16v1oseEzeistoL0dEarvf8Li8fU7bR53SycTv+/+AgSYq
LTGGh4iJiouGKSsvLpGSk5SVli6EjJqbh5mcn4qeoKMxKCwxMKmqq6ytrjCipJ8FFBYVt7i5uru8
FQAHDgjCw8TFxscIBA0TEc3Oz9DR0hECCxAP2Nna29zdD9XX3uLjDwMMEhDp6uvs7e4QAQkLCvT1
9vf4+QpBADs=}
}
flagbg {
     image create photo flagbg -data {R0lGODlhIAAWAPUAAABbAABdAAJcAAJeAgBiAGwZAEZGRnd3d3p6ent7ewCcAACfAAOeAACgAACj
AAOhAAOhAwOiAACkAACnAAOkAwOlAwCrAACsAGyEbJABAJIAALgqALwrAL0rAPcCAPoAAPwCAP0C
AP8AAI2NjZCRkJKSkrjiuLznvL3ovfLy8vf39/f59/j4+Pr6+vz+/P3//f///wAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYAAAauQMMh
gSgaj8ikEjFKsVTQqHRKrapKLZh2y+16v1oseEzeistoL2n1crnf8Lh87jqn7zCMCXXq+/+AgYIn
AAoNC4iJiouMjQsDEBUUk5SVlpeYFAENEg6en6ChoqMOm52kqKmlnKqtogIMEQ+ztLW2t7gPBBMX
Fr6/wMHCwxYFGx0cycrLzM3OHBofItPU1dbX2NMZHiEg3t/g4eLjINHZ5+jU5uns1+vt8CLv8exB
ADs=}
}
flagno {
     image create photo flagno -data {R0lGODlhIAAWAPcAADI6bTo/bjU+dDY+dFkVFVNXeFVjulZku1Zkvldlvlhlvlhmvlhmv1lnv2Vq
h2xviGNsvFxpwF1qwF5rwV5swWFuwmJvwmVuwGVvwWZvwWNww2VyxHaBynqFzJEaGpIcHJsfH5Ai
IpIjI5IlJZsiIpgkJJslJZsmJpwlJZkyM5FERJlAQJJdXP4jI/8nJ/ktLf4oKP8rK/4uLv4vL/8u
LvY7O/owMPsyMvs2Nv4wMP8xMf8yMv8zM/82Nv83N/o8PPs8PPs9Pfo/P/s+Pv86Ovw8PP89Pf8+
Pv8/P/tFR/9AQP9BQf9CQvxISfhRUvxSVPxVVvtdX/xfYfhnaPxpavxrbP1vcPh0df1yc/12d/13
eP53eP14eYaPkpKSkqKfnKKmoo6VzpCY0pGY0pKZ05Wd1pWd152l2aOs2qWu3aau3aev3aau3qav
3qav36+03LG24LK24LK34LK44fqEh/qUlv+em/qgnf+gnf+joP+kofysq/y2tuX1+uj1/Oj2/er6
/+r7/+v7//T1+/r6+vz9/v///P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYA
AAj+AAmUQGGi4AkQK8A8EDDAwZcUJE4UnEixYogaRYBoHHJjyqE3Bw6gMeQERxCNKFOqFPHDiEsj
SHhQOSSHAQM3h574OPKyp0+XLHvGnClHgYI2OXf+XGok6MuhNI0i1cmTqU+nLqEWPZq0qtWXI4Qo
GauESY8qUblCIbKErNu3Yz28oCGjbo4WUQ7FMcrmUBIYM+oKHkyYxR09eRLrscPn0JwFC9Qc2oMH
ceLLmDF36SMIkGdAgfwMWtOgwZlBfz6rXq06AIQMF2LHxrBBQ4UKGjbI3s2bNwADDBIIH44gggUL
EhAMX86ceYEwZMZIly7GTIcJFDiUETO9u/fuXghvHRpPvpDjBQwkmyfPvj15FVe2ZJnPxUqdQ3Ag
pzlEB4uW+QAGKOAHNuhgoA48uCBFWkg1EcMOB0YooYFhuWUWWlshtVZbcHWIFUwyMdjVVz19qJVU
I5IIVEtPhZhhiiqa6CKKVKm4olAzclWjjQEBADs=}
}
flagsv {
     image create photo flagsv -data {R0lGODlhIAAWAPYAAAAwPR5dVgZVZwBSaQBTbgBUawFUagBUbABVbwBWbQFWbQBWbgJWbAdYaA5Y
YABUcwCQtwCTuwGTugCSvQOUuQCUvACWvwGWvgGXvwKWvQOXvQSXvAOYvgaYugqVtAyWsgqZtwuZ
tg2ZtQyZtg2atQyatwmYuAqYuQqauBabrxmZqRmbrhqcqxmcrBmdrRydqhmatCSfpDSglDWjlzaj
ljCimzOimTWkmD2lkQCRwACQxACTxgGTxwCVwACVwQGVwACUwwCVwgCXwACWwgCUxACVxQCTyACS
ygCRzQCUyQCYwQqWwEmoiIJ1CoV4CYp3BI54AZB4AJF7AZJ5AJJ7AJJ8AOLLEuTNEOrRD+vRDuzR
DufQEufQE+fREujQEejREOnREOrSEPDPB/fQAvbUB/bVB/jSAfnSAfrSAPrTAPjUBfzSAP/SAP3V
Av3WAf3WAv7WAf7XAf/WAP/XAP/XAf/YAP/ZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAAAAAAALAAAAAAgABYAAAf+gAADBwWFhQYEDk9RUFNNAoSGkpOFEBURmJgSOSpia2NsVh4TEpmm
pxELFUpCra0YRS5ldW91XShDGK67vEIJEUIWwsIXRC1kc21zWyA+F8PQ0Ra/wdDFx8nLzc/S0tTR
18jKzM7d0gwUHBrr6xtBL+LLJBYb7Pb3Gg86SUb9/TxIYIirw2XJER7+Eio0EkDGjRkQIdKowUTN
HDdztOCwQSOix48zqqSxU6ekyZJyUqY8ybJlHSln6MCZSXOmypQ1c+qEI8VMHDdAgwK9KUeo0aNu
qKCpM6ep06ZEn0qdOsfJlTBgsmr9kgWOyjdYtIodq7XBhxIj0qYV0SFGPC9ZKUyIUEu37ggEE4b4
2Lv3x44VA7ecAPKDr+HDPhRIwHChceMMQFjE2xKiRwbHmDNf+GbN2ORt5qJxHhYuGzluoYWNJubZ
NOjUqoGBaz3uNezVFkrXLgfbQiAAOw==}
}
flagfi {
     image create photo flagfi -data {R0lGODlhIAAWAPYAAE5OTkNxiERyiEVyiEZyiElziEZ5kkp7kkx7klB1iHiJknfP+nvQ+HrT/3vT
/3vU/33Q+H7S+n/S+n3V/37V/3/V/37X/4WFhYOGiIiIiImIiImJiY6OjomPkpGRkpGSkpKSkoDR
+IHS+oDV/4HW/4HX/4LW/4LX/4PW/4PX/4bT+ITX/4TY/4XY/4fY/4nY/4ra/47a/5LX+JPc/5Xc
/5bc/5fe/8vu/83r+tHw/9Lw/9Lx/+v1+uj3/+/1+O/6//Pz8/D6//H7//L7//f4+PT7//X8//b8
//j4+Pn5+fj5+vn6+vr5+Pr6+vz+//3+//3///7//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAAAAAAALAAAAAAgABYAAAf+gAAXGxmFGRoYBQIDBAEJhpCRkRxASUiXREw+KhAhIQwyl6KjpKIg
TVKpUlFSRzAlLCwWNqq1trantaxHLyMoKBM1t8O1uaq7vb/BxMzGqci+wMLMwx5KUU/ZTlJFySgU
NNni4+Tizqut3svUtwo4OznxOTo3LiQmKBUx8vz9/QYLHjQYONCBiYMHSRBcyJAhAhEtVkiciBDh
xIsYMR6QkKKix48gQW7sGLKkSRMHIpwgwbLlx5YwY8Z8GBHjx4w4L3bgISSIzx9DevTCR2GGz6NI
kx49B03ZNHa1PixZFSUKFClG1NWoyrWrV65M00VbB1VVWF5jn5aVclbrWrMIqI6Jdfo2VSAAOw==}
}
flagel {
     image create photo flagfl -data {R0lGODlhIAAWAPcAAB0hOS82YzA3YzE4YjI5ZDM6ZTQ8bTQ8bjU9bjY9bDY+bzc+bzk/Zzg/bzhA
bzhAcDlAcEBFaUhOdUpQdk9eu1Bfu1FgvFRivFRivVVjv1ZkvlZkv1Zlvlhmu1lnvFlnv1povFto
vFpov1xpuV1qvV5rvV5rvl9svV9svn1/imBsvmBtvmBtv2FtvmFuv1pnwFtowFtowVtpwFxpwFxp
wlxqwFxqwV1qwF1qwV1rwF5rwV9swV9twV5swl9sw2BtwGBtwmFuwmJvwmJvxGNww2NwxGRxw2Rx
xGRxxmVyxWt3wmh1xGp2xW15x256x297x297yXB8yH+Ai3eCx3WByneByneDynmDy3uFyXmEzHqF
zHuFzHuGzHyHzHyHzn6Iyn2IzYCAgoaGhYSFjYmKj5KSkoCKzoCKz4GLzoGLz4KMz4mS0ZOc1ZWe
1pmi2Jyk2aSr3LO64rS74ra847rA5L/E5sDG59XY7Nnb7drd8dve8t3f8d3f8uHj8+Di9OLk8eLl
9OPl9OTm9OXn9ebo9ufp9ujq9+vs9O7v+O7w+e/w+fHx9fDx+fHy+vLz+vb3+/f4/Pv7+fr6+vj4
/Pn5/fr6/fz9/v39/v3+/v7+/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYA
AAj+AAEMKBAggpgwDAQQWMiwocOHCxOMYNFhSqRFSkKcKKGihcePIEOGfPADCQ0vmiBB8VGkSIwM
G2LKnElzpoMVR2Z0Sflkh5EabejEkUO0qNGjRRGA6KHBSkomH3hYsKPJkqarWLNqxSoFj589gTRh
6sOHjyA4WdKYWcu2rVu2ZSRtrarJDYUbIvLq3ctXb9y5lzS9wRBkh+HDiBMfloDlzBU2miit2WKm
Sp1Egwpp3sy582YDHWxcoJJyCYccFeZUQsSotevXsF1DcJEEBxhNk6IAMUJESJDfwIMLF77AxJAX
WlI2wREEiPPn0KNLB9IARREYXDQ9cqLD9/Dv4MlnHHKkyJGmTI1iq1/veswfQ4UIAQLkub59zgpI
ADHsXLH//4iBJkNfBBZY4ARfqIHGggw26OCDEKLx11wUVqhVCnfokceGHHbo4Ycg5nGABzbIYOKJ
KKao4ooy3NSbEDDGKOOMNNYYEAA7}
}
flagnl {
     image create photo flagnl -data {R0lGODlhIAAWAPUAAAARcgAUcwEVcxEjd0cAAHkAAHwAAH0AAAAcwwAdxwAdyAAixQIjxQAjyQAj
ygIkyQIkyh08yx49zx490I0AAJIAAJIBAZJ1dfIAAPcAAPgAAPoAAPoBAf8AAP8BAY+PkZGRkpKQ
kJKSkvrIyP/MzP/NzfX1+fr39/n5+vr6+vr6/vv7///8/P/9/f7+/////wAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYAAAatQELh
YCgaj8ik0kDBaDLQqHRKrWYqm452y+16v1oseEzeisto7znN7lg4nrh8Tq/b4+s2+jIqkf6AgYKD
hCQiKS+JiouMjY6JISctLJSVlpeYmSyHj52eiiAoLy6kpaanqKkunJ+tjR8mKyqztLW2t7gqAxET
Er6/wMHCwxIACAoJycrLzM3OCQIMEA/U1dbX2NkPAQsODd/g4eLj5A3c3uXp6ubd6+7j5+/y30EA
Ow==}
}
flagpl {
     image create photo flagpl -data {R0lGODlhIAAWAPQAAElJSX19fZIAAJICApJJSfoAAPoEBP8AAP8EBPp9fYCAgIGBgY2NjZKQkJKS
kv+AgP+BgfLy8vf39/r29vj4+Pr6+v/7+//8/P///wAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAA
AAAALAAAAAAgABYAAAVxIBAsSmmeaKoqTERJcCzPdC05FabvfO//OhxwSNwJi0jfMcnELJvIJ5Qo
nQIbk4tly+16v2BL1eojJCCPtHrNbrsfgsJhTq/b7/j5wIDo+/+AgYJ9cXmGh3SFiIt3ioyPB46Q
i5KTh5WWeZiZjXKchyEAOw==}
}
flagpt {
     image create photo flagpt -data {R0lGODlhIAAWAPcAADM6AANnAAB1AAB2AAB3AAR2AAB4AAB6AAB7AAB8AAB9AAF8AQB/AAJ/AQN/
ACVQAGgbAGg0AEBAAERbAEReAFNJAEVjAEZkAVJ2CgCAAAGAAAGBAAGBAQCDAAKBAQKCAQOCAQCG
AAWBAwSCAQaAAQaBAQyDBQqNCAmQCSCLDCOODiyTETeaFUitIFOmIFKuJW+FFnWcJWGtJ2KuJ2PB
MXfDMnXNOQCw+AC4/yzK+jHN/0jE+Ene/3rl/7gAAMIBAcYAAMcAAcgAAMkAAMoAAMoBAM0AAM8A
ANYEANIIAdYMAN4BAN4IC9YaANkQANoSANkUANoUAN0RAdoYANoZANsaANgeA9scANkhANkjANkk
ANklANwhANwhAtwiAdwjANwkANwkAdwlAdwmAd0nAdsiCNspBdorB9svB90sBNwxDeAFDucTAOgY
AOkeAOkfAOkgAew2CuYpMt43QOc9Q+k/R+JHEuNOFe1OFuNRFvBEGOdoIOhtI+l3KPVaVOB/f4e4
OKuGKbejN4bLO4bQO5/NQJXWQZfcR6HSQKDYQ7LORMODJOyHLuuONO2SNe+ZNu+YOvOLNvCnP/Ot
P+uoQfKvQvOvQvK1Q/S3RvS4R/2+SsLhTsXjUPTBSP3wX+v/ZpCPrYiz0ovw/6fp/caquPicl+y5
uf7Au97U1MT////Tzf7b1/n//wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYA
AAj+ADMIHEjQQQgLbrR8WciwocOFBCNmMIhQ4cOLDCUWPJgQo0eNAw1egLPFI0aQGTaU6DCBTZYx
Jh+C3NBAwAkYeMxECROzocYNCkzUSMRJ06U9V3j2/CJRAwMRimIEAKSniSRHTsgslQhCAKFAPn5I
SRJkSCM+UGDGjOgBwYpDEuScAkWqlBA1mbhsJQhiwAwaAOqwyiFqVRElkO5QEbOW4AgDLj4tmqPj
Bo5QSyh5slOFscmIIwjIsFGBTqodPVAdOWMpzxTPHwl6OMBi0AMmqniM8gOkDKY0ehsT/ECg0AsI
a0z9AYLkUZ8oaj9H5JBAxaYWEYwQsTKpUhTY0tk5HkiByJCgSJ0YdfECZq/EDwsKoMAQB80T9kuZ
ziTRgUIbLNG5pxFFb5SUH0QoUdTRgfqBpKBFBwYEADs=}
}
flagsk {
     image create photo flagsk -data {R0lGODlhIAAWAPcAAAATcwAUcwEVcwIUcQIWdAAVemMGJk5OTg8fuxcgtjEkqgAPwAAVyQAZwgEa
wgAZxwAbxAAcwQAYyAAYywAZywAaywAZzQAbzAAdzQMiwgAhxQAixQEjxQMhxgMjxgMjxwQjxgQj
xwQkxgUlxgQmxgcmxwAiyQAjyQAiygAjygEkyQEkygMlyQQkyAQlyAQmyQUmyAQnygQnywcmyAcn
yAYoyg4jwQwiyQgpyQIi0QAj1AAk0QEk0wAl1QAl1gAn1gIl1AAk3AAp1gAs1wAo3AIx3AIz3gM0
3gk12hNC3C9I1jFR2DpR03oqgFJg00dw6F175GJfxWdlx310yX53y5AAApIAAKcBO6UDPpUbX6gL
QawLQq0LQq0MQ60NRKhAduUAC+4AAuUFFusHE/YAA/oAAPoAAfsAAPsAA/oABPsBBPwAAP0AAP0A
AfwAAvwAA/0AAv0BAv0CAv4AAP8AAP8BAf8CAP8CAv8EAPwEBvwFB/8FBf8IBP8IB/8LB/8ICP8J
Cf8ODfoPEv8RBf8SCP8TCP8ZDP8cD/8cEvsbHvocH/8gFP8kJP8pKf8qKv8vL/8yLv82Nv49M/8+
Ov88PP8/P8YwU8RAZNRPZ/9HR/9LS/9MTP9OTv9PT/xPUf9QUP9aWu1YYfxqbPtwcv57fP58fZJZ
n4BkubRjkaJxq7p2o7p5prx4o4B3ypN3wchnioWFhYCDjoiIiImJiY6OjpGRkpKSksKBp/+AgP+B
gf+Xl/ersP+xsdvf897o/t/y//7Hx//Hx+/X4eDh9eDj9+Dk+OHl+f/l5f/o5/7s7P/v7/Pz8//x
8f/z8/j4+Pn5+fj5+vr6+vv7/v/4+P/6+v38/f39/v3+//3////8/P/9/f7////+/v///wAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYA
AAj+AA/AmiWroMGDCBMqlEVr2TNnECNKnEixojNb0bpp3Mixo8ePGjFyzEYym7aS2biBBClypUuX
taBts4YtWadMmzqB+rRJUyVg2KpdG0q0aFGR2rod+0OHDqNjjujsocOrW7aXG2P1MkbMl7BAcyjh
6paLEyA6u34NK8a2rVu3BEjIwIGh1aEzuqZRYxYsDx1WQ0rEGEy4cGEAGlC0mDDF0Bk6jbo9oqOH
jqofHUxo3syZswAOK2BUoDIoUbNm3ZR180RnlRAQKmLLnj07wIYULi5EISSIlChpo0opomNKR4gT
yJMrV247BYsHTCCxmdMHWSQ6ZxZJoeBiuffkAzKufBARIUmoMGOyQGkiBsykJQ1GeJhPv379Ajt8
9AASxJUCBDcwkIMNCZxCBA89JKjgggwaoAUXW3SBhSVOWDDDCzRIoMQlV3ixxYcghiiiFWU0RUcc
dGCCBAQ1OFAEKnTAYeKMNM5YBRlvoKFjGnZ8ccQCRqRSiBlq6GjkkUjqSCKNbuDxyhO3ILJGHTVW
OeOSM9bRBh+S+MEGlVaGiWWWcpwhB5hhWjkmjXek6WZAADs=}
}
flagen {
     image create photo flagen -data {R0lGODlhIAAWAPcAADsfHwADTQMISwANUAYVVBYbUwIIbQAPcgEScgQYdA8hdg8ley06YGUCA2UT
FGcaGmkaGW03NG9STWBVWWdvb2plY2VzcwACvwALvAASuwAcvh45hQAMwgASwwAUyAAbxQEdyQIi
wQIkyQQoyggmyAsqzAEl0g032xYvzBI0yxs1zBs5zRI30hI51BY92B4/1SU/xyU/zhpA1SFE1SRN
3S9H0SlT3zFK0jlQ0idR4Dpg4U5zg0dc1Vtv11tv2l5z2kVw7GV43Gp83Wl94F2E7XOE3niK2WCE
7GyE6WuK42yM7GmN8HCQ7YoTFJEeHpEjI5I5OJJya/ArLfwnJ/0sK/stMP82LfM6Ov4zM/08Nv49
Pf0+QP9AM/9APf1BQftFSPxLSvxOUP9TR/9USf9aTf5TU/xcU/5bXOx0df5jYvxrbf93avV5eo59
gPx+gf+DeYaIj46RkpKYl7GKvL2GsIKd7pun552t7J+6+K2WyqGt5qKt6au166+77qS/+bG67JzC
/63Q/73C5bzD7rzK9MuRsdOguvGKjPqAg/uGiPuLiviNkf+Qg/+RifKVlvyUlfmXm/qZnfylpv+0
qfa7vP2ztf+8u+C/1P/Ct//Bu//Lvs3E5MfN8NLX89jX8dnc9Nrr/+TAz+TJ0+vO2+7S3PHDxvzA
wvrHyf/Ix/TP1vvO0f/QzfHT2vXZ3PvR0/zW2P7Z1Pnb3uLf7vXZ4Prd4Ovt+uzx/f7i4v7r6//0
7PTz9PT0+/X6/P709Pn3+//89/39/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYA
AAj+AAFYoFChQAACAxImDMBAgoMHDyYgVJiQgIAAFiI0aIJGFzBBMDKEGDkyQ5JMUq5oEZVCw0iX
ITKMMHLoiqMoZry8ArZLiAcQI0SI4MBEU5UuXUi1ACF0xIcOQC6R8ZKK1wY9jKhEAgaMjwoPIkp0
KHo06VKhHFzsaaRlETBePgx8WEKpCxhXwHwJ+SBirFGkSvt+ICJ1C94+MzokCNHBxqY1U7YC+6Pi
AtktZjnQ4MPIihuePzp8IHGALwcRdSRROUMLWC0cSoxiVqrElZgveO+o4MD0gwIVK1aoIHEkVZkw
eHWBsnRUy6xOb6i4+QWsSIkUwYPH4cWdqy1eXKn+c2XuRcutXqZ2eucKnjuUNPDjy49fRov9M2rW
qJk/3wmW/wAGCKB99v1XhYABZoHFE0h1UV4XWpRH4IQRUuiFg/Y9+IRKFHbo4YcEPqEFUgRCOCEW
FKIIon1tkBJLLK3QEouLt+DyCiy9SKIiKrnIqEqNo8Qi44uxLCDDkTK00MIdXCVChiGBZELFiKPg
wdUjY6yCh5JIyoCAaB9goMIgwKgChhhziICEUSOSUgIPtQCjYyOEyICBCCB8gIBTJBRhCzCRWMFG
ECYQZdSFpLjAQQ2dAENLGWbMckQHQn05AydcqZFFITl0QIKhVbTZQggfgGBHXopgMQkgYiHQgy9S
wLjyxRh5nNDBCCN0EFsVF47SwgdBfVAErKdosYYsOsDhUaBsCGECX0L5FapZTEV7wyfA9KJpKXK0
koYXdNBAqVAi5FrUlGZBG60KfHBVCRgBAQA7}
}
flagru {
     image create photo flagru -data {R0lGODlhIAAWAPUAADQ8bTg/bzRAczhAcHsqNk9PT1hmu1pov19svnt9iWBsvWBtv1tpwFhuxFpw
yFtxyWFuwmJuwWJvw2NvwmNwxJIhH5IjI5EkJPo5Nf86Nvg9Pvo8PP0+P/89Pf4+P9JHXNdJXthJ
X4eHh4qKiouLi4+Pj5GRkZKSktLV69fa8Njb8fT09Pj4+fn5+fr6+v39/v7+/////wAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYAAAa1wIKI
NCoaj8ikclRauVrQqHRKrbZOrph2y+16v1oseEzeistor4kFe7nf8Lh8/jqn77EESpXq+/+AgYIp
AAYMB4iJiouMjQcDCxQSk5SVlpeYEgEIEhCen6ChoqMQm52kqKmlnKqtogEKExGztLW2t7gRAg0P
Dr6/wMHCww4EHyEgycrLzM3OIBUYGdPU1dbX2NMXGh4c3t/g4eLjHBYbHejp6uvs7ejm7vHy6fDz
9uz19/odQQA7}
}
flagro {
     image create photo flagro -data {R0lGODlhIAAWAPcAAAAILiYfADUrADsuAC8pJCcpMCgqMDErKwEOTgANUAATbgAUcxMhcDM/eUQ4
AGUAAGU0AFFDAFhKA2NTAGVaAGlUAGxaAXVcAHlhAH1pAkJOek5WeVBXeVRdelxieX92VGBga2Fk
dGFleWRpeWlseWxxfQQesREggQIivAUpsQAVzgAW1wAW2gAa1wEjxAAjyZ8yAIRtAot0ApF5AJhz
AJl/AoB3TMIAANMMANUWAMwyAPMAAP4AAPsTAOQ1AOQ9AMldFNJcANdhAdhkAeRIAehvAOdxAelz
AP9kAf9pAfN7APh9AJ6EAKKIAK2NAKWNEK6YH7aXB7aZALiXA7maAL6iALyuALahN5WKWZmNZqea
VsuZANaXA9eYA92aAcOjAMOsAMmlAM6uAMqoD8CiFseqEs67ANOkA9uiBtSzANC+AN26AP6DAP+J
AP6TAOG7AOi/ANPEANzFAN7BHd/VAOPBAOLMAO3GAe7LAeTIGuTQAO7XAO/SEfPHAPPKAP7MAPPY
AP3SAP3bAf7iAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYA
AAj+AAEgGIgggcGDByxMqEBh4YQJFCA8mEix4gITKlygQKGR44oQgu6I/IPHz509bHaoXMlywYuX
MGGyICFo0JcZafwIqtmGB48dPoP6dBkTposVNP2EqfImTchBPYVKXeCi6EsXLWhSWSOl6R0nZqJK
DUrUKlYSffCIkYNHjpg3ZtiMFUrV6oujI+D4YVKBxgUnfswsmUu2qt0VHuqcuZFDB44bW/QMJsxj
QUazLRJ3+ZHEDRIiXugcoVzZcFGsHNZ08eGmR5sfXuIEIV33qtEWDaqgAZLnDx8gaOLAoG06JlYN
b8qkIDEIS4oyZoYQt4u1wxYoH+YAEgSCjBXplGuLn0a65smHLFe0mIhixch0zCXwSDlwggSDA1LM
jA5f/DaJOhZEEIMBUliAgR1KvHdaCxuEIYEMMQhQQwYDxCEXf7bFtIIIfuDRhAMTBMBEHXtMRph4
xq0wwiCBDJLGBFKwCJWCKYrAYiCCiCFIIC1eeCIK1LVQwiB/CFLkjj3SpgJ1SCGJJI+D+DhXQAA7}
}
flagit {
     image create photo flagit -data {R0lGODlhIAAWAPUAAAVBBQBuAAdtBwdvBwhvCAdwBwhxCAhyCApyCkB/QAC6AAC+AAC/AA26DQ2+
DQ2/DRG/EQ3CDQ3DDQ3EDRHDERHEEWvWa23abW3bbZUcHJUkJJUmJpVbW/ouLv8vL/o8PPo/P/89
Pf9AQJOUk5WTk5WVlZWdnZ+Yn/qYmP+bm/b59vr39/r6+vv++/r////8/P/+/////wAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAgABYAAAbNQADh
YCgaEYHEaVRqOkkmTmajqVo1gsbDwe1CFBaYikUur1yoDujDbn8Kj4lkTq8wMLFWbM9/xVIeIiGD
hCEDDhIRiosUCxd5fH1/gYWEh4mLio2PepExfoCClYaImZqOkJ6glKOXphGbqZGropWuprGds5O1
hbeZuZ6fvKOkmMCoupKhxb+MycK0zaW40KrErdTInNHYttrP3NfM2cfhssus3+an4rvk66/B4+q+
4O3oe9Ll8tbv9ZbuwfKXrldAdgPdFZyGcN4/g4OCAAA7}
}
flagbe {
    image create photo flagbe -data {R0lGODlhIwAWAIMAABB7AGNjY+8hGO85MfdaUveUjP+trf/Oxv/n5///////////////////////
/////yH5BAMAAAEALAAAAAAjABYAQARkMMhJq72YiCS6/2AoesEmAGiqrmybBgUxjHT9lZytj2Xn
/kBVb0cE4YpIwTFJDGhyTBtsMAhaXc5EIaoLHAhQLi9BFteGZlqAfEiPTe7QOtGOGz3XvDBhSOj/
AQhgf3pZBYR5EQA7}
}
flageo {
    image create photo flageo -data {R0lGODlhIAAWAPQcACN2ADNmAAOWAAWVAACZAAKYAAicCBaDABSFABiBABmAAFm8WXzJe3zKfX3L
fn7LfX/Lf3/Mf3bMgH/MgIDMgPL17vv77fb79vP///r6+vv///7//////wAAAAAAAAAAACH5BAAA
AAAALAAAAAAgABYAAAWBICeK2cgtRKqurFoggZmK1tne7BuP84jiQJ2oJfoBb0IO0XZEwngqX9O5
a12Y01Wy1zNmUzqNaez96jCbMaeC/RJ0kgml4YgwHhCKWwtrGvZvfYBNOoOEgoY4hYmKiIw5jo8u
kZKBAZWQAQKbnJ2en6ACAwcBCaanqKmqqwkKAAEhADs=}
}
flagszl {
    image create photo flagszl -data {R0lGODlhIAAWAPIAAElJSX19fQAA////AICAgIGBgf//gKusrSH5BAEAAAcALAAAAAAgABYAAAM/
CFHU/jBKYqq9OOs7uv9gKHrGaJ5fia6iyr6dC7PyjNa2iectvxqCoHBILBqPyKRyyWw6n9CodEqt
Wq/YrCABADs=}
}
nekonata {
    image create photo nekonata -data {R0lGODlhIAAWAPIFAAAAADAwMADAAP8AAP//AP///6usrQAAACH5BAEAAAYALAAAAAAgABYAAAOT
aLrc8jDK1yqbODLAOwtgCApFaZpLp35iSJ6nos7LYN/2C5eytyo4nCCI6wFSnAVhyVwOiTbLz9Bs
PqGVqSLDbdAuXIzX4whPxseK+bxJqteadtrghnQeHPzd0t7qAXp/bkhzdYICeXkQaEh+iICQkXqM
PY6Jj5hkfHRpdpGJgI+blQaef4GDfDOSj6Ffm6uYgYIJADs=}
}

            default {
                return ""
            }
        }
    } else {
        return $name
    }
}
EsperantoBrowser proc message {text {title {}}} {
    set fwin [focus]
    set parent .
    if {$title eq ""} {
        set title [mc "Mesaĝo"]
    }
    if {$fwin!={}} { set parent [winfo toplevel $fwin] }
    return [tk_messageBox -title $title -message $text -icon warning -type ok -parent $parent]
}
EsperantoBrowser proc newBrowser {{fontaLingvo ?} {celaLingvo ?}} {
    my new [Object autoname .esperantoedit] -fontaLingvo $fontaLingvo -celaLingvo $celaLingvo
}
EsperantoBrowser proc porCxiu args {
    foreach i [EsperantoBrowser info instances] {
        eval $i $args
    }
}
EsperantoBrowser proc redaktoTekston teksto {
    set b [my newBrowser]
    $b @editor setText $teksto
}
EsperantoBrowser proc redaktuDosieron dosiero {
    set b [my newBrowser]
    $b fileOpen $dosiero
    return $b
}
EsperantoBrowser proc showBusyWhile script {
    update idletasks
    set win [focus]
    if {$win ne ""} {
        set win [winfo toplevel $win]
    }
    if {$win eq ""} {
        set win .
    }
    set alt [$win cget -cursor]
    $win configure -cursor clock
    uplevel $script
    $win configure -cursor $alt
}
EsperantoBrowser proc testuJamRedaktado filename {
    foreach i [my info instances] {
        if {[$i exists filename] && [$i set filename] eq $filename} {
            EsperantoBrowser message [mc "Dosiero estas jam redaktata!"]
            return 1
        }
    }
    return 0
}
EsperantoBrowser proc yesNo {message {title {}}} {
    set fwin [focus]
    set parent .
    if {$title eq ""} {
        set title [mc "Demando"]
    }
    if {$fwin ne ""} { set parent [winfo toplevel $fwin] }
    #puts "$fwin $parent"
    tk_messageBox -title $title -message $message -icon question -type yesno -parent $parent
}
EsperantoBrowser proc yesNoCancel {message {title {}}} {
    set fwin [focus]
    set parent .
    if {$title eq ""} {
        set title [mc "Elekto"]
    }
    if {$fwin ne ""} { set parent [winfo toplevel $fwin] }
    tk_messageBox -title $title -message $message -icon question -type yesnocancel -parent $parent
}
@ Class EsperantoEditor {
description {Pakumo por TkWindow kun multaj funkcio de redaktilo}
}
Class EsperantoEditor -superclass {::IDE::Editor ::IDE::EditorPopDown}
@ ::EsperantoEditor idemeta categories {base-edit user-action testado init-release korektado private vortaro tradukado}
@ ::EsperantoEditor idemeta categoriesMethods {{cut copyText paste redo hasUndo backspaceVorton textInsert pressKey undo} {stripXML ignoruRange ignoruSelekton nuliguIgnorselekton selectAll gramObjekto wikiToHTML ordigiAbc malmarku montruMorf sintaksaAnalizoDebug testuVorto traduku montruSinonimojn gramAnalizo nuliguMarkilojn sintaksaAnalizo} {estasEnIgnorSelekto havasTekston estasEnhavoHTML estasEnhavoXML} {getMenuStruct initTags initTagBinding init fillMenuStruct} {leaveGramEraro tausxuKunSugesto montruTaushoSugestojn literumuDumSkribado spellText literumuRange raportuMiskontrolonDePopdown sugestoGramEraro aliguGramEraro spellerrorRightbutton analizuGramatikonTipografion enterGramEraro} {vortoSubKursoro prenuVorton vortoSubKursoroRegiono} {vortaroYView montruVortaroScroll vortaroDirekto montruDeRapidaCelo montruDeRapidaFonto montruEnVortaro montruEnVortaroDButton montruVortaroRegiono montruVortaron} {tradukuSelekton tradukuSelektonKunInspekto tradukuElNacia tradukuFrazojnMasxine tradukuFrazojnInteraktive tradukuFrazojn}}
@ ::EsperantoEditor idemeta component EsperantoEdit
EsperantoEditor instproc aliguDerivonPorVorto vorto {
     if {[[my info parent] aliguDerivonPorVorto $vorto]} {
         my reliterumuErarojn
     }
}
EsperantoEditor instproc aliguGramEraro {komenco fino priskribo sugestoj {frazoKomenco {}} {frazoFino {}} {graveco 2}} {
    my instvar gramMaxTagNombro gramAktTagNombro gramArr
    set twin [my getTextWindow]
    set tag g$gramAktTagNombro
    # 1 - gramatikaj reguloj
    # 2 - normala
    switch $graveco {
        10 -
        11 {
            # 10 - pli bona sinonimo, 11 - falsa amiko
            set farbo PaleTurquoise2
        }
        100 {
            # Tipografio
            set farbo LightPink2
        }
        default {
            set farbo pink
        }
    }
    if {$gramAktTagNombro == $gramMaxTagNombro} {
        $twin tag configure $tag -background $farbo
        $twin tag raise $tag
        $twin tag bind $tag <Enter> "[self] enterGramEraro \[$twin tag names current\]; break"
        $twin tag bind $tag <Leave> "[self] leaveGramEraro \[$twin tag names current\]; break"
        $twin tag bind $tag <ButtonPress-3> "[self] sugestoGramEraro \[$twin tag names current\] %# %X %Y; break"
        incr gramMaxTagNombro
    } else {
        $twin tag configure $tag -background $farbo
    }
    if {[llength $sugestoj]==1 && [lindex $sugestoj 0] eq ", "} {
        set komenco $fino
        set fino [$twin index "$fino + 1 c"]
    }
    if {[llength $sugestoj]==1 && [lindex $sugestoj 0] eq ""} {
        set komenco [$twin index "$komenco - 1 c"]
    }
    if {[llength $sugestoj]==1 && [lindex $sugestoj 0] eq "#, "} {
        lset sugestoj 0 ", "
    }
    $twin tag add $tag $komenco $fino
    incr gramAktTagNombro
    if {[llength $sugestoj]>0} {
        $twin tag configure $tag -borderwidth 4 -relief raised -spacing3 5
    } else {
        $twin tag configure $tag -borderwidth 0 -relief flat -spacing3 0
    }
    if {$frazoKomenco ne ""} {
        set frazo [$twin get $frazoKomenco $frazoFino]
    } else {
        set frazo ""
    }
    set gramArr($tag) [list $priskribo $sugestoj $frazo $graveco]
}
EsperantoEditor instproc aliguRadikon vorto {
     if {[NovaRadikoDlg aliguRadikon $vorto] ne ""} {
         my reliterumuErarojn
     }
}
EsperantoEditor instproc analizuGramatikonTipografion {} {
   if {[my prenuFontanLingvon] ne "eo"} {
       [my info parent] setStatusBarText [mc "gramatika korektado nur por esperanta lingvo"]
       return
   }
   EsperantoConf statAktiono GR
   [my info parent] analizuTekstonPer GramatikEraroAnalizilo
   if {[EsperantoConf set gramTipografio]} {
       set twin [my getTextWindow]
       set range [$twin tag ranges sel]
       if {[llength $range]==0} {
           set startCur 1.0
           set stopIndex end
       } else {
           set startCur [lindex $range 0]
           set stopIndex [lindex $range 1]
       }
       # duobligado de vortoj
       set cur $startCur
       set cur [$twin search -count search_count -regexp -- {([[:<:]]\w+)\s\1[[:>:]]} $cur $stopIndex]
       if {$cur ne ""} {
           set match [$twin get $cur "$cur + $search_count char"]
           set s ""
           if {[regexp {([[:<:]]\w+)\s\1} $match s s1]} {
               my aliguGramEraro $cur [$twin index "$cur + $search_count c"] "duobligo de vortoj" $s1 {} {} 100
           }
       }
       # Kazoj
       # a , a
       # a ,a
       # a,a
       # a.B
       # a ,$
       # a a (duobligo)
       
       if {[EsperantoConf set gramFrancaTipografio]} {
           set findTekstoj {
               \\s+[,.]\\s+ \\s+[,.][^[:space:]"] \\S[,][^[:space:]"] \\S\\.[A-PRSTUWZŬĈĜŜĴĤ] \\s+[,.]$ \\S[?!]
           }
           set sugestoj {
               [,.] ([,.])(\\S) (\\S)([,])(\\S) (\\S)\\.([A-PRSTUWZŬĈĜŜĴĤ]) [,.] (\\S)([?!])
           }
           set substoj {
               "$s " "$s1 $s2" "$s1$s2 $s3" "$s1. $s2" $s "$s1 $s2"
           }
       } else {
           set findTekstoj {
               \\s+[,.!?]\\s+ \\s+[,!?.][^[:space:]"] \\S[,!?][^[:space:]"] \\S\\.[A-PRSTUWZŬĈĜŜĴĤ] \\s+[,!?.]$
           }
           set sugestoj {
               [,.!?] ([,.!?])(\\S) (\\S)([,!?])(\\S) (\\S)\\.([A-PRSTUWZŬĈĜŜĴĤ]) [,.!?]
           }
           set substoj {
               "$s " "$s1 $s2" "$s1$s2 $s3" "$s1. $s2" $s
           }
       }
       
       foreach findText $findTekstoj sugesto $sugestoj subst $substoj {
           set cur $startCur
           while 1 {
               set cur [$twin search -count search_count -regexp -- $findText $cur $stopIndex]
               if {$cur eq ""} break
               set match [$twin get $cur "$cur + $search_count char"]
               if {[string index $match end] eq "\n"} {
                   # kor kazo " .\n" kaj \\s+[,.!?]\\s+
                   set cur "$cur + $search_count char"
                   continue
               }
               set s ""
               if {$sugesto ne "" && [regexp $sugesto $match s s1 s2 s3]} {
                   set s [subst $subst]
                   if {$s eq ", "} {
                       set s "#, "
                   }
                   set s [list $s]
               }
               my aliguGramEraro $cur [$twin index "$cur + $search_count c"] "tipografio" $s {} {} 100
               set cur "$cur + $search_count char"
           }
       }
   }
}
EsperantoEditor instproc backspaceVorton {} {
    set twin [my getTextWindow]
    set insert [$twin index "insert -1 c"]
    $twin delete "$insert wordstart" insert
}
EsperantoEditor instproc copyText {} {
   event generate [my getTextWindow] <<Copy>> 
}
EsperantoEditor instproc cut {} {
   event generate [my getTextWindow] <<Cut>> 
}
EsperantoEditor instproc enterGramEraro tags {
    my instvar gramArr
    set errors [list]
    foreach tag $tags {
        if {[info exists gramArr($tag)]} {
            lappend errors [lindex $gramArr($tag) 0]
        }
    }
    [my info parent] setStatusBarText [join $errors \;]
}
EsperantoEditor instproc estasEnIgnorSelekto pos {
    set twin [my getTextWindow]
    expr {[lsearch [$twin tag names $pos] hlight]>=0}
}
EsperantoEditor instproc estasEnhavoHTML {} {
    # testu cxu html
    my instvar literumadoDumSkribado

    set teksto [my getText]
    set ret [regexp -nocase {<\s*html\W} $teksto]
    if {$ret} {
        set literumadoDumSkribado 0
    }
    return $ret
}
EsperantoEditor instproc estasEnhavoXML {} {
    # testu cxu html
    my instvar literumadoDumSkribado

    set teksto [my getText]
    set ret [regexp {^<\s*([\w\-:\.]+).*</\s*\1\s*>\s*$} $teksto]
    if {$ret} {
        set literumadoDumSkribado 0
    }
    return $ret
}
EsperantoEditor instproc fillMenuStruct ms {
    $ms enablementHandler [self]
    set toolbar [[my info parent] @toolbar]

    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Malfaru"] -command [list [self] undo] -popdownMenu 1 -accelerator _Control-z -enableList hasUndo]]
    $toolbar addMenu $c undo 2.1
    if {$::tcl_platform(platform) eq "unix"} {
        set ac _Control-Z
    } else {
        set ac _Control-y
    }
    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Refaru"] -command [list [self] redo] -accelerator $ac -popdownMenu 1]]
    $toolbar addMenu $c redo 2.2
    $ms addSeparator
    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Eltondu"] -command [list [self] cut] -popdownMenu 1 -accelerator _Control-x]]
    $toolbar addMenu $c editcut 3.1
    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name  [mc "Kopiu"] -command [list [self] copyText] -popdownMenu 1 -accelerator _Control-c]]
    $toolbar addMenu $c editcopy 3.2
    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name  [mc "Intergluu"] -command [list [self] paste] -popdownMenu 1 -accelerator _Control-v]]
    $toolbar addMenu $c editpaste 3.3

    if {$::tcl_platform(platform) eq "windows"} {
        set sall Control-a
    } else {
        set sall _Control-/
    }
    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name  [mc "Elektu ĉion"] -command [list [self] selectAll] -popdownMenu 1 -accelerator $sall]]
    $ms addSeparator
    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Ser\u0109u/Anstata\u16digu..."] -command [list IDE::FindReplace bindToView [self]] -accelerator Control-f]]
    $toolbar addMenu $c filefind 3.4
    $toolbar addSeparator 3.5
    my set wrapMode 1
    if {![EsperantiloLancxilo estasEsperantileto]} {
        $ms addCommand [mc "Ordigi alfabete liniojn"] [list [self] ordigiAbc]
        $ms addMenuItem [IDE::MenuCheckbox new -childof $ms -name [mc "Rompu Liniojn"] -command [list [self] switchWrap] -variable [self]::wrapMode -accelerator Alt-w]
        $ms addSeparator
        $ms addCommand [mc "montru rapidan vortaron"] [list [self] montruVortaron]
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Sinonimoj"] -command [list [self] montruSinonimojn] -popdownMenu 1 -accelerator Control-j  -enableList isValidTextSelection]
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Morfema analizo"] -command [list [self] testuVorto] -popdownMenu 1 -accelerator Alt-f  -enableList isValidTextSelection]
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Montru derivaĵojn"] -command [list [self] montruMorf] -popdownMenu 1 -accelerator Alt-a  -enableList isValidTextSelection]
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Traduku al nacia l. sub kursoro"] -command [list [self] traduku] -popdownMenu 1 -accelerator Control-q]
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Traduku el nacia l. sub kursoro"] -command [list [self] tradukuElNacia] -popdownMenu 1 -accelerator Control-space]
    }
    if {[EsperantoConf isInDelopingMode]} {
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Gramatika Objekto"] -command [list [self] gramObjekto] -popdownMenu 1  -enableList isValidTextSelection]
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Gramatika Analizo"] -command [list [self] gramAnalizo] -popdownMenu 1  -enableList isValidTextSelection]
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Debug Analizon"] -command [list [self] sintaksaAnalizoDebug] -popdownMenu 1  -enableList isValidTextSelection]
    }
    if {![EsperantiloLancxilo estasEsperantileto]} {
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Traduku selektitan tekston"] -command [list [self] tradukuSelekton] -popdownMenu 1  -enableList isValidTextSelection]
        $ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Inspektu tradukon de frazo"] -command [list [self] tradukuSelektonKunInspekto] -popdownMenu 1  -enableList isValidTextSelection]
    }
    set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Montru Sintaksarbon"] -command [list [self] sintaksaAnalizo] -popdownMenu 1 -accelerator Control-b  -enableList isValidTextSelection]]
    $toolbar addMenu $c stree 5.6
    if {[EsperantoConf isInDelopingMode]} {
        set c [$ms addMenuItem [::IDE::MenuCommand new -childof $ms -name [mc "Montru Sintaksarbon FS"] -command [list [self] sintaksaAnalizoFS] -popdownMenu 1 -enableList isValidTextSelection]]
    }
}
EsperantoEditor instproc getMenuStruct {} {
   IDE::MenuStruct [self]::ms [mc "Redaktu"] 0
}
EsperantoEditor instproc gramAnalizo {} {
    set teksto [my getSelection]
    package require tdom
    if {$teksto eq ""} return
    set vortaro [[my info parent] getEspVortaron]
    set tekstoKursoro [TekstoKursoro new -volatile [list -teksto $teksto]]
    set frazLegilo [FrazoLegilo new -volatile -signoLegilo $tekstoKursoro]
    set docu [dom createDocument teksto]
    set mainElem [$docu documentElement]
    while {[llength [set frazo [$frazLegilo prenuFrazon]]]>0} {
        set frobj [GP::Frazo new]
        $frobj leguFrazon $vortaro $frazo
        $mainElem appendChild [$frobj asDOM $docu]
        #puts [$frobj prenuSimboloj]
        $frobj destroy
    }
    ::IDE::ResultBrowser newBrowser [$mainElem asXML]
    $docu delete
}
EsperantoEditor instproc gramObjekto {} {
    set vorto [my vortoSubKursoro]
    set vorto [string tolower [string trim $vorto]]
    if {![regexp {^\w+$} $vorto]} {
        [my info parent] setStatusBarText [mc "selekto ne estas vorto '%s'" $vorto]
        return
    }
    set vortaro [[my info parent] getEspVortaron]
    set ret [$vortaro estasVorto $vorto]
    if {$ret==0} {
        [my info parent] setStatusBarText [mc "nekonata vorto '%s'" $vorto]
        return
    } elseif {$ret==2} {
        [$vortaro prenuGramElemento [self] $vorto] inspect
    } elseif {$ret==1} {
        [my info parent] setStatusBarText [mc "ne rekonata vorto stat 1"]
    }
}
EsperantoEditor instproc hasUndo {} {
   [my getTextWindow] edit modified
}
EsperantoEditor instproc havasTekston {} {
    if {[string trim [my getText]] eq ""} {
        [my info parent] setStatusBarText [mc "Neniu teksto por la ago"]
        return 0
    }
    return 1
}
EsperantoEditor instproc hidePopdown {} {
    my instvar tstart
    set tstart ""
    next
}
EsperantoEditor instproc ignoruCxiamVortoRange {text start end} {
    my instvar vortaro
    set twin [my getTextWindow]
    $twin tag remove spellerror $start $end
    $twin tag remove raderror $start $end
    [[my info parent] getVortaron] alliguIgnorvorto $text
}
EsperantoEditor instproc ignoruRange {begin end} {
    set win [my getTextWindow]
    $win tag add hlight $begin $end
}
EsperantoEditor instproc ignoruSelekton {} {
    set win [my getTextWindow]
    set range [$win tag ranges sel]
    if {[llength $range]==0} return
    my ignoruRange [lindex $range 0] [lindex $range 1]
}
EsperantoEditor instproc ignoruVortoRange {text start end} {
    my instvar vortaro
    set twin [my getTextWindow]
    $twin tag remove spellerror $start $end
    $twin tag remove raderror $start $end
    [[my info parent] getVortaron] alliguIgnorvorto $text 1
    my ignoruRange $start $end
}
EsperantoEditor instproc init args {
   next
   set twin [my getTextWindow]
   my instvar win literumadoDumSkribado lastaLiterumado lastaSxangxo

   set lastaLiterumado 0
   set lastaSxangxo 0

   set literumadoDumSkribado [EsperantoConf set literumadoDumSkribado]

   $twin configure -wrap word
   bind $twin <KeyPress> "if \[[self] pressKey %K %A %s\] break"
   bind $twin <Control-Key-BackSpace> "[self] backspaceVorton; break"
   bind $twin <Double-Button-1> [list [self] montruEnVortaroDButton]
   bind $twin <Delete> "
       if {\[%W tag nextrange sel 1.0 end\] ne \"\"} {
           %W delete sel.first sel.last
       } else {
           %W delete insert
           %W see insert
       }
       %W tag remove literumita \"insert - 1c wordstart\" \"insert wordend\"
       [self] set vorto \"\"
       [self] set lastaIndekso -1
       break
   "
   bind $twin <BackSpace> "
       if {\[%W tag nextrange sel 1.0 end\] ne \"\"} {
           %W delete sel.first sel.last
       } elseif {\[%W compare insert != 1.0\]} {
           %W delete insert-1c
           %W see insert
       }
       %W tag remove literumita \"insert - 1c wordstart\" \"insert wordend\"
       [self] set vorto \"\"
       [self] set lastaIndekso -1
       break
   "

   my instvar characterMap havasVortaron
   set havasVortaron 0

   set characterMap(c) [format %c 265]
   set characterMap(g) [format %c 285]
   set characterMap(h) [format %c 293]
   set characterMap(j) [format %c 309]
   set characterMap(s) [format %c 349]
   set characterMap(u) [format %c 365]
   set characterMap(C) [format %c 264]
   set characterMap(G) [format %c 284]
   set characterMap(H) [format %c 292]
   set characterMap(J) [format %c 308]
   set characterMap(S) [format %c 348]
   set characterMap(U) [format %c 364]

   $twin configure -font espfont
   my initTagBinding
   my set gramMaxTagNombro 0
   my set gramAktTagNombro 0

   if {![EsperantiloLancxilo estasEsperantileto]} {
       button $win.svortaro -text | -command [list [self] montruVortaron] -padx 1 -pady 1
       pack $win.svortaro -before $win.scroll -side left -anchor n
   }
}
EsperantoEditor instproc initTagBinding {} {
   my instvar win eventNum
   set twin [my getTextWindow]
   set eventNum ""
   # Tk ne povas fini la eventon per "break", tial speciala pritrakto de <3> evento
   bind $twin <ButtonPress-3> [list [self] showPopMenu %# %X %Y]
   bind $twin <<Paste>> [list [self] pasteBinding]
   bind $twin <Menu> "[self] showPopMenuDeButonoMenu %#; break"
   $twin tag bind raderror <ButtonPress-3> "[self] spellerrorRightbutton raderror %# %x %y %X %Y; break"
   $twin tag bind spellerror <ButtonPress-3> "[self] spellerrorRightbutton spellerror %# %x %y %X %Y; break"
}
EsperantoEditor instproc initTags {} {
   next
   set twin [my getTextWindow]
   $twin tag configure spellerror -foreground red -underline 1
   $twin tag configure raderror -foreground darkgreen -underline 1
   $twin tag configure cursent -background yellow
   $twin tag configure gramerror -background pink
   $twin tag configure mark -background RosyBrown3
   $twin tag configure ignoreGram -borderwidth 3 -relief sunken
   $twin tag configure blua -foreground blue
   $twin tag configure verda -foreground SpringGreen4
}
EsperantoEditor instproc invokePopDown {mlist pattern} {
    if {$mlist eq ""} return
    my instvar compPattern
    set compPattern $pattern
    set twin [my getTextWindow]
    set popWin [my getPopdown]
    $popWin.listbox delete 0 end
    eval $popWin.listbox insert 0 $mlist
    set height [winfo reqheight $popWin.listbox]
    set width [expr {[winfo reqwidth $popWin.listbox]+[winfo reqwidth $popWin.scroll]}]
    set bb [$twin bbox insert]
    set x [expr {[lindex $bb 0]+[winfo rootx $twin]}]
    set y [expr {[lindex $bb 1]+[winfo rooty $twin]}]
    wm geometry $popWin $width\x$height+$x+$y
    wm deiconify $popWin
    raise $popWin
    ::focus $popWin.listbox
}
EsperantoEditor instproc invokePopDownSwap {vortoj start end} {
    my instvar tstart tend
    set tstart $start
    set tend $end
    my invokePopDown $vortoj {}
}
EsperantoEditor instproc leaveGramEraro tags {
    [my info parent] setStatusBarText ""
}
EsperantoEditor instproc literumuDumSkribado {} {
    my instvar literumadoDumSkribado lastaLiterumado lastaSxangxo

    set twin [my getTextWindow]
    set lvortaro [[my info parent] getVortaron]
    if {$lvortaro eq ""} return

    # $twin tag configure literumita -background green

    set sindekso 1.0
    while 1 {
        set trovita 0
        foreach {komenco fino} [$twin tag nextrange literumita $sindekso] {
            set trovita 1
            break
        }
        if {$trovita} {
            if {$komenco ne $sindekso} {
                #puts "l $sindekso $komenco"
                my literumuRange $sindekso $komenco $lvortaro
            }
            set sindekso $fino
        } else {
            break
        }
    }

    if {![$twin compare $sindekso == end]} {
        #puts "le $sindekso end"
        my literumuRange $sindekso end $lvortaro
    }

    set lastaLiterumado [clock milliseconds]

    if {$literumadoDumSkribado} {
        after 1000 "if {\[Object isobject [self]\]} {[self] literumuDumSkribado}"
    }
}
EsperantoEditor instproc literumuRange {komenco fino lvortaro} {
    my instvar lastaSxangxo
    
    set twin [my getTextWindow]
    set komenco [$twin index "$komenco wordstart"]
    #set fino [$twin index "$fino wordend"]
    #puts "literumita $komenco $fino"
    $twin tag add literumita $komenco $fino
    # spellerror
    while 1 {
        update
        set vkomenco [$twin search -regexp -count longo -- {[\w-]+} $komenco $fino]
        if {$vkomenco ne ""} {
            # cxu oni ankoraux skribas la vorton
            set vfino [$twin index "$vkomenco + $longo char"]
            if {[clock milliseconds]-$lastaSxangxo>1500 || [$twin compare insert < $komenco] || [$twin compare insert > $vfino]} {
                set vorto [$twin get $vkomenco $vfino]
                #puts "testu $vorto $vkomenco $longo"
                set erg [$lvortaro estasVorto $vorto]
                if {$erg==0} {
                    $twin tag add spellerror $vkomenco $vfino
                } elseif {$erg==1 && ![EsperantoConf set ignoruDerivoj]} {
                    $twin tag add raderror $vkomenco $vfino
                } else {
                    $twin tag remove spellerror $vkomenco $vfino
                    $twin tag remove raderror $vkomenco $vfino
                }
            } else {
                $twin tag remove literumita $komenco $fino
                #puts "dum skribado"
            }
            set komenco [$twin index "$vkomenco + $longo char"]
        } else {
            break
        }
    }
}
EsperantoEditor instproc malmarku {} {
   set twin [my getTextWindow]
   set cur 1.0
   set stopIndex end
   $twin tag remove mark $cur $stopIndex
   $twin tag remove blua $cur $stopIndex
   $twin tag remove verda $cur $stopIndex
}
EsperantoEditor instproc montruDeRapidaCelo {} {
    my instvar win vortaraLingvo vortaroDirektoCelo
    set w $win.tradCelo
    set currsel [lindex [$w curselection] 0]
    if {$currsel ne ""} {
        set vorto [$w get $currsel]
        if {$vortaroDirektoCelo} {
            TradukaVortaroMontrilo trovuTradukoPorLingvoj $vorto eo $vortaraLingvo
        } else {
            TradukaVortaroMontrilo trovuTradukoPorLingvoj $vorto $vortaraLingvo eo
        }
    }
}
EsperantoEditor instproc montruDeRapidaFonto {} {
    my instvar win vortaroDirektoCelo vortaraLingvo
    set w $win.tradFonto
    set currsel [lindex [$w curselection] 0]
    if {$currsel ne ""} {
        set vorto [$w get $currsel]
        if {$vortaroDirektoCelo} {
            TradukaVortaroMontrilo trovuTradukoPorLingvoj $vorto $vortaraLingvo eo
        } else {
            TradukaVortaroMontrilo trovuTradukoPorLingvoj $vorto eo $vortaraLingvo
        }
    }
}
EsperantoEditor instproc montruEnVortaro key {
    my instvar vorto preLastaIndekso lastaIndekso bazaVorto rvortaro vortaroDirektoCelo
    set key [string tolower $key]
    if {$vortaroDirektoCelo} {
        set indeksoMetodo prenuIndeksoCelo
    } else {
        set indeksoMetodo prenuIndekso
    }
    # set rvortaro [RapidaTradukaVortaro prenuVortaron [EsperantoConf set lingvo]]
    set preLastaIndekso $lastaIndekso
    if {$vorto eq "_"} {
        # cx,gx,jx
        set indekso [$rvortaro $indeksoMetodo $lastaIndekso "" $key estasBaza]
        set vorto $key
    } elseif {$vorto eq ""} {
        set twin [my getTextWindow]
        if {[string is alpha [set b [$twin get "insert - 1 char" insert]]] && $b ne ""} {
            set begin [$twin index "insert - 1 char"]
            set avorto [$twin get "$begin wordstart" insert]
        } else {
            set avorto ""
        }
        set indekso [$rvortaro $indeksoMetodo $lastaIndekso "" $avorto$key estasBaza]
        set vorto $avorto$key
        set bazaVorto ""
    } else {
        set kvorto $vorto$key
        set trovita 0
        set estasBaza 0
        if {!$vortaroDirektoCelo && [string length $kvorto]>3 && [regexp {.+(as|os|is|us|oj|on|ojn|aj|an|ajn)$} $kvorto]} {
            if {![regsub {(is|as|os|us|u)$} $kvorto i kvorto]} {
                regsub {(jn|n|j)$} $kvorto "" kvorto
            }
            if {$kvorto eq $bazaVorto} {
                append vorto $key
                return
            } elseif {[string index $kvorto end] eq "i" && [string first [string index $bazaVorto end] "oa"]>=0} {
                set lastaIndekso $preLastaIndekso
                set vorto [string range $kvorto 0 end-1]
                set key i
            } else {
                set lastaIndekso $preLastaIndekso
            }
        } elseif {!$vortaroDirektoCelo && [string length $kvorto]>3 && [string first $key "ouia"]>=0} {
            # verbo as,is,os,us,u
            if {$key eq "a"} {
                set indekso [$rvortaro prenuIndekso $lastaIndekso $vorto $key estasBaza]
                if {$estasBaza} {
                    set trovita 1
                    set bazaVorto ${vorto}a
                }
            } elseif {$key eq "o"} {
                set indekso [$rvortaro prenuIndekso $lastaIndekso $vorto $key estasBaza]
                if {$estasBaza} {
                    set trovita 1
                    set bazaVorto ${vorto}o
                }
            }
            if {!$trovita} {
                set indekso [$rvortaro prenuIndekso $lastaIndekso $vorto i estasBaza]
                if {$estasBaza} {
                     set trovita 1
                     set bazaVorto ${vorto}i
                }
            }
        } elseif {$bazaVorto ne ""} {
            set lastaIndekso $preLastaIndekso
        }
        if {!$trovita} {
            set indekso [$rvortaro $indeksoMetodo $lastaIndekso $vorto $key estasBaza]
            if {$estasBaza} {
                set bazaVorto $vorto$key
            }
        }
        append vorto $key
        if {!$estasBaza} {
            set bazaVorto ""
        }
    }
    if {$bazaVorto ne ""} {
        set mvorto $bazaVorto
    } else {
        set mvorto $vorto
    }
    if {$indekso ne ""} {
        my montruVortaroRegiono $indekso $mvorto
    } else {
        set indekso 0
        set preLastaIndekso 0
    }
    set lastaIndekso $indekso
}
EsperantoEditor instproc montruEnVortaroDButton {} {
    my instvar win havasVortaron lastaIndekso vorto preLastaIndekso vortaroDirektoCelo rvortaro
    if {!$havasVortaron} return
    set v [my vortoSubKursoro]
    if {$v ne ""} {
        if {$vortaroDirektoCelo} {
            set indeksoMetodo prenuIndeksoCelo
        } else {
            set indeksoMetodo prenuIndekso
        }
        set lastaIndekso 0
        set preLastaIndekso 0
        set vorto ""
        set v [EORadikilo radikigi [string tolower $v]]
        #set rvortaro [RapidaTradukaVortaro prenuVortaron [EsperantoConf set lingvo]]
        set indekso [$rvortaro $indeksoMetodo $lastaIndekso "" $v estasBaza]
        if {$indekso ne ""} {
            my montruVortaroRegiono $indekso $v
        }
    }

}
EsperantoEditor instproc montruMorf {} {
    set vorto [my prenuVorton]
    if {$vorto eq ""} return
    set vortaro [[my info parent] getEspVortaron]
    set ret [$vortaro estasVorto $vorto]
    if {$ret!=0} {
        set radobj Radiko::[lindex [$vortaro set radiko] end]
        if {[Object isobject $radobj]} {
            RadikaroRedaktilo montruRadikoDerivo [$vortaro set radiko] [$vortaro prenuBazanFormon]
            return
        }
    } else {
        set radobj Radiko::$vorto
        if {[Object isobject $radobj]} {
            RadikaroRedaktilo montruRadiko $vorto
            return
        }
    }
    EsperantoBrowser message [mc "Nekonata vorto. Vi povas selekti ankaŭ vortparton"]
}
EsperantoEditor instproc montruSinonimojn {} {
    foreach {vorto start end} [my vortoSubKursoroRegiono] {}
    if {![info exists vorto]} {
        return
    }
    set vorto [string trim $vorto]
    if {![regexp {^\w+$} $vorto]} {
        [my info parent] setStatusBarText [mc "selekto ne estas vorto '%s'" $vorto]
        return
    }
    set eevortaro [EspEspVortaro prenuVortaron]
    set sinonimoj [$eevortaro trovuSinonimojPorVortoFleksio $vorto]
    if {[llength $sinonimoj]==0} {
        [my info parent] setStatusBarText [mc "neniu sinonimo por vorto '%s'" $vorto]
    } else {
        my invokePopDownSwap $sinonimoj $start $end
    }
}
EsperantoEditor instproc montruTaushoSugestojn {x y start stop sugestoj} {
    set win [my getTextWindow]
    set pwin $win.popdown
    if {[winfo exists $pwin]} {
        ::destroy $pwin
    }
    menu $pwin -tearoff 0
    foreach p $sugestoj {
        $pwin add command -label $p -command [list [self] tausxuKunSugesto $start $stop $p]
    }
    return $pwin
}
EsperantoEditor instproc montruTradukoTagEnVortaro {x y} {
    set win [my getTextWindow]
    set cur [$win index @$x,$y]
    set names [$win tag names $cur]
    set range [$win tag prevrange traduko $cur]
    if {[llength $range]>0} {
        set start [lindex $range 0]
        set stop [lindex $range 1]
        set bazaVorto [EORadikilo radikigi [$win get $start $stop]]
        TradukaVortaroMontrilo trovuTradukoPorLingvoj $bazaVorto eo [[my info parent] prenuFontanLingvon]
    }
}
EsperantoEditor instproc montruVortaroRegiono {indekso mvorto} {
    my instvar win vortaraLingvo komencoIndekso rvortaro vortaroDirektoCelo
    set komencoIndekso $indekso
    set vortojn 30
    set gravaVortoInd 5
    set y1 [lindex [$win.tradFonto bbox 0] 1]
    set y2 [lindex [$win.tradFonto bbox 1] 1]
    if {$y1 ne "" && $y1 ne ""} {
        set vortojn [expr {[winfo height $win.tradFonto]/($y2-$y1)+1}]
    }
    if {$vortojn<$gravaVortoInd} {
        set gravaVortoInd 0
    }
    if {$indekso>$gravaVortoInd} {
        set indekso [expr {$indekso-$gravaVortoInd}]
    } else {
        set gravaVortoInd $indekso
        set indekso 0
    }
    $win.tradFonto delete 0 end
    $win.tradCelo delete 0 end
    set nombro [$rvortaro set nombro]
    if {[winfo viewable $win.v.scroll]} {
        foreach {fx fy} [$win.tradFonto yview] break
        set size [$win.tradFonto size]
        set viziblaj [expr {round($fy*$size-$fx*$size)}]
        puts "$indekso $nombro"
        $win.v.scroll set [expr {double($indekso)/$nombro}] [expr {double($indekso+$viziblaj)/$nombro}]
    }
    set i 0
    if {$vortaroDirektoCelo} {
        set regiono [$rvortaro prenuCeloListparton $indekso [expr {$indekso+$vortojn}]]
    } else {
        set regiono [$rvortaro prenuListparton $indekso [expr {$indekso+$vortojn}]]
    }
    foreach t $regiono {
        if {$vortaroDirektoCelo} {
            $win.tradFonto insert end [lindex $t 1]
            $win.tradCelo insert end [lindex $t 0]
        } else {
            $win.tradFonto insert end [lindex $t 0]
            $win.tradCelo insert end [lindex $t 1]
        }
        if {$i==$gravaVortoInd && $mvorto ne ""} {
            if {$vortaroDirektoCelo} {
                set derivo [lindex $t 1]
            } else {
                set derivo [lindex $t 0]
            }
            set mDervio [string tolower $derivo]
            set mMvorto [string tolower $mvorto]
            if {$mDervio eq $mMvorto} {
                $win.tradFonto itemconfigure $gravaVortoInd -background PaleGreen2
            } elseif {[string range $mDervio 0 [expr {[string length $mMvorto]-1}]] eq $mMvorto} {
                $win.tradFonto itemconfigure $gravaVortoInd -background LightSkyBlue1
            } else {
                $win.tradFonto itemconfigure $gravaVortoInd -background sienna1
            }
        }
        incr i
    }
    if {$vortaraLingvo ne [my prenuCelanLingvon]} {
        set vortaraLingvo [my prenuCelanLingvon]
        $win.v.lingvo configure -text [TradukaVortaroMontrilo prenuLinvoNomoPorSimbolo $vortaraLingvo]
    }
}
EsperantoEditor instproc montruVortaroScroll {} {
    my instvar win komencoIndekso rvortaro
    if {[winfo viewable $win.v.scroll]} {
        grid forget $win.v.scroll
        EsperantoConf set rapidaVortaroScroll 0
    } else {
        EsperantoConf set rapidaVortaroScroll 1
        grid $win.v.scroll -column 3 -row 1 -sticky ns
        set nombro [$rvortaro set nombro]
        foreach {fx fy} [$win.tradFonto yview] break
        set size [$win.tradFonto size]
        set viziblaj [expr {round($fy*$size-$fx*$size)}]

        $win.v.scroll set [expr {double($komencoIndekso)/$nombro}] [expr {double($komencoIndekso+$viziblaj)/$nombro}]
    }
}
EsperantoEditor instproc montruVortaron {} {
    my instvar win havasVortaron lastaIndekso vorto preLastaIndekso vortaraLingvo rvortaro vortaroDirektoCelo

    set dbvortaro [DBVortaro prenuDepVortaron]
    if {![$dbvortaro cxuVortaroTrovita]} {
        $dbvortaro montruMesagxonNeTrovita
        return
    }

    set lng [my prenuCelanLingvon]
    if {$lng eq "eo"} {
        set lng [my prenuFontanLingvon]
    }
    if {$lng eq "?" || $lng eq ""} {
        return
    }

    if {![winfo exists $win.tradFonto]} {
        EsperantoConf statAktiono VR
        frame $win.v
        frame $win.v.flingvo
        listbox $win.tradFonto -width 13 -takefocus 0
        listbox $win.tradCelo -width 15 -takefocus 0
        bind $win.tradFonto <Double-Button-1> [list [self] montruDeRapidaFonto]
        bind $win.tradCelo <Double-Button-1> [list [self] montruDeRapidaCelo]
        scrollbar $win.v.scroll -command [list [self] vortaroYView] -takefocus 0
        button $win.mvortaro -text "x" -padx 1 -pady 1 -command [list [self] montruVortaron]
        button $win.v.mscroll -text "s" -padx 1 -pady 1 -command [list [self] montruVortaroScroll]
        button $win.v.direkto -text "<>" -padx 1 -pady 1 -command [list [self] vortaroDirekto]
        label $win.v.lab -text "esperanto"
        set vortaraLingvo $lng
        label $win.v.lingvo -text [TradukaVortaroMontrilo prenuLinvoNomoPorSimbolo $vortaraLingvo]
        pack $win.v.lingvo -in $win.v.flingvo -side left
        pack $win.v.mscroll -in $win.v.flingvo -side right
        pack $win.v.direkto -in $win.v.flingvo -side right
        grid $win.mvortaro -in $win.v -column 0 -row 0 -sticky w
        grid $win.v.lab -column 1 -row 0 -sticky w
        grid $win.v.flingvo -column 2 -row 0 -sticky we -columnspan 2
        grid $win.tradFonto -in $win.v -column 0 -row 1 -columnspan 2 -sticky news
        grid $win.tradCelo -in $win.v -column 2 -row 1 -sticky news
        grid rowconfigure $win.v 1 -weight 1
    }
    if {[winfo viewable $win.v]} {
        pack forget $win.v
        pack $win.svortaro -before $win.scroll -side left -anchor n
        set havasVortaron 0
    } else {
        pack forget $win.svortaro
        pack $win.v -before $win.scroll -side left -fill y
        set havasVortaron 1
        set lastaIndekso 0
        set preLastaIndekso 0
        set vorto ""
        set vortaroDirektoCelo 0

        set rvortaro [RapidaTradukaVortaro prenuVortaron $lng]
        my montruVortaroRegiono 0  ""
        if {[EsperantoConf set rapidaVortaroScroll]} {
            my montruVortaroScroll
        }
    }
}
EsperantoEditor instproc neRaportuPri tipo {
    # sinonimoj falsajamikoj
    switch $tipo {
        sinonomoj {
            set mes "La programo sugestaj aliajn sinonimojn laŭ la listo en la retejo:

Ĉu vi volas malŝalti tiujn sugestojn?"
            set pref gramatikaPliBonajVortoj
        }
        falsajamikoj {
            set mes "La programo avertas pri falsaj amikoj inter esperanta lingvo kaj nacia lingvo laŭ listo en vikipedio:

Tiu funkcio helpas nur al komencantoj.
Ĉu vi volas malŝalti tiujn sugestojn?"
            set pref gramatikaFalsajAmikoj
        }
        default {
            return
        }
    }
    set res [EsperantoBrowser yesNoCancel $mes]
    if {$res eq "yes"} {
        EsperantoConf set $pref 0
        EsperantoConf savePreferences
    }
}
EsperantoEditor instproc nuliguIgnorselekton {} {
    set win [my getTextWindow]
    $win tag remove hlight 1.0 end
    $win tag remove ignoreGram 1.0 end
}
EsperantoEditor instproc nuliguMarkilojn {{modo cxio}} {
   set twin [my getTextWindow]
   my instvar gramArr gramAktTagNombro
   if {$modo ne "nurGramatiko"} {
       $twin tag remove spellerror 1.0 end
       $twin tag remove raderror 1.0 end
       $twin tag remove literumita 1.0 end
   }
   $twin tag remove cursent 1.0 end

   $twin tag remove gramerror 1.0 end
   if {[array exists gramArr]} {
       set gramAktTagNombro 0
       foreach t [array names gramArr] {
           $twin tag remove $t 1.0 end
       }
       unset gramArr
   }
}
EsperantoEditor instproc ordigiAbc {} {
    set win [my getTextWindow]
    set range [$win tag ranges sel]
    if {[llength $range]==0} {
        set komenco 1.0
        set fino end
    } else {
        set komenco [lindex $range 0]
        set fino [lindex $range 1]
    }
    set teksto [$win get $komenco $fino]
    if {[string index $teksto end] eq "\n"} {
        set teksto [string range $teksto 0 end-1]
    }
    $win delete $komenco $fino
    $win insert $komenco [join [lsort -dictionary [split $teksto \n]] \n]
}
EsperantoEditor instproc paste {} {
   event generate [my getTextWindow] <<Paste>>   
}
EsperantoEditor instproc pasteBinding {} {
    if {[[my info parent] set fontaLingvo] eq "?"} {
        after 1000 [list [self] testuFontanLingvonPostEngluo]
    }
}
EsperantoEditor instproc porCxiuVortoProgreso {vorto_ref cur_ref count_ref script} {
   upvar $vorto_ref vorto $cur_ref cur $count_ref count
   if {![Object isobject [self]::@kursoro]} {
        EditKursoro create [self]::@kursoro -win [my getTextWindow]
        FrazoLegilo create [self]::@legilo -signoLegilo [self]::@kursoro
        my @legilo komencuFrazon
    }
    # testu cxu html
    set estasHTML [my estasEnhavoHTML]
    if {[my @legilo istype HTMLFrazoLegilo]!=$estasHTML} {
        if {$estasHTML} {
            my @legilo class HTMLFrazoLegilo
        } else {
            my @legilo class FrazoLegilo
        }
    }
    # test cxu xml
    set estasXML [my estasEnhavoXML]
    if {[my @legilo istype XMLFrazoLegilo]!=$estasXML} {
        if {$estasXML} {
            my @legilo class XMLFrazoLegilo
            my @legilo init
        } else {
            my @legilo class FrazoLegilo
        }
    }

    set twin [my getTextWindow]
    set range [$twin tag ranges sel]
    if {[llength $range]==0} {
       set cur 1.0
       set stopIndex end
    } else {
       set cur [lindex $range 0]
       set stopIndex [lindex $range 1]
    }
    my @kursoro kursoro $cur
    my @kursoro metuFinon $stopIndex
    my @kursoro konservuKursoron

   set komencoLinio [lindex [split [$twin index $cur] .] 0]
   set finoLinio [lindex [split [$twin index $stopIndex] .] 0]
   if {$finoLinio-$komencoLinio>30} {
       set progreso [ProgresoMontrilo startProgress [mc "procezo progresas"]]
   } else {
       set progreso ""
   }
   set lastaLinio $komencoLinio


    while {[set vorto [my @legilo prenuVorton]] ne ""} {
       if {$vorto eq "_FINO_"} continue
       if {$progreso ne ""} {
           set aktualaLinio [lindex [split [$twin index $cur] .] 0]
           if {$aktualaLinio!=$lastaLinio} {
               set lastaLinio $aktualaLinio
               $progreso setProgress [expr {round(100.0*($aktualaLinio-$komencoLinio)/($finoLinio-$komencoLinio))}]
           }
           update
           if {[$progreso isStopped]} {
               break
           }
       }
       if {[string is punct $vorto]} continue
       if {[string is integer $vorto]} continue
       set cur [my @kursoro vortkomenco]
       set kursoro [my @kursoro kursoro]
       set count [string length [$twin get $cur $kursoro]]
       if {[my estasEnIgnorSelekto $cur]} {
           continue
       }
       uplevel $script
   }
   if {$progreso ne ""} {
       $progreso cleanUpAfterSignal
       $progreso destroy
   }
}
EsperantoEditor instproc prenuCelanLingvon {} {
    [my info parent] prenuCelanLingvon
}
EsperantoEditor instproc prenuFontanLingvon {} {
    [my info parent] prenuFontanLingvon
}
EsperantoEditor instproc prenuLingvoDeTeksto {} {
    set ts [TekstoLingvoDistingilo new]
    $ts analizuDeFenestro [self]
    $ts rezultuAnalizon
    set lingvo [$ts set lng]
    $ts destroy
    return $lingvo
}
EsperantoEditor instproc prenuLingvoFabrikon {} {
    set fontaLingvo [my prenuFontanLingvon]
    if {$fontaLingvo eq "?"} {
        return
    }
    if {[lsearch [EsperantoConf prenuSubtenatajFontajLingvoj] $fontaLingvo]<0} {
        EsperantoBrowser message [mc "Lingvo '%s' ne estas subtenata kiel fonta lingvo" $fontaLingvo]
        return
    }
    EsperantoConf prenuLingvoFabrikoTradukado $fontaLingvo [my prenuCelanLingvon]
}
EsperantoEditor instproc prenuLinion linio {
    set twin [my getTextWindow]
    $twin get $linio.0 "$linio.0 lineend"
}
EsperantoEditor instproc prenuVorton {} {
    set vorto [my vortoSubKursoro]
    if {$vorto eq "" || ![regexp {^\w+(-)?\w+$} $vorto]} {
        EsperantoBrowser message [mc "Bonvolu unue selekti la vorton"]
        return
    }
    string tolower $vorto
}
EsperantoEditor instproc pressKey {key keyUnicode ostate} {
   my instvar lastKey characterMap vorto lastaIndekso havasVortaron vortaroDirektoCelo lastaSxangxo
   # nur shift aux sen aliaj modifioj
   # state XOR 8
   # set state [expr {$ostate&~8}]
   # - 16 por "num"
   set state [expr {$ostate&0xFFEB}]
   # puts $state
   if {$state!=0 && $state!=1} {
       return 0
   }
   if {$havasVortaron} {
       if {![string is alpha $keyUnicode] || [string length $keyUnicode]>1} {
           set vorto ""
           set lastaIndekso -1
       } else {
           if {!$vortaroDirektoCelo && [EsperantoConf set xAnstatuaigo] && ($keyUnicode eq "x" || $keyUnicode eq "X")} {
               set index [string first [string index $vorto end] {cghjsuCGHJSU}]
               if {$index>-1} {
                   set lastaIndekso 0
                   set avorto $vorto
                   set vorto _
                   my montruEnVortaro [string range $avorto 0 end-1]$characterMap($lastKey)
               }
           } else {
               my montruEnVortaro $keyUnicode
           }
       }
   }
   if {[EsperantoConf set xAnstatuaigo]} {
       if {($key eq "x" || $key eq "X") && [info exists lastKey]} {
           set index [string first $lastKey {cghjsuCGHJSU}]
           if {$index>-1} {
               set twin [my getTextWindow]
               $twin delete {insert - 1c}
               $twin insert insert $characterMap($lastKey) ""
               set lastKey $key
               return 1
           }
       } else {
           set lastKey $key
       }
   }
   set lastaSxangxo [clock milliseconds]

   # !!! liturumado dum skribado
   if {$keyUnicode ne "" && ![string is control $keyUnicode]} {
       my textInsert [my getTextWindow] $keyUnicode
       return 1
   }

   return 0
}
EsperantoEditor instproc raportuMiskontrolonDePopdown tag {
    my instvar gramArr
    if {[info exists gramArr($tag)]} {
        set twin [my getTextWindow]
        set listo $gramArr($tag)
        set frazo [lindex $listo 2]
        foreach {start stop} [$twin tag ranges $tag] {}
        set vorto [$twin get $start $stop]
        set mesagxo "Falsa indiko pri gramatika eraro en frazo
\"$frazo\"
vorto: \"$vorto\" msg: \"[lindex $listo 0]\"

aldonaj komentoj:\n"

      EspErrorReporter reportuTekston $mesagxo {} {gramatiko}
    }

}
EsperantoEditor instproc redo {} {
    catch {[my getTextWindow] edit redo}
}
EsperantoEditor instproc reliterumu {} {
    set twin [my getTextWindow]
    $twin tag remove literumita 1.0 end
}
EsperantoEditor instproc reliterumuErarojn {} {
    my instvar enReliterumuErarojn

    if {[info exists enReliterumuErarojn] && $enReliterumuErarojn==1} {
        set enReliterumuErarojn 2
        return
    }
    
    set lvortaro [[my info parent] getVortaron]
    if {$lvortaro eq ""} return
    set twin [my getTextWindow]
    
    set komenco 1.0
    set dkomenco 1.0

    set enReliterumuErarojn 1
    while 1 {
        update
        if {$enReliterumuErarojn==2} {
            set komenco 1.0
            set dkomenco 1.0
            set enReliterumuErarojn 1
        }
        if {$komenco ne ""} {
            lassign [$twin tag nextrange spellerror $komenco] komenco fino
            if {$komenco ne ""} {
                set vorto [$twin get $komenco $fino]
                set erg [$lvortaro estasVorto $vorto]
                if {$erg==2} {
                    $twin tag remove spellerror $komenco $fino
                    $twin tag remove raderror $komenco $fino
                }
            }
            set komenco $fino
        }
        update
        if {$dkomenco ne ""} {
            lassign [$twin tag nextrange raderror $dkomenco] dkomenco dfino
            if {$dkomenco ne ""} {
                set vorto [$twin get $dkomenco $dfino]
                set erg [$lvortaro estasVorto $vorto]
                if {$erg==2} {
                    $twin tag remove spellerror $dkomenco $dfino
                    $twin tag remove raderror $dkomenco $dfino
                }
            }
            set dkomenco $dfino
        }
        if {$dkomenco eq "" && $komenco eq ""} {
            break
        }
    }
    set enReliterumuErarojn 0
}
EsperantoEditor instproc selectAll {} {
    [my getTextWindow] tag add sel 1.0 end
}
EsperantoEditor instproc selectDropDown {} {
    my instvar tstart tend
    if {[info exists tstart] && $tstart ne ""} {
        [my getTextWindow] delete $tstart $tend
    }
    set tstart ""
    next
}
EsperantoEditor instproc showPopMenu {num X Y} {
   my instvar win eventNum
   if {$eventNum eq $num} {
       return
   }
   my ms showPopMenu $win.popdown $X $Y
}
EsperantoEditor instproc showPopMenuDeButonoMenu event {
   set twin [my getTextWindow]
   set names [$twin tag names insert]
   foreach {x y} [$twin bbox insert] break
   incr x 2
   incr y 2
   set X [expr {[winfo rootx $twin]+$x}]
   set Y [expr {[winfo rooty $twin]+$y}]
   if {[lsearch $names raderror]>=0} {
       my spellerrorRightbutton raderror $event $x $y $X $Y
   } elseif {[lsearch $names spellerror]>=0} {
       my spellerrorRightbutton spellerror $event $x $y $X $Y
   } else {
       my showPopMenu $event $X $Y
   }
}
EsperantoEditor instproc sintaksaAnalizo {} {
    set teksto [my getSelection]
    if {$teksto eq ""} {
        EsperantoBrowser message [mc "Bonvolu selekti unue la frazon por gramatika analizo."]
        return
    }
    set lingvofabriko [my prenuLingvoFabrikon]
    if {$lingvofabriko eq ""} return

    EsperantoConf statAktiono SA
    set vortaro [Vortaro prenuVortaron]
    set tekstoKursoro [TekstoKursoro new -volatile [list -teksto $teksto]]
    set frazLegilo [$lingvofabriko kreuFrazoLegilo [self] -childof]
    $frazLegilo signoLegilo $tekstoKursoro
    set sintaksoj [list]
    set analizilo [$lingvofabriko kreuSintaksAnalizilo [self] -childof]
    while {[llength [set frazo [$frazLegilo prenuFrazon]]]>0} {
        set frobj [self]::gfrazo
        if {[Object isobject $frobj]} {
            $frobj destroy
        }
        set frobj [$lingvofabriko kreuFrazo $frobj]
        $frobj leguFrazon $vortaro $frazo
        $analizilo frazo $frobj
        $analizilo analizu
        lappend sintaksoj $frobj
    }
    $analizilo destroy
    $frazLegilo destroy
    if {[llength $sintaksoj]>0} {
        set frazo [lindex $sintaksoj 0]
        [$frazo sintaksoarbo] drawGraph
    }
}
EsperantoEditor instproc sintaksaAnalizoDebug {} {
    set teksto [my getSelection]
    if {$teksto eq ""} {
        EsperantoBrowser message [mc "Bonvolu selekti unue la frazon por gramatika analizo."]
        return
    }
    set vortaro [[my info parent] getEspVortaron]
    set tekstoKursoro [TekstoKursoro new -volatile [list -teksto $teksto]]
    set frazLegilo [FrazoLegilo new -volatile -signoLegilo $tekstoKursoro]
    set sintaksoj [list]
    set analizilo [SintaksaAnalizo new]
    SintaksAstoDebugMix sxaktuDebug
    while {[llength [set frazo [$frazLegilo prenuFrazon]]]>0} {
        set frobj ::gfrazo
        if {[Object isobject $frobj]} {
            $frobj destroy
        }
        set frobj [GP::Frazo create $frobj]
        $frobj leguFrazon $vortaro $frazo
        $analizilo frazo $frobj
        $analizilo analizu
        lappend sintaksoj $frobj
        break
    }
    if {[Object isobject $frobj]} {
        SintaksDebugger finiguDebug [$frobj sintaksoarbo]
        $analizilo destroy
        $frobj destroy
    }
    SintaksAstoDebugMix malSxaktuDebug
}
EsperantoEditor instproc sintaksaAnalizoFS {} {
    set teksto [my getSelection]
    if {$teksto eq ""} {
        EsperantoBrowser message [mc "Bonvolu selekti unue la frazon por gramatika analizo."]
        return
    }
    set lingvofabriko [my prenuLingvoFabrikon]
    if {$lingvofabriko eq ""} return

    EsperantoConf statAktiono SA
    set vortaro [Vortaro prenuVortaron]
    set tekstoKursoro [TekstoKursoro new -volatile [list -teksto $teksto]]
    set frazLegilo [$lingvofabriko kreuFrazoLegilo [self] -childof]
    $frazLegilo signoLegilo $tekstoKursoro
    set sintaksoj [list]
    set analizilo [$lingvofabriko kreuSintaksAnalizilo [self] -childof]
    while {[llength [set frazo [$frazLegilo prenuFrazon]]]>0} {
        set frobj [self]::gfrazo
        if {[Object isobject $frobj]} {
            $frobj destroy
        }
        set frobj [$lingvofabriko kreuFrazo $frobj]
        $frobj leguFrazon $vortaro $frazo
        $analizilo frazo $frobj
        $analizilo analizuFS
        lappend sintaksoj $frobj
    }
    $analizilo destroy
    $frazLegilo destroy
    if {[llength $sintaksoj]>0} {
        set frazo [lindex $sintaksoj 0]
        [$frazo sintaksoarbo] drawGraph
    }
}
EsperantoEditor instproc spellText vortaro {
   my instvar literumadoDumSkribado
   if {$literumadoDumSkribado} {
       set twin [my getTextWindow]
       $twin tag remove spellerror 1.0 end
       $twin tag remove raderror 1.0 end
       $twin tag remove literumita 1.0 end
       my literumuDumSkribado
       return
   }

   set startTime [clock seconds]
   set twin [my getTextWindow]

   $twin tag remove spellerror 1.0 end
   $twin tag remove raderror 1.0 end
   set vortoj 0
   set errors 0
   set raderrors 0
   my porCxiuVortoProgreso vorto cur count {
       incr vortoj
       if {[EsperantoConf set ignoruMallongigoj] && [string toupper $vorto] eq $vorto} continue
       if {[string length $vorto]==1} continue
       set erg [$vortaro estasVorto $vorto]
       if {$erg==0} {
           $twin tag add spellerror $cur "$cur + $count char"
           incr errors
       } elseif {$erg==1 && ![EsperantoConf set ignoruDerivoj]} {
           $twin tag add raderror $cur "$cur + $count char"
           incr raderrors
       }
   }
   set endTime [clock seconds]
   set dauro [expr {$endTime-$startTime}]
   if {$vortoj>0 && $dauro>0} {
       set rapideco "\nrapideco (vortoj/sekundo): [expr {$vortoj/$dauro}]"
   } else {
       set rapideco ""
   }
   return "dauro [::esp::dauroKielString $dauro]\nnekonataj: $errors\nnekonataj derivoj: $raderrors\nvortoj: $vortoj$rapideco"
}
EsperantoEditor instproc spellerrorRightbutton {tag num x y X Y} {
    my instvar eventNum
    set eventNum $num
    set win [my getTextWindow]
    set cur [$win index @$x,$y]
    set names [$win tag names $cur]
    set range [$win tag prevrange $tag $cur]
    if {[llength $range]>0} {
        set start [lindex $range 0]
        set stop [lindex $range 1]
        set text [$win get $start $stop]
        set vortaro [[my info parent] getVortaron]
        if {$vortaro eq ""} return
        if {[$vortaro istype HunspellTestilo] || [$vortaro istype AspellTestilo]} {
            set speller $vortaro
        } else {
            set speller [HunspellTestilo prenuInstancoPorLingvo eo]
        }
        if {$speller eq ""} {
            [my info parent] setStatusBarText [mc "vortlisto estas ne trovita"]
            return
        }
        set proponoj [$speller prenuProponoj $text]
        set pwin $win.popdown
        if {[winfo exists $pwin]} {
            ::destroy $pwin
        }
        menu $pwin -tearoff 0
        foreach p $proponoj {
            $pwin add command -label $p -command [list [self] tausxuKunSugesto $start $stop $p]
        }
        $pwin add separator
        if {[$vortaro istype Vortaro] || [$vortaro istype HunspellTestiloEo]} {
            if {$tag eq "spellerror"} {
                $pwin add command -label [mc "aligu radikon"] -command [list [self] aliguRadikon $text]
            } else {
                $pwin add command -label [mc "aligu derivon"] -command [list [self] aliguDerivonPorVorto $text]
            }
        }
        $pwin add command -label [mc "ignoru nun"] -command [list [self] ignoruVortoRange  $text $start $stop]
        $pwin add command -label [mc "ignoru ĉiam"] -command [list [self] ignoruCxiamVortoRange $text $start $stop]
        tk_popup $pwin $X $Y
    }
}
EsperantoEditor instproc stripXML {} {
    set text [my getText]
    regsub -all {<.+?>} $text {} text
    my setText $text
}
EsperantoEditor instproc sugestoGramEraro {tags num x y} {
    my instvar gramArr eventNum
    set eventNum $num
    foreach tag $tags {
        if {[info exists gramArr($tag)]} {
            set win [my getTextWindow]
            lassign [$win tag ranges $tag] start stop
            set sugestoj [lindex $gramArr($tag) 1]
            set graveco [lindex $gramArr($tag) 3] 
            set pwin [my montruTaushoSugestojn $x $y $start $stop $sugestoj]
            if {[lindex $gramArr($tag) 2] ne ""} {
                if {[llength $sugestoj]>0} {
                    $pwin add separator
                }
                if {$graveco eq "10"} {
                    $pwin add command -label [mc "Ne raportu pri sinonimoj"] -command [list [self] neRaportuPri sinonimoj]
                } elseif {$graveco eq "11"} {
                    $pwin add command -label [mc "Ne raportu pir falsaj amikoj"] -command [list [self] neRaportuPri falsajamikoj]
                } else {
                    $pwin add command -label [mc "Raportu miskontrolon"] -command [list [self] raportuMiskontrolonDePopdown $tag]
                }
            }
            tk_popup $pwin $x $y
            break
        }
    }
}
EsperantoEditor instproc tausxuKunSugesto {start stop vorto} {
    set win [my getTextWindow]
    #puts "$start $stop $vorto"
    $win delete $start $stop
    $win insert $start $vorto
}
EsperantoEditor instproc testuFontanLingvonPostEngluo {} {
    if {[[my info parent] set fontaLingvo] eq "?"} {
        if {[string length [my getText]]>50} {
            my prenuFontanLingvon
        }
    }
}
EsperantoEditor instproc testuVorto {} {
    set vorto [my prenuVorton]
    if {$vorto eq ""} return
    set vortaro [[my info parent] getEspVortaron]
    set ret [$vortaro estasVorto $vorto]
    if {$ret==1 || $ret==2} {
        MorfMontrilo muntruVorto $vortaro $ret $vorto [winfo toplevel [my set win]]
    } else {
        EsperantoBrowser message [mc "vorto %s ne konata" $vorto]
    }

}
EsperantoEditor instproc textInsert {w s} {
    if {[string equal $s ""] || [string equal [$w cget -state] "disabled"]} {
        return
    }
    set compound 0
    catch {
        if {[$w compare sel.first <= insert]  && [$w compare sel.last >= insert]} {
            set oldSeparator [$w cget -autoseparators]
            if { $oldSeparator } {
                $w configure -autoseparators 0
                $w edit separator
                set compound 1
            }
            $w delete sel.first sel.last
        }
    }
    $w insert insert $s ""
    $w see insert
    if { $compound && $oldSeparator } {
        $w edit separator
        $w configure -autoseparators 1
    }
}
EsperantoEditor instproc traduku {} {
    set vorto [my vortoSubKursoro]
    set vorto [string tolower [string trim $vorto]]
    if {![regexp {^\w+$} $vorto]} {
        [my info parent] setStatusBarText [mc "selekto ne estas vorto '%s'" $vorto]
        return
    }
    set dbvortaro [DBVortaro prenuDepVortaron]
    if {![$dbvortaro cxuVortaroTrovita]} {
        $dbvortaro montruMesagxonNeTrovita
        return
    }
    set fontaLingvo [my prenuFontanLingvon]
    if {$fontaLingvo eq "?"} return

    if {$fontaLingvo eq "eo"} {
        [my info parent] setStatusBarText [$dbvortaro sxercxuMorfTraduko $vorto [my prenuCelanLingvon]]
    } else {
        set tradukoj [list]
        if {[my prenuCelanLingvon] eq "eo"} {
            set rezulto [$dbvortaro sxercxuRezListoPorTraduko $vorto $fontaLingvo]
            set kampo vorto
        } else {
            set rezulto [$dbvortaro sxercxuRezListoTransTraduko $vorto $fontaLingvo [my prenuCelanLingvon]]
            set kampo traduko
        }
        foreach r $rezulto {
            lappend tradukoj [dict get $r $kampo]
        }

        if {[llength $tradukoj]==0} {
            set teksto [mc "traduko ne trovita por %s" $vorto]
        } else {
            set teksto "${vorto}: [join $tradukoj ", "]"
        }
        [my info parent] setStatusBarText $teksto
    }
}
EsperantoEditor instproc tradukuElNacia {} {
    foreach {vorto start end} [my vortoSubKursoroRegiono] {}
    if {![info exists vorto]} {
        return
    }
    set vorto [string trim $vorto]
    if {![regexp {^\w+$} $vorto]} {
        [my info parent] setStatusBarText [mc "selekto ne estas vorto '%s'" $vorto]
        return
    }
    set dbvortaro [DBVortaro prenuDepVortaron]
    if {![$dbvortaro cxuVortaroTrovita]} {
        $dbvortaro montruMesagxonNeTrovita
        return
    }
    set cLingvo [my prenuCelanLingvon]
    set fLingvo [my prenuFontanLingvon]
    if {$fLingvo eq "?"} {
        return
    }

    if {$fLingvo eq "eo"} {
        set rez [$dbvortaro sxercxuRezListoPorTraduko $vorto $cLingvo]
        set kampo vorto
    } elseif {$cLingvo eq "eo"} {
        set rez [$dbvortaro sxercxuRezListo $vorto $fLingvo]
        set kampo traduko
    } else {
        set rez [$dbvortaro sxercxuRezListoTransTraduko $vorto $cLingvo $fLingvo]
        set kampo traduko
    }

    if {[llength $rez]==0} {
        [my info parent] setStatusBarText [mc "vorto '%s' en lingvo '%s' ne trovita" $vorto $cLingvo]
        return
    }
    set espVortoj [list]
    foreach r $rez {
        array set attrArr $r
        lappend espVortoj [dict get $r $kampo]
    }

    set twin [my getTextWindow]
    my invokePopDownSwap $espVortoj $start $end
}
EsperantoEditor instproc tradukuFrazojn {{lingvo pl}} {
    my instvar tradukaRedaktilo
    if {[string trim [my getText]] eq ""} {
        EsperantoBrowser message [mc "Neniu teksto por tradukado en redaktilo"]
        return
    }
    EsperantoConf pretiguLingvoTradukado [my prenuCelanLingvon]
    set lingvoFabriko [my prenuLingvoFabrikon]
    if {$lingvoFabriko eq ""} return

    set inputWin [my getTextWindow]
    set kreuNovan 1
    if {[info exists tradukaRedaktilo] && [Object isobject $tradukaRedaktilo]} {
        if {![[$tradukaRedaktilo @editor] hasUndo]} {
            set kreuNovan 0
            [$tradukaRedaktilo @editor] makeEmpty
            [$tradukaRedaktilo @editor] set state notempty
        }
    }
    if {$kreuNovan} {
        set tradukaRedaktilo [EsperantoBrowser newBrowser]
        catch {$tradukaRedaktilo arangxuPozicion [[my info parent] set win]}
    }
    set outputWin [[$tradukaRedaktilo @editor] getTextWindow]
    $tradukaRedaktilo set fontaLingvo [my prenuCelanLingvon]
    $tradukaRedaktilo set celaLingvo [my prenuFontanLingvon]
    $tradukaRedaktilo remontruFlagojn

    set tradukilo [TkWinTradukilo new -lingvofabriko $lingvoFabriko  -inputTextWindow $inputWin -outputTextWindow $outputWin -inputEditor [self] -outputEditor $tradukaRedaktilo -montruProgreson 1 -guiModo 1 -celaLingvo [my prenuCelanLingvon] -fontaLingvo [my prenuFontanLingvon]]
    $tradukilo traduku
    $tradukilo destroy
}
EsperantoEditor instproc tradukuFrazojnInteraktive {} {
    if {![my havasTekston]} return
    set dbvortaro [DBVortaro prenuDepVortaron]
    if {![$dbvortaro cxuVortaroTrovita]} {
        $dbvortaro montruMesagxonNeTrovita
        return
    }
    EsperantoConf set tradInteraktiva 1
    EsperantoConf statAktiono TI
    set eb [my info parent]
    if {[$eb exists filename]} {
        set fontadosiero [$eb set filename]
    } else {
        set fontadosiero ""
    }
    set fLingvo [my prenuFontanLingvon]
    if {$fLingvo eq "?"} return

    EsperantoConf pretiguLingvoTradukado [my prenuCelanLingvon]
    set lingvoFabriko [my prenuLingvoFabrikon]
    if {$lingvoFabriko eq ""} return


    set t [TekstoTradukiloSeg tradukuTekston [my getText] $lingvoFabriko]
    if {[my exists nurTradukadoModo]} {
        [$t set interaktivaDialogo] set nurTradukadoModo 1
    }
    $t metuOriginanDosieron $fontadosiero
    $t set deRedaktilo 1
    $t traduku
    $t lancxuInteraktivanDialogon
}
EsperantoEditor instproc tradukuFrazojnMasxine {} {
    set dbvortaro [DBVortaro prenuDepVortaron]
    if {![$dbvortaro cxuVortaroTrovita]} {
        $dbvortaro montruMesagxonNeTrovita
        return
    }
    EsperantoConf set tradInteraktiva 0
    EsperantoConf statAktiono TR
    my tradukuFrazojn
}
EsperantoEditor instproc tradukuSelekton {} {
    # kodo kopita de metodo sintaksaAnalizo
    set teksto [my getSelection]
    if {$teksto eq ""} {
        EsperantoBrowser message [mc "Bonvolu selekti unue frazon por gramatika analizo."]
        return
    }
    EsperantoConf pretiguLingvoTradukado [my prenuFontanLingvon]
    set lingvofabriko [my prenuLingvoFabrikon]
    if {$lingvofabriko eq ""} return

    RezultoFenestro newBrowser [TekstoTradukilo tradukuTekston $teksto $lingvofabriko]
}
EsperantoEditor instproc tradukuSelektonKunInspekto {} {
    # kodo kopita de metodo sintaksaAnalizo
    set teksto [my getSelection]
    if {$teksto eq ""} {
        EsperantoBrowser message [mc "Bonvolu selekti unue frazon por gramatika analizo."]
        return
    }
    set lingvofabriko [my prenuLingvoFabrikon]
    if {$lingvofabriko eq ""} return
    set fLingvo [my prenuFontanLingvon]
    set cLingvo [my prenuCelanLingvon]

    if {$fLingvo ne "eo" && $cLingvo ne "eo"} {
        [my info parent] setStatusBarText "Por tiu funkcio fonta aŭ cela lingvo devas esti Esperno"
        return
    }

    set vortaro [[my info parent] getEspVortaron]
    set tekstoKursoro [TekstoKursoro new -volatile [list -teksto $teksto]]
    set frazLegilo [$lingvofabriko kreuFrazoLegilo [self] -childof]
    $frazLegilo signoLegilo $tekstoKursoro
    set sintaksoj [list]
    set analizilo [$lingvofabriko kreuSintaksAnalizilo [self] -childof]
    while {[llength [set frazo [$frazLegilo prenuFrazon]]]>0} {
        set frobj ::gfrazo
        if {[Object isobject $frobj]} {
            $frobj destroy
        }
        set frobj [$lingvofabriko kreuFrazo $frobj]
        $frobj leguFrazon $vortaro $frazo
        $analizilo frazo $frobj
        $analizilo analizu
        lappend sintaksoj $frobj
        # traduku nur unuan frazon
        break
    }
    $analizilo destroy
    $frazLegilo destroy

    if {[llength $sintaksoj]>0} {
        set traduko ""
        foreach frazo $sintaksoj {
            set frazTraduko [$lingvofabriko kreuFrazTraduko [self] -childof]
            $frazTraduko metuLingvon [my prenuCelanLingvon]
            $frazTraduko sintaksradiko [$frazo sintaksoarbo]
            $frazTraduko traduku
            append traduko [$frazTraduko prenuVortojn] \n
            $frazTraduko drawGraph
        }
        RezultoFenestro newBrowser $traduko
    }
}
EsperantoEditor instproc undo {} {
    set twin [my getTextWindow]
    if {[$twin edit modified]} {
        # vidu eraro 715
        catch {$twin edit undo}
    }
}
EsperantoEditor instproc vortaroDirekto {} {
    my instvar win vortaroDirektoCelo lastaIndekso preLastaIndekso vorto
    set vortaroDirektoCelo [expr {!$vortaroDirektoCelo}]
    if {$vortaroDirektoCelo} {
        $win.v.lab configure -text [$win.v.lingvo cget -text]
        $win.v.lingvo configure -text esperanto
    } else {
        $win.v.lingvo configure -text [$win.v.lab cget -text]
        $win.v.lab configure -text esperanto
    }
    set lastaIndekso 0
    set preLastaIndekso 0
    set vorto ""
    my montruVortaroRegiono 0  ""
}
EsperantoEditor instproc vortaroYView {command arg1 {arg2 {}}} {
    my instvar win komencoIndekso rvortaro
    foreach {fx fy} [$win.tradFonto yview] break
    set size [$win.tradFonto size]
    set viziblaj [expr {round($fy*$size-$fx*$size)}]

    switch -exact $command {
        moveto {
            set novaIndekso [expr {round($arg1*[$rvortaro set nombro])}]
        }
        scroll {
            if {$arg2 eq "pages"} {
                set novaIndekso [expr {$komencoIndekso+$arg1*$viziblaj}]
            } else {
                set novaIndekso [expr {$komencoIndekso+$arg1}]
            }
        }
    }
    if {$novaIndekso<0} {
        set novaIndekso 0
    } elseif {$novaIndekso>[$rvortaro set nombro]-$viziblaj} {
        set novaIndekso [expr {[$rvortaro set nombro]-$viziblaj}]
    }
    if {$novaIndekso!=$komencoIndekso} {
        my montruVortaroRegiono $novaIndekso ""
    }

}
EsperantoEditor instproc vortoSubKursoro {} {
    lindex [my vortoSubKursoroRegiono] 0
}
EsperantoEditor instproc vortoSubKursoroRegiono {} {
    set vorto [my getSelection]
    set win [my getTextWindow]
    if {$vorto ne ""} {
        set range [$win tag ranges sel]
        return [list $vorto [lindex $range 0] [lindex $range 1]]
    }
    set begin [$win search -backwards -regexp {\W|^} insert]
    if {$begin eq ""} return
    set begin [$win search -regexp {\w} $begin end]
    if {$begin eq ""} return
    if {[$win compare {insert + 1 char} == end]} {
        set end [$win index insert]
    } else {
        set end [$win search -regexp {\W|$} insert]
        if {$end eq "" || [string first \n [$win get $begin $end]]>0} {
            set end [$win index "insert wordend"]
        }
    }
    if {$begin ne "" && $end ne ""} {
        set vorto [$win get $begin $end]
    }
    list $vorto $begin $end
}
EsperantoEditor instproc wikiToHTML {} {
    set twin [my getTextWindow]
    set range [$twin tag ranges sel]
    if {[llength $range]==0} {
        set teksto [$twin get 1.0 end]
        set teksto [MWParser wikiToHtml $teksto]
        $twin del 1.0 end
        set t {<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="Language" content="eo">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Esperanta Teksto</title>
</head>
}
        append t $teksto {</body>
</html>
}

        $twin insert 1.0 $t
    } else {
        foreach {komenco fino} $range {}
        set teksto [$twin get $komenco $fino]
        set teksto [MWParser wikiToHtml $teksto]
        $twin del $komenco $fino
        $twin insert $komenco $teksto
    }
}
EsperantoEditor proc disLokigu {editor kursoroKomenco lastaElementoKursoro} {
    if {[Object isobject $editor]} {
        $editor lokigu $kursoroKomenco $lastaElementoKursoro
    }
}
EsperantoEditor proc modifuTkPaste {} {
    if {![Object isobject ::esppaste]} {
      EsperantoStringConverter create ::esppaste
      ::esppaste initVariables
    }

    namespace eval :: {
proc ::tk_textPaste w {
    if {![catch {::tk::GetSelection $w CLIPBOARD} sel]} {
	# ensure this is seen as an atomic op to undo
	set oldSeparator [$w cget -autoseparators]
	if { $oldSeparator } {
	    $w configure -autoseparators 0
	    $w edit separator
	}
        catch { $w delete sel.first sel.last }
	$w insert insert [EsperantoEditor prilaboruPasteTekston $sel] ""
	if { $oldSeparator } {
	    $w edit separator
	    $w configure -autoseparators 1
	}
    }
}
    }
}
EsperantoEditor proc prilaboruPasteTekston teksto {
    if {[EsperantoConf set xAnstatuaigoPaste]} {
        return [::esppaste translateString $teksto gx ĝ]
    }
    return $teksto
}
@ Class EsperantoFileConverter {
description {Dialogo de konvertilo de esperantaj skribmaniroj por multaj dosieroj}
}
Class EsperantoFileConverter -superclass {::IDE::Browser ::EsperantoStringConverter}
@ ::EsperantoFileConverter idemeta component EsperantoEdit
EsperantoFileConverter instproc changeDir {} {
    my readDir [IDE::Dialog getDir]
}
EsperantoFileConverter instproc createSystemMenu {} {
   return {}
}
EsperantoFileConverter instproc getTitle {} {
   return "Dosiero-Enkodo-Aliformilo"
}
EsperantoFileConverter instproc readDir {{dir {}}} {
    my instvar win actualDir
    set actualDir $dir
    $win.dir.dirname configure -text $dir
    set names {}
    foreach f [glob -nocomplain -type {f l} -directory $dir *] {
        lappend names [file tail $f]
    }
    [self]::files setList $names
}
EsperantoFileConverter instproc specificInit {} {
    my instvar win trueString
    my initVariables
    my requireNamespace
    message $win.message -text [mc "La ilo helpas aliformi multajn dosierojn en unu paŝo.\nElektu la dosierujon kaj poste dosierojn por aliformigo. Metu 'konvertu el' kaj 'konvertu al' parametroj.\n"] -width 350

    frame $win.sel
    frame $win.dir

    frame $win.encoding
    label $win.encoding.liencoding -text [mc "en-enkodo"]
    label $win.encoding.loencoding -text [mc "el-enkodo"]
    label $win.encoding.iencoding -textvariable [self]::inputencoding
    label $win.encoding.oencoding -textvariable [self]::outputencoding
    button $win.encoding.siencoding -text [mc "Ŝanĝu"] -command [list [self] setEncoding inputencoding {choose input encoding}]
    button $win.encoding.soencoding -text [mc "Ŝanĝu"] -command [list [self] setEncoding outputencoding {choose output encoding}]
    grid $win.encoding.liencoding -row 0 -column 0 -sticky w
    grid $win.encoding.loencoding -row 1 -column 0 -sticky w
    grid $win.encoding.iencoding -row 0 -column 1 -sticky w
    grid $win.encoding.oencoding -row 1 -column 1 -sticky w
    grid $win.encoding.siencoding -row 0 -column 2 -sticky we
    grid $win.encoding.soencoding -row 1 -column 2 -sticky we

    checkbutton $win.useUTFTrailer -text [mc "Aligu UTF-8 kapon"] -variable EsperantoConf::addUTFTrailer

    frame $win.toolbar
    label $win.toolbar.translate -text [mc "Aliformu al"]
    IDE::StateButton [self]::transFrom $win.toolbar.transFrom  -states [list $trueString gx gh g^ ^g html utf]

    $win.toolbar.transFrom configure -width 5
    [self]::transFrom setState gx
    IDE::StateButton [self]::transTo $win.toolbar.transTo  -states [list $trueString gx gh g^ ^g html utf]
    $win.toolbar.transTo configure -width 5
    pack $win.toolbar.transFrom $win.toolbar.translate $win.toolbar.transTo -side left

    button $win.scane -text [mc "Aliformu dosierojn"] -command [list [self] translateFiles]
    entry $win.sel.filterText -text "*.html"
    button $win.sel.filter -text [mc "Selektu kun filtro"] -command [list [self] useFilter]
    button $win.dir.changedir -text [mc "Elektu dosierujon"] -command [list [self] changeDir]
    label $win.dir.dirname -relief sunken -border 2 -width 50 -anchor w

    IDE::ListView create [self]::files $win.files -multiselect 1

    pack $win.dir.dirname -fill x -expand yes -side left
    pack $win.dir.changedir -side left
    pack $win.sel.filterText $win.sel.filter -side left
    pack $win.message  -fill x
    pack $win.encoding -fill x -expand yes
    pack $win.useUTFTrailer
    pack $win.toolbar
    pack $win.dir -anchor w -fill x
    pack $win.files -fill both -expand yes
    pack $win.sel $win.scane -anchor w

    my readDir
}
EsperantoFileConverter instproc translateFiles {} {
    my instvar transFrom transTo actualDir inputencoding outputencoding
    set files [[self]::files selectedItems]
    set transTo [[self]::transTo set state]
    set transFrom [[self]::transFrom set state]
    if {$transTo==$transFrom && $inputencoding==$outputencoding} {
        EsperantoBrowser message "'en'-enkodo kaj 'el'-enkodo estas samaj ($transTo=$transFrom)"
        return
    }
    if {[llength $files]==0} {
        EsperantoBrowser message [mc "selektu almenaŭ unu dosieron"]
        return
    }
    set adir [pwd]
    if {$actualDir ne ""} {
        cd $actualDir
    }
    foreach file $files {
        my saveFileAs $file [my translateString [my fileReadFrom $file] $transFrom $transTo]
    }
    cd $adir
    EsperantoBrowser message "[llength $files] dosieroj estis aliformitaj el '$transFrom' al '$transTo' enkodo"
}
EsperantoFileConverter instproc useFilter {} {
    my instvar win
    set filter [$win.sel.filterText get]
    if {$filter==""} {
        set filter *
    }
    [self]::files removeSelection 0 end
    set list [[self]::files getList]
    set index 0
    set first -1
    foreach item $list {
       if {[string match $filter $item]} {
           [self]::files addSelection $index $index
           if {$first==-1} {set first $index}
       }
       incr index
    }
    if {$first!=-1} {
        [[self]::files set win].listbox see $first
    }
}
@ Class FindReplaceMix {
description {Aldona MIX-klaso por esperantigi la bazan klason}
}
Class FindReplaceMix
@ ::FindReplaceMix idemeta component EsperantoEdit
FindReplaceMix instproc buildWindow win {
    next
    ::esp::metuXEvento $win.main.find
    ::esp::metuXEvento $win.main.search
}
FindReplaceMix proc initializeAfterLoad {} {
    IDE::FindReplace mixin add [self]
}
@ Class FinuProgramoCxeDestroy {
description {Povas esti uzato cxe IDE::Browser subklasoj, kiam
la fermo de fenestro devas fini la programon}
}
Class FinuProgramoCxeDestroy
@ ::FinuProgramoCxeDestroy idemeta component EsperantoEdit
FinuProgramoCxeDestroy instproc destroy {} {
    exit
    next
}
Class FrazpartoFrekMontrilo -superclass {::IDE::Browser ::IDE::GUICommands ::NavigadaKronikoMix} -parameter sanalizilo
@ ::FrazpartoFrekMontrilo idemeta component EsperantoEdit
FrazpartoFrekMontrilo instproc closeWindow {} {
    my instvar win
    EsperantoConf set prefGeometryFPartoj [wm geometry $win]
    next
}
FrazpartoFrekMontrilo instproc createSystemMenu {} {
    my createNonSystemMenu
}
FrazpartoFrekMontrilo instproc destroy {} {
    my instvar sanalizilo
    if {$sanalizilo ne "" && ([$sanalizilo istype SintaksoAnalizilo] || ([$sanalizilo istype MKFrazpartoFrekBazo] && ![$sanalizilo cxefabazo]))} {
        $sanalizilo destroy
    }
    next
}
FrazpartoFrekMontrilo instproc fillMenuStruct ms {
    $ms enablementHandler [self]
    my requireNamespace

    set mitem [$ms addCommand [mc "Lasta Serĉado"] [list [self] naviguLastan] {} {Alt-Left}]
    my @toolbar addMenu $mitem undo 1.1
    set mitem [$ms addCommand [mc "Mallasta Serĉado"] [list [self] naviguMallastan] {} {Alt-Right}]
    my @toolbar addMenu $mitem redo 1.2
    set mitem [$ms addCommand [mc "Kroniko de Serĉado"] [list [self] navigadoKroniko]]
    my @toolbar addMenu $mitem history 1.4

    $ms addSeparator
    $ms addCommand [mc "Malfermu datumbazon"] [list [self] malfermu] 0 {Control-n} 0 povasMalfermi
    $ms addCommand [mc "Konservu datumbazon"] [list [self] konservu]  {} {Control-s} 0 povasKonservi

    $ms addSeparator
    foreach indekso [SintaksoAnalizilo prenuIndeksojn] {
        set nomo [join $indekso ""]
        $ms addCheckButton $nomo [self]::c$nomo
        my set c$nomo 1
    }
}
FrazpartoFrekMontrilo instproc getMenuStruct {} {
    IDE::MenuStruct create [self]::ms [mc "Dosiero"] 0
}
FrazpartoFrekMontrilo instproc getTitle {} {
    return [mc "Frekventeco de Frazpartoj"]
}
FrazpartoFrekMontrilo instproc konservu {} {
    my instvar sanalizilo

    set doziero [IDE::Dialog getSaveFile miavortaro.fpdb {{{frazparto datumbazo} {*.fpdb}}}]
    if {$doziero eq ""} {
        return
    }
    $sanalizilo kreuMetakit $doziero
}
FrazpartoFrekMontrilo instproc malfermu {} {
    my instvar sanalizilo

    set doziero [IDE::Dialog getOpenFile {{{frazparto datumbazo} {*.fsql}}}]
    if {$doziero eq ""} {
        return
    }
    if {![$sanalizilo cxefabazo]} {
        $sanalizilo destroy
    }
    set sanalizilo [SQLFrazpartoFrekBazo new]
    $sanalizilo malfermuDeDosiero $doziero
}
FrazpartoFrekMontrilo instproc montruElemento vorto {
    my montruPorVorto $vorto
}
FrazpartoFrekMontrilo instproc montruPorVorto tvorto {
    my instvar win sanalizilo montruOftecon maksRezulto radikilo vorto
    if {$vorto eq ""} return
    set vorto [$radikilo radikigi $tvorto]

    array set finoArr {a {adj} o {np obj subj sub sub2} i vp e adv p pp}
    if {[lsearch {de pri je pro} $vorto]>=0} {
        set fino p
    } else {
        set fino [string index $vorto end]
    }
    set indeksojn [list]
    if {![info exists finoArr($fino)]} {
        set fino p
    }
    set rezultoj 0
    if {[info exists finoArr($fino)]} {
        foreach n $finoArr($fino) {
            foreach indekso [SintaksoAnalizilo prenuIndeksojn] {
                set nomo [join $indekso ""]
                if {![my set c$nomo]} {
                    continue
                }
                if {[lsearch $indekso $n]>=0} {
                    lappend indeksojn [list $n $indekso]
                }
            }
        }
        set ret ""
        #append ret "<tr>" \n
        foreach indekso $indeksojn {
            set retlisto [list]
            set trezulto [$sanalizilo trovuVortoj $vorto [lindex $indekso 0] [lindex $indekso 1]]
            set havisRez 0
            foreach rez [lrange $trezulto 0 $maksRezulto] {
                if {!$havisRez} {
                    append ret "[lindex $indekso 0] [join [lindex $indekso 1] -] \n"
                }
                set havisRez 1
                incr rezultoj
                if {$montruOftecon} {
                    lappend retlisto "[join [lrange $rez 0 end-1]] ([lindex $rez end])"
                } else {
                    lappend retlisto [join [lrange $rez 0 end-1]]
                }
            }
            if {$havisRez} {
                append ret [join $retlisto ", "] \n\n
            }
        }
        if {$rezultoj==0} {
            set vortaro [Vortaro prenuVortaron]
            if {[$vortaro estasVorto $vorto]==0} {
                append ret "vorto ne konata"
                return 0
            }
        }
        my @text setText $ret
        return 1
    }
}
FrazpartoFrekMontrilo instproc povasKonservi {} {
    my instvar sanalizilo
    expr {[$sanalizilo istype SintaksoAnalizilo]}
}
FrazpartoFrekMontrilo instproc povasMalfermi {} {
    my instvar sanalizilo
    expr {[$sanalizilo istype MKFrazpartoFrekBazo]}
}
FrazpartoFrekMontrilo instproc specificInit {} {
    my instvar win montruOftecon maksRezulto radikilo vorto

    EsperantoConf statAktiono BF

    set montruOftecon 1
    my requireNamespace
    set maksRezulto 100
    set radikilo [Radikilaro prenuPorLingvo eo]
    set vorto ""

    IDE::Toolbar create [self]::@toolbar $win.toolbar

    frame $win.toolbar.but
    entry $win.toolbar.vorto -textvariable [self]::vorto
    button $win.toolbar.trovu -width 6 -text [mc "Ek"] -command [list [self] sxercxuVorto]
    bind $win.toolbar.vorto <Return> [list [self] sxercxuVorto]
    button $win.toolbar.trovus -width 6 -text [mc "Similaj Vortoj"] -command [list [self] sxercxuSimilajnVortojn]
    esp::metuXEvento $win.toolbar.vorto
    checkbutton $win.toolbar.ofteco -text [mc "montru oftecon"] -variable [self]::montruOftecon
    spinbox $win.toolbar.max -from 1 -to 100 -textvariable [self]::maksRezulto -width 5

    pack $win.toolbar.vorto $win.toolbar.trovu $win.toolbar.trovus $win.toolbar.ofteco $win.toolbar.max -in $win.toolbar.but -side left
    my @toolbar addWin $win.toolbar.but 0.1

    IDE::Text create [self]::@text $win.out
    [my @text getTextWindow] configure -takefocus 0 -font [EsperantoConf prenuRevoFont]

    pack $win.toolbar -fill x
    pack $win.out -fill both -expand yes
    focus $win.toolbar.vorto

    set geo [EsperantoConf set prefGeometryFPartoj]
    if {$geo ne ""} {
        wm geometry $win $geo
    }
}
FrazpartoFrekMontrilo instproc sxercxuSimilajnVortojn {{tvorto {}}} {
    my instvar win sanalizilo montruOftecon maksRezulto radikilo vorto
    if {$tvorto ne ""} {
        set vorto $tvorto
    }
    if {$vorto eq ""} return
    set vorto [$radikilo radikigi $vorto]

    array set finoArr {a {adj} o {np obj subj sub sub2} i vp e adv p pp}
    if {[lsearch {de pri je pro} $vorto]>=0} {
        set fino p
    } else {
        set fino [string index $vorto end]
    }
    set indeksojn [list]
    if {![info exists finoArr($fino)]} {
        set fino p
    }
    set rezultoj 0
    if {[info exists finoArr($fino)]} {
        foreach n $finoArr($fino) {
            foreach indekso [SintaksoAnalizilo prenuIndeksojn] {
                if {[llength $indekso]>2} continue
                if {[lsearch $indekso pp]>=0} continue
                set nomo [join $indekso ""]
                if {![my set c$nomo]} {
                    continue
                }
                if {[lsearch $indekso $n]>=0} {
                    lappend indeksojn $n $indekso
                }
            }
        }
        set ret ""
        #append ret "<tr>" \n
        foreach {key rilato} $indeksojn {
            set retlisto [list]
            set trezulto [$sanalizilo troviSubjKlaso $vorto $key $rilato]
            set havisRez 0
            foreach rez [lrange $trezulto 0 $maksRezulto] {
                if {!$havisRez} {
                    append ret "$key - $rilato\n"
                }
                set havisRez 1
                incr rezultoj
                lappend retlisto $rez
            }
            if {$havisRez} {
                append ret [join $retlisto \n]\n\n
            }
        }
        if {$rezultoj==0} {
            set vortaro [Vortaro prenuVortaron]
            if {[$vortaro estasVorto $vorto]==0} {
                append ret "vorto ne konata"
                return 0
            }
        }
        my @text setText $ret
        return 1
    }
}
FrazpartoFrekMontrilo instproc sxercxuVorto {{tvorto {}}} {
    my instvar win sanalizilo montruOftecon maksRezulto radikilo vorto
    if {$tvorto ne ""} {
        set vorto $tvorto
    }
    if {$vorto eq ""} return
    if {[my montruPorVorto $vorto]} {
        my aliguElemento $vorto
    }
}
FrazpartoFrekMontrilo proc initializeAfterLoad {} {
    NavigadaKronikoMix initHistory [self]
}
FrazpartoFrekMontrilo proc newBrowser {{vorto {}}} {
    my instvar cxefaMontrilo
    if {[info exists cxefaMontrilo] && [Object isobject $cxefaMontrilo]} {
        $cxefaMontrilo sxercxuVorto $vorto
        return
    }
    set frek [MKFrazpartoFrekBazo prenuBazon]
    if {$frek ne ""} {
        set cxefaMontrilo [my newBrowserOn $frek]
        $cxefaMontrilo sxercxuVorto $vorto
    }
}
FrazpartoFrekMontrilo proc newBrowserOn sintaksoAnalizilo {
    my new [Object autoname .sanalizilo] -sanalizilo $sintaksoAnalizilo
}
@ Class HTMLKorektilo {
description {Tiu korektilo, korektas HTML-Tekston de redaktiol per ekstera programo TIDY}
}
Class HTMLKorektilo -parameter {win editor}
@ ::HTMLKorektilo idemeta component EsperantoEdit
HTMLKorektilo instproc fermu {} {
    my malselektuEraron
    [my info parent] montruHTMLKorektilon 0
}
HTMLKorektilo instproc formatiguHTML {} {
    my tidyStart ident
}
HTMLKorektilo instproc init {} {
    my instvar win maksDefTag aktualaEraro editor
    set maksDefTag 0
    set aktualaEraro -1
    labelframe $win -text [mc "HTML Korektilo"]
    ::scrollbar $win.scroll -command "$win.listbox yview"
    ::listbox $win.listbox -yscroll "$win.scroll set" -exportselection no
    bind $win.listbox <<ListboxSelect>> [list [self] selektuEraron]
    button $win.fermu -text " X " -command [list [self] fermu]
    grid $win.listbox -column 0 -row 0 -sticky news
    grid $win.scroll -column 1 -row 0 -sticky ns
    grid $win.fermu -column 2 -row 0 -sticky n
    grid columnconfigure $win 0 -weight 1
    set twin [$editor getTextWindow]
    $twin tag configure herror -background red
}
HTMLKorektilo instproc konvertuXHTML {} {
    my tidyStart xhtml
}
HTMLKorektilo instproc malselektuEraron {} {
    my instvar editor
    set twin [$editor getTextWindow]
    $twin tag remove herror 1.0 end
}
HTMLKorektilo instproc montruLiniojn rezulto {
    my instvar win eraroj editor maksDefTag
    my set eraroj [list]
    my set taglisto [list]
    $win.listbox delete 0 end
    set i 0
    my malselektuEraron
    set twin [$editor getTextWindow]
    foreach eraro [split $rezulto \n] {
        if {[regexp {line (\d+) column (\d+)} $eraro _ line column]} {
            $win.listbox insert end $eraro
            set mark err$i
            $twin mark set $mark $line.$column
            incr i
        }
    }
    if {$i>0} {
        [my info parent] montruHTMLKorektilon 1
    } else {
        [my info parent] setStatusBarText [mc "neniu eraro estas trovita"]
    }
}
HTMLKorektilo instproc puriguHTML {} {
    my tidyStart tidy
}
HTMLKorektilo instproc selektuEraron {} {
    my instvar win editor aktualaEraro
    set item [lindex [$win.listbox curselection] 0]
    if {$item eq ""} return
    my malselektuEraron
    set twin [$editor getTextWindow]
    $twin tag add herror err$item "err$item wordend"
    $twin see err$item
    set aktualaEraro $item
}
HTMLKorektilo instproc testuHTML {} {
    my instvar editor
    set teksto [$editor getText]
    if {[string trim $teksto] eq ""} {
        [my info parent] setStatusBarText [mc "Neniu teksto por en redaktilo"]
        return
    }

    set tmp [::iloj::prenuTmpDosieron]
    set dosiero [file join $tmp esptmp.html]
    set f [open $dosiero w]
    puts -nonewline $f $teksto
    close $f
    set tidy tidy
    set outmsg [file join $tmp tidyout.txt]
    catch {exec $tidy -utf8 -quiet -errors -file $outmsg $dosiero}
    catch {file delete -force $dosiero}
    if {[file exists $outmsg]} {
        set f [open $outmsg r]
        set teksto [read $f]
        close $f
        catch {file delete -force $outmsg}
        my montruLiniojn $teksto
    } else {
        EsperantoBrowser message [mc "Eksterna programo 'tidy' ne povis esti sukcese lanĉita"]
    }
}
HTMLKorektilo instproc testuXML {} {
    my instvar editor
    set teksto [$editor getText]
    if {[string trim $teksto] eq ""} {
        [my info parent] setStatusBarText [mc "Neniu teksto por en redaktilo"]
        return
    }

    set tmp [::iloj::prenuTmpDosieron]
    set dosiero [file join $tmp esptmp.xml]
    set f [open $dosiero w]
    puts -nonewline $f $teksto
    close $f
    set tidy tidy
    set outmsg [file join $tmp tidyout.txt]
    catch {exec $tidy -utf8 -quiet -errors -xml -file $outmsg $dosiero}
    catch {file delete -force $dosiero}
    if {[file exists $outmsg]} {
        set f [open $outmsg r]
        set teksto [read $f]
        close $f
        catch {file delete -force $outmsg}
        my montruLiniojn $teksto
    } else {
        EsperantoBrowser message [mc "Eksterna programo 'tidy' ne povis esti sukcese lanĉita"]
    }
}
HTMLKorektilo instproc tidyStart option {
    my instvar editor
    set teksto [$editor getText]
    if {[string trim $teksto] eq ""} {
        [my info parent] setStatusBarText [mc "Neniu teksto por en redaktilo"]
        return
    }

    set tmp [::iloj::prenuTmpDosieron]
    set dosiero [file join $tmp esptmp.html]
    set f [open $dosiero w]
    puts -nonewline $f $teksto
    close $f
    set tidy tidy
    set outmsg [file join $tmp tidyout.txt]
    set outfile [file join $tmp tidyout.html]
    switch -- $option {
        ident {
            catch {exec $tidy -utf8 -i -quiet -w 120 -file $outmsg -output $outfile $dosiero}
        }
        identxml {
            catch {exec $tidy -utf8 -i -quiet -w 120 -xml -file $outmsg -output $outfile $dosiero}
        }
        xhtml {
            catch {exec $tidy -utf8 -quiet -asxhtml -wrap 0 -file $outmsg -output $outfile $dosiero}
        }
        html {
            catch {exec $tidy -utf8 -quiet -ashtml -wrap 0 -file $outmsg -output $outfile $dosiero}
        }
        tidy {
            catch {exec $tidy -utf8 -quiet -wrap 0 -file $outmsg -output $outfile $dosiero}
        }
        default {
            error "ne konata $option"
        }
    }
    catch {file delete -force $dosiero}
    if {[file exists $outfile]} {
        set f [open $outfile r]
        set teksto [read $f]
        #set teksto [string map [list "\n\r" "\n"] $teksto]
        close $f
        catch {file delete -force $outmsg $outfile}
        set twin [$editor getTextWindow]
        $twin delete 1.0 end
        $twin insert 1.0 $teksto
    } else {
        EsperantoBrowser message "Eksterna programo 'tidy' ne povis esti sukcese lanĉita"
    }
    my fermu
}
@ Class VortaroElektilo {
description {GUI-Dialogo por elekto de vortaroj por ''Hunspell'' literumilo}
}
Class VortaroElektilo -superclass ::IDE::Dialog -parameter {{type okcancel} {title {Elektu vortaron por korektado}} vortaroTipo parametro lingvo}
@ ::VortaroElektilo idemeta component EsperantoEdit
VortaroElektilo instproc aliguVortaron {{zip {}}} {
    if {$zip eq ""} {
        set zip [IDE::Dialog getOpenFile {{{Vortaro zip} *.zip}}]
    }
    if {$zip ne ""} {
        if {[catch {iloj::mountZip $zip zip}]} {
            EsperantoBrowser message [mc "Vortaroj ne estis trovitaj en zip.\nElŝutu ilin de %s" {http://wiki.services.openoffice.org/wiki/Dictionaries}]
            return
        }
        set d [file join [EsperantoConf prefEspDosierujo] vortaroj]
        if {![file isdirectory $d]} {
            file mkdir $d
        }
        set i [my kopiuVortarojn $d zip]
        vfs::unmount zip
        if {$i==0} {
            EsperantoBrowser message [mc "Vortaroj ne estis trovitaj en zip.\nElŝutu ilin de %s" {http://wiki.services.openoffice.org/wiki/Dictionaries}]
        } else {
            EsperantoBrowser message [mc "%s vortarojn estis importita" $i]
            my komputuHunspellVortaroj
        }
    }
}
VortaroElektilo instproc elsxutuVortaron {} {
    my instvar lingvo

    set pagxo {http://wiki.services.openoffice.org/wiki/Dictionaries}
    package require http
    if {[EsperantoConf set httpProxy] ne ""} {
        http::config -proxyhost [EsperantoConf set httpProxy] -proxyport [EsperantoConf set httpProxyPort]
    }
    if {[catch {http::geturl $pagxo -binary 1} id]} {
        EsperantoBrowser message [mc "Ne sukcesis elŝuti vortaron por lingvo %s" $lingvo]
        return 0
    }
    set data [encoding convertfrom utf-8 [http::data $id]]
    set code [http::ncode $id]
    http::cleanup $id
    if {$code ne "200"} {
        EsperantoBrowser message [mc "Ne sukcesis elŝuti vortaron por lingvo %s" $lingvo]
        return 0
    }
    puts $data
    # href="http://ftp.services.openoffice.org/pub/OpenOffice.org/contrib/dictionaries/nb_NO.zip"
    set rezulto [regexp -inline -all "<a href=\"(http:\[^\"\]+/${lingvo}_\[A-Z\]{2}.zip)\"\[^>\]+?>(\[^<\]+?)</a>" $data]
    if {[llength $rezulto]==0} {
        EsperantoBrowser message [mc "Ne sukcesis elŝuti vortaron por lingvo %s" $lingvo]
        return
    }
    if {[llength $rezulto]>3} {
        foreach {dummy adreso nomo} $rezulto {
            lappend nomoj $nomo
        }
        set ret [IDE::IDialogList getListItem [mc "Elektu vortaron" $nomoj] $nomoj]
        if {$ret ne ""} {
            foreach {dummy adreso nomo} $rezulto {
                if {$ret eq $nomo} {
                    set url $adreso
                    break
                }
            }
        } else {
            return
        }
    } else {
        set url [lindex $rezulto 1]
    }
    puts "elsxutas $url"
    set d [EsperantoConf prefEspDosierujo]
    set zip [file join $d tmp.zip]
    set f [open $zip w]
    fconfigure $f -encoding binary

    if {[catch {http::geturl $url -binary 1 -channel $f} id]} {
        EsperantoBrowser message [mc "Ne sukcesis elŝuti vortaron por lingvo %s" $lingvo]
        close $f
        return 0
    }
    set code [http::ncode $id]
    http::cleanup $id
    if {$code ne "200"} {
        EsperantoBrowser message [mc "Ne sukcesis elŝuti vortaron por lingvo %s" $lingvo]
        return 0
    }

    puts -nonewline $f $data
    close $f
    my aliguVortaron $zip

}
VortaroElektilo instproc init {} {
    next
    my instvar win
    my specificInit
    wm protocol $win WM_DELETE_WINDOW [list [self] actionCancel]
    wm deiconify $win
}
VortaroElektilo instproc komputuHunspellVortaroj {} {
    my instvar vortaroj parametro
    set vortaroj [HunspellTestilo prenuDosierojnPorLingvo ""]
    set nomoj [list]
    set i 0
    set selected -1
    foreach vortaro $vortaroj {
        foreach {doz1 doz2} $vortaro {}
        lappend nomoj [file tail [file root $doz1]]
        if {[info exists parametero] && $parametro eq $doz1} {
            set selected $i
        }
        incr i
    }
    my @vortaroj setListUnsorted $nomoj
    if {$selected>=0} {
        my @vortaroj setSelectedIndex $selected 0
    }
}
VortaroElektilo instproc kopiuVortarojn {dosiero fonto} {
    set i 0
    foreach f [glob -nocomplain -directory $fonto *.dic] {
        file copy -force $f $dosiero
        incr i
    }
    foreach f [glob -nocomplain -directory $fonto *.aff] {
        file copy -force $f $dosiero
    }
    foreach f [glob -nocomplain -directory $fonto -types d *] {
        incr i [my kopiuVortarojn $dosiero $f]
    }
    return $i
}
VortaroElektilo instproc postOk {} {
    my instvar vortaroj
    set index [my @vortaroj selectedIndex]
    if {$index ne ""} {
        my parametro [lindex $vortaroj $index]
    }
}
VortaroElektilo instproc selektuVortaron vortaro {
    my set vortaroTipo hunspell
}
VortaroElektilo instproc specificInit {} {
    my instvar win vortaroTipo lingvo
    my requireNamespace
    # TODO sen auxtomata elsxuto de vortaroj
    set lingvo ""

    frame $win.f
    radiobutton $win.f.cbesp -text [mc "Interna esperanta vortaro de Esperantilo"] -variable [self]::vortaroTipo -value esperantilo
    radiobutton $win.f.cbhunspell -text [mc "Hunspell"] -variable [self]::vortaroTipo -value hunspell
    radiobutton $win.f.cbaspell -text [mc "eksterna Aspell (nur Linukso)"] -variable [self]::vortaroTipo -value aspell
    IDE::NListView [self]::@vortaroj $win.f.vortaroj -notify [self] -notifyProc selektuVortaron
    if {[info exists lingvo] && $lingvo ne ""} {
        button $win.f.elsxutu -text [mc "Elŝutu vortaron de interreto %s" $lingvo] -command [list [self] elsxutuVortaron]
    }
    button $win.f.sxercxu -text [mc "Trovu vortarojn sur komputilo"] -command [list [self] trovu]
    button $win.f.installu -text [mc "Instalu vortaron de OpenOffice dosiero"] -command [list [self] aliguVortaron]

    if {$::tcl_platform(platform) ne "unix"} {
         $win.f.cbaspell configure -state disabled
    }

    my komputuHunspellVortaroj
    grid $win.f.cbesp -row 0 -column 0 -columnspan 2 -sticky w
    grid $win.f.cbhunspell -row 1 -column 0 -columnspan 2 -sticky w
    grid $win.f.vortaroj -row 2 -column 1 -sticky w
    set n 3
    if {[info exists lingvo] && $lingvo ne ""} {
        grid $win.f.elsxutu -row $n -column 1 -sticky w
        incr n
    }
    grid $win.f.sxercxu -row $n -column 1 -sticky w
    incr n
    grid $win.f.installu -row $n -column 1 -sticky w
    incr n
    grid $win.f.cbaspell -row $n -column 0 -columnspan 2 -sticky w
    grid columnconfigure $win.f 0 -minsize 30

    pack $win.f -fill both -expand yes -before $win.buttons
}
VortaroElektilo instproc trovu {} {
    my instvar win
    set d [tk_chooseDirectory -parent [winfo toplevel $win] -mustexist 1 -title [mc "Dosierujo kun *.aff *.dic dosierojn"]]
    if {$d ne ""} {
        if {[llength [glob -directory $d -nocomplain *.dic]]==0} {
            EsperantoBrowser message [mc "En tiu dosierujo ne troviĝas vortaroj (dosieroj kun finaĵo .dic).\nVi povas trovi ilin ofte en instalado de OppenOffice, Firefox aŭ Thunderbird"]
            return
        }
        EsperantoConf lappend hunspellDosierojn $d
        my komputuHunspellVortaroj
    }
}
VortaroElektilo proc prenuVortaron {vortaroTipo param {lng {}}} {
  set entry [my new -volatile [list -vortaroTipo $vortaroTipo] [list -parametro $param] [list -lingvo $lng]]
  if {[$entry prompt] eq "ok"} {
      return [list [$entry vortaroTipo] [$entry parametro]]
  }
  return
}
Class HunspellAdministrado -superclass ::VortaroElektilo -parameter {{title {Vortaroj de Literumado}}}
@ ::HunspellAdministrado idemeta component EsperantoEdit
HunspellAdministrado instproc specificInit {} {
    my instvar win vortaroTipo lingvo
    my requireNamespace
    # TODO sen auxtomata elsxuto de vortaroj
    set lingvo ""

    frame $win.f

    IDE::NListView [self]::@vortaroj $win.f.vortaroj -notify [self] -notifyProc selektuVortaron
    if {[info exists lingvo] && $lingvo ne ""} {
        button $win.f.elsxutu -text [mc "Elŝutu vortaron de interreto %s" $lingvo] -command [list [self] elsxutuVortaron]
    }
    button $win.f.sxercxu -text [mc "Trovu vortarojn sur komputilo"] -command [list [self] trovu]
    button $win.f.installu -text [mc "Instalu vortaron de OpenOffice dosiero"] -command [list [self] aliguVortaron]

    if {$::tcl_platform(platform) ne "unix"} {
         $win.f.cbaspell configure -state disabled
    }

    my komputuHunspellVortaroj
    grid $win.f.vortaroj -row 2 -column 1 -sticky w
    set n 3
    if {[info exists lingvo] && $lingvo ne ""} {
        grid $win.f.elsxutu -row $n -column 1 -sticky w
        incr n
    }
    grid $win.f.sxercxu -row $n -column 1 -sticky w
    incr n
    grid $win.f.installu -row $n -column 1 -sticky w
    incr n
    grid columnconfigure $win.f 0 -minsize 30

    pack $win.f -fill both -expand yes -before $win.buttons
}
HunspellAdministrado proc administru {} {
  set entry [my new -volatile]
  $entry prompt
}
@ Class Korektilo {
description {GUI Elemento kaj korektilo. Estas uzata kiel nova fenestro en Esperanta redaktilo. La korektilo povas ankaux ruli la gramatkian korektadon}
}
Class Korektilo -parameter {win vortaro}
@ ::Korektilo idemeta categories {private leksikologio gramatiko init-release}
@ ::Korektilo idemeta categoriesMethods {{getTextWindow prenuVorton nuliguMarkon} {aliguRadikon aliguDerivon} {montruGramErarojn gramSelekt raportuMiskontrolon testuFrazo} init}
@ ::Korektilo idemeta component EsperantoEdit
Korektilo instproc akzeptuDerivojn {} {
    my instvar vortaro win erg nunIgnoroListo cur count
    $win.s2.ignoruNun configure -state disabled
    $win.s2.ignoruCxiam configure -state disabled
    $win.s2.aliguVorton configure -state disabled
    my nuliguMarkon
    set neakzeptita 0

    for {set vorto [my prenuVorton]} {$vorto ne ""} {set vorto [my prenuVorton]} {
        set lvorto [string tolower $vorto]
        if {[string is punct $lvorto] || [string is integer $lvorto]} continue
        if {$vorto in $nunIgnoroListo} {
            [my info parent] @editor ignoruRange $cur "$cur + $count char"
            continue
        }
        if {[EsperantoConf set ignoruMallongigoj] && [string toupper $vorto] eq $vorto} continue
        set erg [$vortaro estasVorto $lvorto]
        if {$erg==1 && [EsperantoConf set ignoruDerivoj]} continue
        switch $erg {
            1 {
                if {[llength [$vortaro set kandidatoj]]>1} {
                    set b [NovaDerivoDlg aliguDerivonDeVortaroFino $vortaro]
                    if {[llength $b]==1 && $b eq "stop"} break
                    if {[llength $b]>0} {
                        set neakzeptita 0
                    } else {
                        incr neakzeptita 0
                    }
                } else {
                    set prefikso [$vortaro set prefikso][join [lrange [$vortaro set pradiko] 0 end-1 ] ""]
                    set sufikso [join [$vortaro set sufikso] ""][$vortaro set vortktg]
                    set radobj Radiko::[$vortaro set radiko]
                    $radobj addDerivo $prefikso $sufikso
                }
            }
        }
    }
    EsperantoBrowser message [mc "Teksto estas korektita"]
    my nuliguKorekto
}
Korektilo instproc aliguDerivon {} {
    my instvar vorto vortaro
    set erg [$vortaro estasVorto [string tolower $vorto]]
    if {$erg==1} {
        set b [NovaDerivoDlg aliguDerivonDeVortaro $vortaro]
    }
}
Korektilo instproc aliguRadikon {} {
    my instvar vorto vortaro
    set radobj [NovaRadikoDlg aliguRadikon [string tolower $vorto]]
    if {[Object isobject radobj]} {
        my korektu
    }
}
Korektilo instproc aliguVorton {} {
    my instvar vorto vortaro
    set erg [$vortaro estasVorto [string tolower $vorto]]
    if {$erg==1} {
        set b [NovaDerivoDlg aliguDerivonDeVortaro $vortaro]
    } else {
        set radobj [NovaRadikoDlg aliguRadikon [string tolower $vorto]]
        if {[Object isobject radobj]} {
            my korektu
        }
    }
}
Korektilo instproc cxangxuVorton {} {
    my instvar win frazoSxangxo errCur errEnd
    set twin [my getTextWindow]
    set vorto [$win.s1.vorto get]
    $twin delete $errCur $errEnd
    $twin insert $errCur $vorto
    focus [my getTextWindow]
    set frazoSxangxo 1
    my korektu
}
Korektilo instproc fermu {} {
    my nuliguMarkon
    [my info parent] fermuKorektilon
}
Korektilo instproc finuKorektadon {} {
    [my info parent] setStatusBarText [mc "Teksto estas korektita"]
    my fermu
    focus [my getTextWindow]
}
Korektilo instproc foriguLiterumanVorton {} {
    my instvar win
    [self]::@sugestoj setList {}
    $win.s1.vorto delete 0 end
}
Korektilo instproc getTextWindow {} {
    [my info parent] @editor getTextWindow
}
Korektilo instproc gramSelekt item {
    my instvar errCur errEnd
    set id [my @grameraroj selectedIndex]
    if {$id eq ""} return
    set err [lindex [my @erarkolektilo set eraroj] $id]
    set elem [lindex $err 0 0]
    set sugestoj [lindex $err 2]
    set twin [my getTextWindow]
    $twin tag remove gramerror 1.0 end
    if {[llength $sugestoj]==1 && [lindex $sugestoj 0] eq ", "} {
        set errCur [$elem prenuFinon]
        set errEnd [$twin index "$errCur + 1 c"]
    } else {
        set errCur [[lindex $err 0 0] prenuKomencon]
        set errEnd [[lindex $err 0 end] prenuFinon]
    }
    $twin tag add gramerror $errCur $errEnd
    $twin see [$elem prenuKomencon]
    if {[llength $sugestoj]>0} {
        my @sugestoj setListUnsorted $sugestoj
    } else {
        my @sugestoj setListUnsorted {}
    }
}
Korektilo instproc ignoruCxiam {} {
    my instvar vorto vortaro
    my nuliguMarkon
    $vortaro alliguIgnorvorto $vorto
    my korektu
}
Korektilo instproc ignoruGramEraron {} {
    if {[Object isobject [self]::@frazo]} {
        set komencoElemento [lindex [my @frazo set elementoj] 0]
        set finoElemento [lindex [my @frazo set elementoj] end]
        set komencoIndekso [$komencoElemento komenco]
        set finoIndekso [$finoElemento fino]
        [my getTextWindow] tag add ignoreGram $komencoIndekso $finoIndekso
        my korektu
    }
}
Korektilo instproc ignoruNun {} {
    my instvar vorto nunIgnoroListo vortaro
    my nuliguMarkon
    set cur [my @kursoro vortkomenco]
    set end [my @kursoro kursoro]
    [my info parent] @editor ignoruRange $cur $end
    lappend nunIgnoroListo $vorto
    $vortaro alliguIgnorvorto $vorto 1
    my korektu
}
Korektilo instproc init {} {
    my instvar win gramatikaKorektado
    my set nunIgnoroListo [list]
    my set testuNurGramatikon 0
    my requireNamespace
    set gramatikaKorektado [EsperantoConf set gramatikaKorektado]

    labelframe $win -text [mc "Korektilo"]
    frame $win.s1
    frame  $win.gf

    button $win.fermu -text " X " -command [list [self] fermu]
    pack $win.fermu -side right -anchor n

    IDE::NListView create [self]::@grameraroj $win.gf.grameraroj -notify [self] -notifyProc gramSelekt -height 4
    # button $win.gf.ignoru -text [mc "Ignoru"] -command [list [self] ignoruGramEraron]
    button $win.gf.sintaksArbo -text [mc "Sintaksoarbo"] -command [list [self] montruSintaksoarbon]
    button $win.gf.retestu -text [mc "Retestu"] -command [list [self] retestuFrazon]
    button $win.gf.miskontrolo -text [mc "Raportu miskontrolon"] -command [list [self] raportuMiskontrolon]
    pack $win.gf.grameraroj -fill both -expand yes
    pack $win.gf.sintaksArbo $win.gf.retestu $win.gf.miskontrolo -side left -anchor w

    frame $win.s1.sframe

    entry $win.s1.vorto
    esp::metuXEvento $win.s1.vorto
    bind $win.s1.vorto <Return> [list [self] cxangxuVorton]

    IDE::NListView create [self]::@sugestoj $win.s1.sugestoj -notify [self] -notifyProc prenuSugesto -doubleNotifyProc prenuSugestoKajSxangxu -height 4
    bind $win.s1.sugestoj.listbox <Return> [list [self] cxangxuVorton]

    # checkbutton $win.s1.ignoruDerivojn -text [mc "Ignoru derivaĵojn"] -variable EsperantoConf::ignoruDerivoj -takefocus 0
    # checkbutton $win.s1.ignoruMallongigojn -text [mc "Ignoru eventualajn mallongigojn"] -variable EsperantoConf::ignoruMallongigoj -takefocus 0
    # checkbutton $win.s1.gramKorektado -text [mc "Testu Gramatikon"] -variable EsperantoConf::gramatikaKorektado -takefocus 0
    # checkbutton $win.s1.nurGramKorektado -text [mc "Testu nur Gramatikon"] -variable [self]::testuNurGramatikon -takefocus 0
    pack $win.s1.vorto $win.s1.sugestoj -fill x -expand yes -in $win.s1.sframe
    pack $win.s1.sframe -side left -padx 5
    # pack $win.s1.ignoruDerivojn -anchor w
    # pack $win.s1.ignoruMallongigojn -anchor w
    # pack $win.s1.gramKorektado -anchor w
    # pack $win.s1.nurGramKorektado -anchor w

    frame $win.s2
    button $win.s2.ignoruNun -text [mc "F5 - Ignoru Nun"] -command [list [self] ignoruNun] -state disabled
    button $win.s2.ignoruCxiam -text [mc "F6 - Ignoru Ĉiam"] -command [list [self] ignoruCxiam] -state disabled
    button $win.s2.aliguVorton -text [mc "F9 - Aligu Vorton"] -state disabled -command [list [self] aliguVorton]
    pack $win.s2.ignoruNun $win.s2.ignoruCxiam $win.s2.aliguVorton -fill x -pady 2

    frame $win.s3
    button $win.s3.korektu -text [mc "Iru al sekva eraro"] -command [list [self] korektu]
    pack $win.s3.korektu -side left -padx 5 -pady 3

    pack $win.s1 $win.s3 -anchor w
    pack $win.s2 -in $win.s1 -side left -anchor n -padx 5

    set tlwin [winfo toplevel $win]
    bind $tlwin <F5> [list $win.s2.ignoruNun invoke]
    bind $tlwin <F6> [list $win.s2.ignoruCxiam invoke]
    bind $tlwin <F9> [list $win.s2.aliguVorton invoke]
    #bind $tlwin <Control-F5> [list my retestuFrazon]
    my nuliguKorekto
}
Korektilo instproc korektu {} {
    my instvar gramatikaKorektado
    EsperantoConf statAktiono KR
    if {![Object isobject [self]::@legilo]} {
        my rekomencu
    }
    [my info parent] montruCxiamKorektilon
    if {!$gramatikaKorektado} {
        my korektuSenGramatiko
        return
    }
    set tvortaro [[my info parent] getVortaron]
    if {$tvortaro eq ""} return
    if {[$tvortaro prenuLingvon] ne "eo"} {
        set gramatikaKorektado 0
        my korektuSenGramatiko
        return
    }
    # vi bezonas la esperantilan vortaron (por gramatiko)
    if {![$tvortaro hasclass Vortaro]} {
        set tvortaro [Vortaro prenuVortaron]
    }

    my instvar win erg nunIgnoroListo cur count frazoKomenco frazFino testuNurGramatikon vortaro frazoSxangxo
    set vortaro $tvortaro

    if {[Object isobject [self]::@frazo] && ($frazFino || $frazoSxangxo)} {
        my @frazo destroy
        if {$frazoSxangxo} {
            my @kursoro reaktivuKursoronNomo frazkomenco
        } else {
            my @kursoro reaktivuKursoron
        }
        my nuliguMarkon
    } else {
        my @kursoro reaktivuKursoron
    }
    [[my info parent] @editor getTextWindow] edit modified 0
    set frazFino 0
    set frazoSxangxo 0
    $win.s2.ignoruNun configure -state disabled
    $win.s2.ignoruCxiam configure -state disabled
    $win.s2.aliguVorton configure -state disabled
    set gramRezulto 0

    for {set vorto [my prenuVorton]} {$vorto ne ""} {set vorto [my prenuVorton]} {
        if {$vorto eq "_FINO_"} {
            if {[Object isobject [self]::@frazo]} {
                set gramRezulto [my testuFrazo . 1]
                if {$gramRezulto==2} {
                    my @kursoro konservuKursoron
                    return
                }
            }
            continue
        }
        set komenco [my @kursoro vortkomenco]
        set fino [my @kursoro kursoro]
        if {![Object isobject [self]::@frazo]} {
            GP::Frazo create [self]::@frazo
            set frazoKomenco [my @kursoro kursoro]
            my @kursoro konservuKursoronNomo frazkomenco
            my @legilo komencuFrazon
        }
        set lvorto [string tolower $vorto]
        if {$vorto in $nunIgnoroListo} {
            my @frazo aliguKonstanto $vorto ignorvorto $komenco $fino
            continue
        }
        set erg [my @frazo aliguTestuVorto $vortaro $vorto $komenco $fino]
        if {$erg==1 && [EsperantoConf set ignoruDerivoj]} continue
        if {!$testuNurGramatikon} {
            switch $erg {
                0 -
                1 {
                    $win.s2.aliguVorton configure -state normal
                    my markuVorton $vorto
                    return
                }
            }
        }
        set gramRezulto [my testuFrazo $vorto]
        if {$gramRezulto==2} {
            my @kursoro konservuKursoron
            return
        } elseif {$gramRezulto==1} {
             my nuliguMarkon
        }
    }
    if {$gramRezulto==0} {
        set rez [my testuFrazo . 1]
        if {$rez != 1 && $rez != 0} {
            return
        }
    }
    my finuKorektadon
}
Korektilo instproc korektuSenGramatiko {} {
    my instvar win erg nunIgnoroListo cur count vortaro
    $win.s2.ignoruNun configure -state disabled
    $win.s2.ignoruCxiam configure -state disabled
    $win.s2.aliguVorton configure -state disabled
    my nuliguMarkon

    my @kursoro reaktivuKursoron
    set vortaro [[my info parent] getVortaron]
    if {$vortaro eq ""} {
        return
    }

    for {set vorto [my prenuVorton]} {$vorto ne ""} {set vorto [my prenuVorton]} {
        if {$vorto eq "_FINO_"} continue
        set lvorto [string tolower $vorto]
        if {[string is punct $lvorto] || [string is integer $lvorto]} continue
        if {$vorto in $nunIgnoroListo} {
            [my info parent] @editor ignoruRange $cur "$cur + $count char"
            continue
        }
        if {[EsperantoConf set ignoruMallongigoj] && [string toupper $vorto] eq $vorto} continue
        if {[string length $vorto]==1} continue
        set erg [$vortaro estasVorto $vorto]
        if {$erg==1 && [EsperantoConf set ignoruDerivoj]} continue
        switch $erg {
            0 {
                $win.s2.aliguVorton configure -state normal
                my markuVorton $vorto
                return
            }
            1 {
                $win.s2.aliguVorton configure -state normal
                my markuVorton $vorto
                return
            }
        }
    }
    my finuKorektadon
}
Korektilo instproc markuVorton avorto {
    my instvar win errCur errEnd count vorto erg vortaro
    set vorto $avorto
    if {[$vortaro istype Vortaro]} {
        set spell [HunspellTestilo prenuInstancoPorLingvo eo]
    } else {
        if {[$vortaro istype HunspellTestilo]} {
            set spell $vortaro
        } else {
            set spell ""
        }
    }
    if {$spell ne ""} {
        my @sugestoj setListUnsorted [$spell prenuProponoj $vorto]
    }
    $win.s1.vorto delete 0 end
    $win.s1.vorto insert 0 $vorto
    $win.s2.ignoruNun configure -state normal
    $win.s2.ignoruCxiam configure -state normal
    focus $win.s1.vorto
    set twin [my getTextWindow]
    if {$erg==0} {
        my metuMesagxon [mc "nekonata vorto"]
        set mark spellerror
    } else {
        my metuMesagxon [mc "nekonata derivo"]
        set mark raderror
    }
    set errCur [my @kursoro vortkomenco]
    set errEnd [my @kursoro kursoro]
    $twin see $errCur
    $twin tag add $mark $errCur $errEnd
    $twin tag add cursent $errCur $errEnd
    $twin see $errCur
    my @kursoro konservuKursoron
}
Korektilo instproc metuMesagxon mesagxo {
    [my info parent] setStatusBarText $mesagxo
}
Korektilo instproc montruGramErarojn {} {
    my instvar win
    set elisto [list]
    my metuMesagxon [mc "gramatika eraro"]
    my foriguLiterumanVorton
    foreach e [my @erarkolektilo set eraroj] {
        lappend elisto [lindex $e 1]
    }
    set twin [my getTextWindow]
    $twin tag add cursent [[my @frazo sintaksoarbo] prenuKomencon] [[my @frazo sintaksoarbo] prenuFinon]

    my @grameraroj setListUnsorted $elisto
    my @grameraroj setSelectedIndex 0
    pack $win.gf -side right -fill both -expand yes -before $win.s1
}
Korektilo instproc montruRegulojGramErarojn {regulo elementoListo} {
    my instvar win
    set elisto [list]
    lappend elisto [$regulo set mesagxo]
    my @grameraroj setListUnsorted $elisto
    # my @grameraroj setSelectedIndex 0
    pack $win.gf -side right -fill both -expand yes -before $win.s1

}
Korektilo instproc montruSintaksoarbon {} {
    if {[Object isobject [self]::@frazo] && [my @frazo exists sintaksoarbo]} {
        [my @frazo sintaksoarbo] drawGraph
    }
}
Korektilo instproc nuliguKorekto {} {
    my instvar win cur count stopIndex
    set cur 1.0
    set count 0
    set stopIndex end
        
}
Korektilo instproc nuliguMarkon {} {
    my instvar testuNurGramatikon
    if {$testuNurGramatikon} {
       set twin [[my info parent] @editor getTextWindow]
       $twin tag remove gramerror 1.0 end
       $twin tag remove cursent 1.0 end
    } else {
        [my info parent] @editor nuliguMarkilojn
    }
    my instvar win
    if {[winfo viewable $win.gf]} {
        pack forget $win.gf
    }
}
Korektilo instproc prenuSugesto vorto {
    my instvar win
    $win.s1.vorto delete 0 end
    $win.s1.vorto insert 0 $vorto
}
Korektilo instproc prenuSugestoKajSxangxu vorto {
    my instvar win
    if {$vorto eq ""} return
    $win.s1.vorto delete 0 end
    $win.s1.vorto insert 0 $vorto
    my cxangxuVorton
}
Korektilo instproc prenuVorton {} {
    while 1 {
        set vorto [my @legilo prenuSVorton]
        if {$vorto eq ""} {
            return
        }
        if {[[my info parent] @editor estasEnIgnorSelekto [my @kursoro vortkomenco]]} {
            continue
        }
        break
    }
    return $vorto
}
Korektilo instproc raportuMiskontrolon {} {

  set frazo [my @frazo prenuTeksto]
  set id [my @grameraroj selectedIndex]
  if {$id eq ""} {
      set id 0
  }
  set listo [lindex [my @erarkolektilo set eraroj] $id]
  set elem [lindex $listo 0 0]
  if {[$elem istype SintaksAsto]} {
      set vrange [$elem prenuVortoj]
  } else {
      set vrange [$elem prenuVorton]
  }
  set mesagxo "Falsa indiko pri gramatika eraro en frazo
\"$frazo\"
elemento: $id vorto: \"$vrange\" msg: \"[lindex $listo 1]\"

aldonaj komentoj:\n"


  EspErrorReporter reportuTekston $mesagxo {} {gramatiko}
}
Korektilo instproc rekomencu {} {
    my set nunIgnoroListo [list]
    my metuMesagxon [mc "Esperantilo korektas"]
    my nuliguKorekto
    if {![Object isobject [self]::@kursoro]} {
        EditKursoro create [self]::@kursoro -win [my getTextWindow]
        FrazoLegilo create [self]::@legilo -signoLegilo [self]::@kursoro
        my @legilo komencuFrazon
    }
    # testu cxu html
    set estasHTML [[my info parent] @editor estasEnhavoHTML]
    if {[my @legilo istype HTMLFrazoLegilo]!=$estasHTML} {
        if {$estasHTML} {
            my @legilo class HTMLFrazoLegilo
        } else {
            my @legilo class FrazoLegilo
        }
    }

    if {[Object isobject [self]::@frazo]} {
        my @frazo destroy
        my nuliguMarkon
        my @legilo komencuFrazon
    }
    my set frazFino 0
    set twin [my getTextWindow]
    set range [$twin tag ranges sel]
    if {[llength $range]==0} {
       set cur 1.0
       set stopIndex end
    } else {
       set cur [lindex $range 0]
       set stopIndex [lindex $range 1]
    }
    my @kursoro kursoro $cur
    my @kursoro metuFinon $stopIndex
    my @kursoro konservuKursoron
    my @kursoro metuVortkomenco
    my @kursoro konservuKursoronNomo frazkomenco
    my set gramatikaKorektado [EsperantoConf set gramatikaKorektado]
    my korektu
}
Korektilo instproc retestuFrazon {} {
    my @kursoro reaktivuKursoronNomo frazkomenco
    my @kursoro konservuKursoron
    my @frazo destroy
    my nuliguMarkon
    my @legilo komencuFrazon
    my korektu
}
Korektilo instproc tekstoSxangxita {} {
    # en redaktilo la teksto estis sxangxita, do testu denove de frazkomeno
    my set frazoSxangxo 1
}
Korektilo instproc testuFrazo {vorto {estasDifinitaFino 0}} {
    # rezultoj
    # 0 - nenio aktiono (ne fino)
    # 1 - senerara
    # 2 - eraro
    # 3 - literuma eraro
    if {([my @legilo estasSFrazFino $vorto] || $estasDifinitaFino) && [Object isobject [self]::@frazo]} {
        if {![my @frazo havasNekonataj] || [EsperantoConf set gramatikaKorektadoCxeNekonataj]} {
            # puts [my @frazo prenuTeksto]
            # cxu ignoru gramtikaj eraroj en tiu frazo
            # necesas nur enhavi ignorparto
            set komencoElemento [lindex [my @frazo set elementoj] 0]
            set finoElemento [lindex [my @frazo set elementoj] end]
            set komencoIndekso [$komencoElemento komenco]
            set finoIndekso [$komencoElemento fino]
            if {[[my getTextWindow] tag nextrange ignoreGram $komencoIndekso $finoIndekso] ne ""} {
                my @frazo destroy
                my nuliguMarkon
                return 1
            }

            if {![Object isobject [self]::@sinanalizo]} {
                SintaksaAnalizo create [self]::@sinanalizo
                ErarKolektilo create [self]::@erarkolektilo
            }
            my @sinanalizo frazo [self]::@frazo
            if {[EsperantoConf isInDelopingMode] || ![EsperantoConf estasGUIModo]} {
                my @sinanalizo analizu
            } elseif {[catch {my @sinanalizo analizu}]} {
                EspErrorReporter reportuTekston "teknika problemo kun analizo de frazo:\n\"[my @frazo prenuTeksto]\"" $::errorInfo analizo
                return 1
            }
            my @erarkolektilo sintaksAsto [lindex [my @frazo sintaksoarbo] 0]
            if {[EsperantoConf isInDelopingMode] || ![EsperantoConf estasGUIModo]} {
                my @erarkolektilo sxercxiErarojn
            } elseif {[catch {my @erarkolektilo sxercxiErarojn}]} {
                EspErrorReporter reportuTekston "teknika problemo kun gramatika kontrolado en frazo :\n\"[my @frazo prenuTeksto]\"" $::errorInfo analizo
                return 1
            }
            if {![my @erarkolektilo havasErarojn]} {
                my @frazo destroy
                my nuliguMarkon
                return 1
            }
            my set frazFino 1
            my montruGramErarojn
            return 2
        }
        my nuliguMarkon
        my @frazo destroy
        return 3
    }
    return 0
}
@ Class LingTajparo {
description {La programkode devenas de Tclwiki
http://mini.net/tcl/907
kaj estis programite de Richard Suchenwirth}
}
Class LingTajparo -parameter {txtWindow win}
@ ::LingTajparo idemeta component EsperantoEdit
LingTajparo instproc clist2list clist {
    #-- clist: compact integer list w.ranges, e.g. {1-5 7 9-11}
    set res {}
    foreach i $clist {
        if [regexp {([^-]+)-([^-]+)} $i -> from to] {
            for {set j [expr $from]} {$j<=[expr $to]} {incr j} {
                lappend res $j
            }
        } else {lappend res [expr $i]}
    }
    set res
 }
LingTajparo instproc init args {
    my instvar win tajparo ranges
    array set ranges {
        "Euro Latin 1"          {0xA0-0xFF}
        albana {0x00c7 0x00e7 0x00cb 0x00eb}
        pola {0x0105 0x00f3 0x0107 0x0119 0x0142 0x0144 0x015B 0x017A 0x017C 0x0104 0x00d3 0x0106 0x0118 0x0141 0x0143 0x015A 0x0179 0x017B}
        germana {0x00c4 0x00e4 0x00d6 0x00f6 0x00dc 0x00fc 0x00df}
        esperanta {0x0108 0x0109 0x011c 0x011d 0x0124 0x0125 0x0134 0x0135 0x015c 0x015d 0x016c 0x016d}
        estona {0x00c4 0x00e4 0x010c 0x010d 0x00d5 0x00f5 0x00d6 0x00f6 0x0160 0x0161 0x00dc 0x00fc 0x017d 0x017e}
        franca {0x00c0 0x00e0 0x00c2 0x00e2 0x00c6 0x00e6 0x00c7 0x00e7 0x00c8 0x00e8 0x00c9 0x00e9 0x00ca 0x00ea 0x00cb 0x00eb 0x00ce 0x00ee 0x00cf 0x00ef 0x00d4 0x00f4 0x0152 0x0153 0x00d9 0x00f9 0x00db 0x00fb 0x0178 0x00ff 0x00bb 0x00ab}
        islanda {0x00c1 0x00e1 0x00c6 0x00e6 0x00d0 0x00f0 0x00c9 0x00e9 0x00cd 0x00ed 0x00d3 0x00f3 0x00d6 0x00f6 0x00da 0x00fa 0x0178 0x00ff 0x00de 0x00fe}
        itala {0x00c0 0x00e0 0x00c8 0x00e8 0x00c9 0x00e9 0x00cc 0x00ec 0x00cd 0x00ed 0x00cf 0x00ef 0x00d2 0x00f2 0x00d3 0x00f3 0x00d9 0x00f9 0x00da 0x00fa}
        kataluna {0x00c0 0x00e0 0x00c7 0x00e7 0x00c8 0x00e8 0x00c9 0x00e9 0x00cd 0x00ed 0x00cf 0x00ef 0x013f 0x0140 0x00d2 0x00f2 0x00d3 0x00f3 0x00da 0x00fa 0x00dc 0x00fc 0x00aa 0x00ba 0x00a1 0x00bf 0x00b7}
        latva {0x0100 0x0101 0x010c 0x010d 0x0112 0x0113 0x0122 0x0123 0x012a 0x012b 0x0136 0x0137 0x013b 0x013c 0x0145 0x0146 0x014c 0x014d 0x0156 0x0157 0x0160 0x0161 0x016a 0x016b 0x017d 0x017e}
        litova {0x0104 0x0105 0x0116 0x0117 0x0118 0x0119 0x012e 0x012f 0x016a 0x016b 0x0172 0x0173}
        malta {0x010a 0x010b 0x0120 0x0121 0x0126 0x0127 0x017b 0x017c}
        norvega {0x00c6 0x00e6 0x00d8 0x00f8 0x00c5 0x00e5}
        portugala {0x00c2 0x00e2 0x00c3 0x00e3 0x00c7 0x00e7 0x00ca 0x00ea 0x00d3 0x00f3 0x00d4 0x00f4 0x00d5 0x00f5 0x00fc}
        rumana {0x00c2 0x00e2 0x0102 0x0103 0x00ce 0x00ee 0x015e 0x015f 0x0162 0x0163}
        {rusa trans} {0x010c 0x010d 0x0116 0x0117 0x00cb 0x00eb 0x00cf 0x00ef 0x0160 0x0161 0x017d 0x017e}
        kroata {0x0106 0x0107 0x010c 0x010d 0x0110 0x0111 0x0160 0x0161 0x017d 0x017e}
        slovaka {0x00c1 0x00e1 0x00c4 0x00e4 0x010c 0x010d 0x010e 0x010f 0x00c9 0x00e9 0x00cd 0x00ed 0x0139 0x013a 0x013d 0x013e 0x0147 0x0148 0x00d3 0x00f3 0x00d4 0x00f4 0x0154 0x0155 0x0160 0x0161 0x0164 0x0165 0x00da 0x00fa 0x00dd 0x00fd 0x017d 0x017e}
        slovena {0x010c 0x010d 0x0160 0x0161 0x017d 0x017e}
        hispana {0x00c1 0x00e1 0x00e7 0x00c9 0x00e9 0x00cd 0x00ed 0x00d1 0x00f1 0x00d3 0x00f3 0x00da 0x00fa 0x00fc 0x00aa 0x00ba 0x00a1 0x00bf}
        ĉeĥa {0x00c1 0x00e1 0x010c 0x010d 0x010e 0x010f 0x00c9 0x00e9 0x00cd 0x00ed 0x0147 0x0148 0x00d3 0x00f3 0x0158 0x0159 0x0160 0x0161 0x0164 0x0165 0x00da 0x00fa 0x016e 0x016f 0x00dd 0x00fd 0x017d 0x017e}
        turka {0x00e2 0x00c7 0x00e7 0x011e 0x011f 0x0130 0x0131 0x00ee 0x00d6 0x00f6 0x015e 0x015f 0x00dc 0x00fc}
        hungara {0x00c1 0x00e1 0x00c9 0x00e9 0x00cd 0x00ed 0x00d3 0x00f3 0x00d6 0x00f6 0x0150 0x0151 0x00da 0x00fa 0x00dc 0x00fc 0x0170 0x0171}
        araba                  {0xFE80-0xFEFC}
        cirila                {0x410-0x44f}
        greka                   {0x386-0x38a 0x38c 0x38e-0x3a1 0x3a3-0x3ce}
        hebrea                  {0x5d0-0x5ea 0x5f0-0x5f4}
    }
    my metuTajparo "esperanta"
    #    hiragana                {0x3041-0x3094}
    #    katakana                {0x30A1-0x30FE}
    #    Thai                    {0xE01-0xE3A 0xE3F-0xE5B}
}
LingTajparo instproc metuTajparo tajp {
    my instvar win tajparo ranges txtWindow
    set tajparo $tajp
    destroy $win
    frame $win
    set klist {}; set n 0
    foreach i [my clist2list $ranges($tajp)] {
        set c [format %c $i]
        set cmd "$txtWindow insert insert [list $c]"
        if {$i>=0x5D0 && $i<=0x6FF} {
            append cmd ";$txtWindow mark set insert {insert - 1 chars}"
        }
        button $win.k$i -text $c -command $cmd  -padx 5 -pady 0
        lappend klist $win.k$i
        if {[incr n]==24} {
            grid {*}$klist -sticky news
            set n 0
            set klist {}
        }
    }
    if [llength $klist] {grid {*}$klist -sticky news}
}
LingTajparo instproc prenuLingvoj {} {
    my array names ranges
}
@ Class LingvoSelektoButono {
description {GUI elemento uzata en ''Toolbar'' por selekto de traduka lingvo}
}
Class LingvoSelektoButono -parameter {variable {esplingvo 0} callback}
@ ::LingvoSelektoButono idemeta component EsperantoEdit
LingvoSelektoButono instproc destroy {} {
    EsperantoConf malRegistruInteresonPorLingvo [self]
    next
}
LingvoSelektoButono instproc init mwin {
    my instvar win variable traceproc esplingvo markitaj
    set win $mwin
    set markitaj {}
    frame $win
    set lingvo [set $variable]
    set image [EsperantoBrowser createImage flag$lingvo]
    if {$image eq ""} {
        set image [EsperantoBrowser createImage nekonata]
    }
    button $win.but -image $image -command [list [self] sxangxuLingvon] -relief flat -overrelief raised -takefocus 0
    label $win.lab -textvariable $variable
    pack $win.but $win.lab -side left

    if {$esplingvo} {
        EsperantoConf registruInteresonPorLingvo [self]
    }
}
LingvoSelektoButono instproc prenuLingvoj {} {
    my instvar lingvoj esplingvo markitaj
    if {[info exists lingvoj]} {
        return $lingvoj
    }
    set lngj [list]
    if {!$esplingvo} {
         lappend lngj eo
    }
    foreach {l nomo} [[DBVortaro prenuDepVortaron] subtenatajLingvoj] {
        lappend lngj $l
    }
    return $lngj
}
LingvoSelektoButono instproc setState state {
    my instvar win
    $win.but configure -state $state
}
LingvoSelektoButono instproc skribiLingvoVar {} {
    my sxangxuFlagon
}
LingvoSelektoButono instproc sxangxuFlagon {} {
    my instvar variable win
    set lng [set $variable]
    set image [EsperantoBrowser createImage flag$lng]
    if {$image eq ""} {
        set image [EsperantoBrowser createImage nekonata]
    }
    $win.but configure -image $image
}
LingvoSelektoButono instproc sxangxuLingvon {} {
    my instvar variable esplingvo callback markitaj win
    set nunlng [set $variable]
    set lingvoj [list]
    array set lArr [TradukaVortaroMontrilo lingvoListo]
    foreach abr [my prenuLingvoj] {
        set nomo $lArr($abr)
        lappend lingvoj [list $abr [mc $nomo]]
    }
    set lmarkitaj [list]
    set pos 0
    foreach abr $markitaj {
        set nomo $lArr($abr)
        set e [list $abr [mc $nomo]]
        lappend lmarkitaj $e
        if {[set id [lsearch $lingvoj $e]]>=0} {
            if {$id!=$pos} {
                set lingvoj [linsert [lreplace $lingvoj $id $id] $pos $e]
            }
            incr pos
        }
    }

    set parent [winfo toplevel $win]
    set lng [ListDialogoMarkita getListItem [mc "Elektu la lingvon"] $lingvoj $lmarkitaj $nunlng $parent]
    if {![winfo exists $parent]} {
        return
    }
    if {$lng ne ""} {
        set $variable [lindex $lng 0]
        if {!$esplingvo} {
            if {[info exists callback]} {
                if {[$callback novalingvo [self] [lindex $lng 0]]} {
                    my sxangxuFlagon
                }
            } else {
                my sxangxuFlagon
            }
        }
    }
}
Class ListDialogoMarkita -superclass ::IDE::IDialogList -parameter markitaj
@ ::ListDialogoMarkita idemeta component EsperantoEdit
ListDialogoMarkita instproc init {} {
    next
    my instvar list markitaj win
    if {[info exists markitaj] && [llength $markitaj]>0} {
        foreach m $markitaj {
            set id  [lsearch $list $m]
            if {$id<0} {
                #my halt
            } else {
                $win.lframe.listbox itemconfigure $id -background yellow -selectforeground blue
            }
        }
    }
}
ListDialogoMarkita proc getListItem {message list {markitaj {}} {default {}} {parent {}}} {
    set listdialog [my new -volatile [list -message $message] [list -markitaj $markitaj] [list -list $list] [list -selectedItem $default] [list -parent $parent]]
    if {[$listdialog prompt] ne "ok"} {
        return {}
    }
    set result [$listdialog selectedItem]
    return $result
}
@ Class MorfMontrilo {
description {Dialogo, kiu montras vortfaradon de esperanta vortaro}
}
Class MorfMontrilo -superclass ::IDE::Dialog -parameter {vortaro vorto {type ok} rezulto {title {Morfema analizo}}}
@ ::MorfMontrilo idemeta component EsperantoEdit
MorfMontrilo instproc init {} {
    next
    my instvar win vortaro rezulto radiko vorto
    set f [frame $win.f]
    if {$rezulto==1} {
        set lab [mc "vorto eblas sed nekonata"]
    } else {
        set lab [mc "vorto konata"]
    }
    label $f.rezulto -text $lab

    set vfarado [$vortaro prenuVortfarado]
    label $f.labofteco -text [mc "ofteco:"] -anchor w
    set ofteco [FrekvencoListo prenuFrekveno]
    label $f.ofteco -text [$ofteco prenuFrekvencon [$vortaro prenuBazanFormon]] -anchor w
    label $f.labvf -text [mc "morfemoj:"] -anchor w
    label $f.vf -text [join [$vortaro prenuMorfcxeno] -]  -anchor w
    label $f.labbr -text [mc "basa radiko:"] -anchor w
    label $f.br -text [$vortaro set radiko] -anchor w
    button $f.mradiko -text ... -command [list [self] montruRadikoRedaktilo]
    set row 4
    if {$rezulto==1 || [llength [lindex $vfarado 1]]>1} {
        label $f.labrj -text radikoj: -anchor w
        label $f.rj -text [lindex $vfarado 1] -anchor w
        grid $f.labrj -column 0 -row $row -sticky w
        grid $f.rj -column 1 -row $row -columnspan 2 -sticky w
        incr row
    }
    if {$rezulto==1 || [lindex $vfarado 0] ne ""} {
        label $f.labpr -text [mc "prefikso:"] -anchor w
        label $f.pr -text [lindex $vfarado 0] -anchor w
        grid $f.labpr -column 0 -row $row -sticky w
        grid $f.pr -column 1 -row $row -sticky w
        incr row
    }
    if {$rezulto==1 || [lindex $vfarado 2] ne ""} {
        label $f.labsf -text [mc "sufiksoj:"] -anchor w
        label $f.sf -text [lindex $vfarado 2] -anchor w
        grid $f.labsf -column 0 -row $row -sticky w
        grid $f.sf -column 1 -row $row -sticky w
        incr row
    }
    if {$rezulto==1} {
        IDE::NListView create [self]::@kanlisto $win.f.kanlisto -notify [self] -height 5
        grid $win.f.kanlisto -column 0 -row $row -columnspan 3 -sticky news
        incr row
    }
    if {[$vortaro estasPrimitivaVorto]} {
        set gobj [$vortaro prenuPrimitivaGramElemento [self] [my vorto]]
        if {[$gobj istype GP::TabloVorto]} {
            set gram Tablovorto
        } else {
            set gram [[$gobj radiko] prenuTypo]
        }
        set radiko [$vortaro set radiko]
        $gobj destroy
    } else {
        array set gramktg {i verbo a adjektivo o substantivo e adverbo en adverbo-n}
        if {[lsearch [$vortaro set zyklo] t]>=0} {
            set gram "[mc "participo kiel"]$gramktg([$vortaro finaVortklaso])"
        } else {
            set gram $gramktg([$vortaro set vortktg])
        }
        set radiko [$vortaro set radiko]
    }
    if {$rezulto==1} {
        my initKandidatoj
    }
    label $f.labgr -text [mc "gramatiko:"] -anchor w
    label $f.gr -text $gram -anchor w
    grid $f.labgr -column 0 -row $row -sticky w
    grid $f.gr -column 1 -row $row -sticky w
    incr row

    grid $f.rezulto -column 0 -row 0 -columnspan 2 -sticky w
    grid $f.labofteco -column 0 -row 1 -sticky w
    grid $f.ofteco -column 1 -row 1 -sticky w
    grid $f.labvf -column 0 -row 2 -sticky w
    grid $f.vf -column 1 -row 2 -sticky w
    grid $f.labbr -column 0 -row 3 -sticky w
    grid $f.br -column 1 -row 3 -sticky w
    grid $f.mradiko -column 2 -row 3 -sticky w

    pack $win.f -fill both -expand yes -before $win.buttons -padx 10 -pady 5
    wm protocol $win WM_DELETE_WINDOW [list [self] actionCancel]
    wm deiconify $win
}
MorfMontrilo instproc initKandidatoj {} {
    my instvar vortaro
    set listo [list]
    foreach k [$vortaro set kandidatoj] {
        lappend listo [join $k -]
    }
    my @kanlisto setListUnsorted $listo
    my @kanlisto setSelectedIndex 0
}
MorfMontrilo instproc montruRadikoRedaktilo {} {
    RadikaroRedaktilo montruRadikoDerivo [my set radiko] [[my set vortaro] prenuBazanFormon]
}
MorfMontrilo instproc selectItem item {
    my instvar vortaro win radiko
    foreach {pre rad suf} [split $item -] {}
    set index [my @kanlisto selectedIndex]
    set kandidato [lindex [$vortaro set kandidatoj] $index]
    # morfcxeno
    $win.f.vf configure -text ???
    # radiko
    set radiko [lindex [lindex $kandidato 1] end]
    $win.f.br configure -text $radiko
    # radikoj
    $win.f.rj configure -text [lindex $kandidato 1]
    # prefikso
    $win.f.pr configure -text [lindex $kandidato 0]
    # sufikso
    $win.f.sf configure -text [lindex $kandidato 2]
}
MorfMontrilo proc muntruVorto {vortaro resulto vorto mainWindow} {
    set montr [my new -volatile [list -vortaro $vortaro] [list -rezulto $resulto] [list -vorto $vorto] -parent $mainWindow]
    $montr prompt
}
@ Class NovaDerivoDlg {
description {Dialogo por enskibo de nova dervio}
}
Class NovaDerivoDlg -superclass ::IDE::Dialog -parameter {{type okcancel} {title {Aligu Derivaĵon}} {radiko {}} {prefikso {}} {sufikso {}} vortaro}
@ ::NovaDerivoDlg idemeta component EsperantoEdit
NovaDerivoDlg instproc checkOk {} {
    my instvar radiko mesagxo sufikso prefikso
    if {![regexp {^\w+$} $radiko]} {
        set mesagxo "derivo devas esti vorto"
        return 0
    }
    if {![regexp {^\w+(-)?\w*$} $prefikso] && $prefikso ne ""} {
        set mesagxo "derivo devas esti vorto"
        return 0
    }
    if {![regexp {^\w+$} $sufikso] && $sufikso ne ""} {
        set mesagxo "derivo devas esti vorto"
        return 0
    }
    if {$prefikso eq "" && $sufikso eq ""} {
        set mesagxo "nek prefikso nek sufikso estas deklarita"
        return 0
    }
    set radobj [Radiko prenuRad $radiko]
    if {![Object isobject $radobj]} {
        set mesagxo "Radiko ne ekzistas"
        return 0
    }
    return 1
}
NovaDerivoDlg instproc init {} {
    next
    my instvar win mesagxo vortaro

    my requireNamespace
    set propranomo 0
    set ovorto 0
    set avorto 0
    set evorto 0
    set ivorto 0

    frame $win.f
    label $win.f.prefiksolab -text [mc "Prefikso:"]
    entry $win.f.prefikso -textvariable [self]::prefikso
    ::esp::metuXEvento $win.f.prefikso
    label $win.f.radikolab -text [mc "Radiko:"]
    entry $win.f.radiko -textvariable [self]::radiko
    ::esp::metuXEvento $win.f.radiko
    label $win.f.sufiksolab -text [mc "Sufikso:"]
    entry $win.f.sufikso -textvariable [self]::sufikso
    ::esp::metuXEvento $win.f.sufikso

    label $win.f.stat -textvariable [self]::mesagxo

    grid $win.f.radikolab -column 0 -row 1 -sticky e
    grid $win.f.radiko -column 1 -row 1
    grid $win.f.prefiksolab -column 0 -row 0 -sticky e
    grid $win.f.prefikso -column 1 -row 0
    grid $win.f.sufiksolab -column 0 -row 2 -sticky e
    grid $win.f.sufikso -column 1 -row 2
    grid $win.f.stat -column 0 -row 3 -columnspan 2 -sticky news
    if {[info exists vortaro]} {
        if {[llength [$vortaro set kandidatoj]]>1} {
            IDE::NListView create [self]::@kanlisto $win.f.kanlisto -notify [self]
            grid $win.f.kanlisto -column 0 -row 4 -columnspan 2 -sticky news
            my initKandidatoj
        } else {
            my set prefikso [$vortaro set prefikso][join [lrange [$vortaro set pradiko] 0 end-1 ] ""]
            my set sufikso [join [$vortaro set sufikso] ""][$vortaro set vortktg]
            my set radiko [lindex [$vortaro set pradiko] end]
        }
    }
    pack $win.f -fill both -expand yes -before $win.buttons
    wm protocol $win WM_DELETE_WINDOW [list [self] actionCancel]
    wm deiconify $win
}
NovaDerivoDlg instproc initKandidatoj {} {
    my instvar vortaro
    set listo [list]
    foreach k [$vortaro set kandidatoj] {
        set km [list [lindex $k 0] [lindex $k 1] [lindex $k 2][lindex $k 3]]
        lappend listo [join $km -]
    }
    my @kanlisto setListUnsorted $listo
    my @kanlisto setSelectedIndex 0
}
NovaDerivoDlg instproc postOk {} {
    my instvar radiko mesagxo radobj sufikso prefikso
    set radobj [Radiko prenuRad $radiko]
    if {![Object isobject $radobj]} {
       return
    }
    if {![$radobj addDerivo $prefikso $sufikso]} {
        set radobj ""
    }
    next
}
NovaDerivoDlg instproc selectItem item {
    my instvar vortaro
    foreach {pre rad suf} [split $item -] {}
    my set prefikso $pre[join [lrange $rad 0 end-1 ] ""]
    my set radiko [lindex $rad end]
    my set sufikso [join $suf ""]
}
NovaDerivoDlg proc aliguDerivon {radiko prefikso sufikso} {
  set entry [my new -volatile [list -radiko $radiko] [list -prefikso $prefikso] [list -sufikso $sufikso]]
  set ret ""
  if {[$entry prompt] eq "ok"} {
      set ret [list [$entry set radobj] [$entry set prefikso] [$entry set sufikso]]
  }
  return $ret
}
NovaDerivoDlg proc aliguDerivonDeVortaro vortaro {
  set entry [my new -volatile [list -vortaro $vortaro]]
  set ret ""
  if {[$entry prompt] eq "ok"} {
      set ret [list [$entry set radobj] [$entry set prefikso] [$entry set sufikso]]
  }
  return $ret
}
NovaDerivoDlg proc aliguDerivonDeVortaroFino vortaro {
  set entry [my new -volatile [list -vortaro $vortaro] -type okcancelstop]
  if {[set ret [$entry prompt]] eq "ok"} {
      set ret [list [$entry set radobj] [$entry set prefikso] [$entry set sufikso]]
  } elseif {$ret eq "stop"} {
      set ret stop
  } else {
      set ret ""
  }
  return $ret
}
@ Class NovaRadikoDlg {
description {Dialogo por enskibo de nova radiko}
}
Class NovaRadikoDlg -superclass ::IDE::Dialog -parameter {{type okcancel} {title {Aligu Radikon}} {radiko {}}}
@ ::NovaRadikoDlg idemeta component EsperantoEdit
NovaRadikoDlg instproc checkOk {} {
    my instvar radiko mesagxo ovorto avorto evorto ivorto propranomo
    set radiko [string tolower $radiko]
    if {![regexp {^\w+$} $radiko]} {
        set mesagxo "radiko devas esti vorto"
        return 0
    }
    if {!$ovorto && !$avorto && !$evorto && !$ivorto} {
        set mesagxo "bezonas almenaŭ unu vortokategorio"
        return 0
    }
    set radobj [Radiko prenuRad $radiko]
    if {[Object isobject $radobj]} {
        set mesagxo "Radiko jam egzistas"
        return 0
    }
    return 1
}
NovaRadikoDlg instproc init {} {
    next
    my instvar win propranomo ovorto avorto evorto ivorto mesagxo radiko

    my requireNamespace
    set propranomo 0
    set ovorto 0
    set avorto 0
    set evorto 0
    set ivorto 0

    frame $win.f
    label $win.f.radikolab -text [mc "Radiko:"]
    entry $win.f.radiko -textvariable [self]::radiko
    ::esp::metuXEvento $win.f.radiko

    set rvorto [[Radikilaro prenuPorLingvo eo] radikigi $radiko]
    if {[lsearch {a o e i} [string index $rvorto end]]>=0} {
        set radiko [string range $rvorto 0 end-1]
        set [string index $rvorto end]vorto 1
    }

    checkbutton $win.f.propranomo -text [mc "Propra nomo"] -variable [self]::propranomo
    checkbutton $win.f.ovorto -text [mc "O-Vorto"] -variable [self]::ovorto
    checkbutton $win.f.avorto -text [mc "A-Vorto"] -variable [self]::avorto
    checkbutton $win.f.evorto -text [mc "E-Vorto"] -variable [self]::evorto
    checkbutton $win.f.ivorto -text [mc "I-Vorto"] -variable [self]::ivorto
    label $win.f.stat -textvariable [self]::mesagxo

    grid $win.f.radikolab -column 0 -row 0
    grid $win.f.radiko -column 1 -row 0
    grid $win.f.propranomo -column 0 -row 1 -columnspan 2
    grid $win.f.ovorto -column 0 -row 2 -columnspan 2 -sticky w
    grid $win.f.ivorto -column 0 -row 3 -columnspan 2 -sticky w
    grid $win.f.avorto -column 0 -row 4 -columnspan 2 -sticky w
    grid $win.f.evorto -column 0 -row 5 -columnspan 2 -sticky w
    grid $win.f.stat -column 0 -row 6 -columnspan 2 -sticky news

    pack $win.f -fill both -expand yes -before $win.buttons
    wm protocol $win WM_DELETE_WINDOW [list [self] actionCancel]
    wm deiconify $win
}
NovaRadikoDlg instproc postOk {} {
    my instvar radiko mesagxo ovorto avorto evorto ivorto propranomo radobj
    set radobj [Radiko prenuRad $radiko]
    if {[Object isobject $radobj]} {
       set mesagxo "Radiko jam egzistas"
       return
    }
    if {$propranomo} {
        set c Propranono
    } else {
        set c Radiko
    }
    $c create $radobj
    foreach k {a o i e} {
       if {[set ${k}vorto]} {
            $radobj addDerivo {} $k
        }
    }
    next
}
@ NovaRadikoDlg proc aliguRadikon {} {
description {resultas liston kun radikoobjekto prefikso kaj sufikse
se sukcesis aliekaze nenio}
}
NovaRadikoDlg proc aliguRadikon radiko {
  set radiko [string tolower $radiko]
  set parent [focus]
  if {$parent ne ""} {
      set parent [winfo toplevel $parent]
  }

  set entry [my new -volatile [list -radiko $radiko] [list -parent $parent]]
  set ret ""
  if {[$entry prompt] eq "ok"} {
      set ret [$entry set radobj]
  }
  return $ret
}
@ Class PreferajxojDialogo {
description {Dialogo por preferajxoj. Cxiuj preferajxoj estas priskribitaj en la kodo de la metodo '''prenuPriskribo'''}
}
Class PreferajxojDialogo -superclass ::IDE::Browser
@ ::PreferajxojDialogo idemeta categories init-release
@ ::PreferajxojDialogo idemeta categoriesMethods {{createSystemMenu getTitle initFonts specificInit}}
@ ::PreferajxojDialogo idemeta component EsperantoEdit
PreferajxojDialogo instproc akceptuSxangxojn {} {
    foreach {kat difino} [my prenuPriskribo] {
        foreach {nomo priskribo specio} $difino {
            my metuOption $nomo [my prenu_$specio $nomo]
        }
    }
    my destroy
}
PreferajxojDialogo instproc changeFont nomo {
    set erg [IDE::FontChooser getFont [font actual $nomo]]
    if {$erg ne ""} {
        eval font configure $nomo $erg
    }
}
PreferajxojDialogo instproc changeLingvon nomo {
    my instvar opcioj
    set alingvo $opcioj($nomo)
    set default ""
    array set lingvoArr [TradukaVortaroMontrilo lingvoListo]
    set lingvoj [list]
    foreach l [PliBonaVortoKorektilo prenuFalsajAmikojLingvoj] {
        if {[catch {set lingvoArr($l)} lnomo]} {
            set lnomo $l
        }
        lappend lingvoj [list $l $lnomo]
        if {$alingvo eq $l} {
            set default [list $l $lnomo]
        }
    }
    set lingvo [IDE::IDialogList getListItem [mc "Elektu la lingvon"] $lingvoj $default]
    if {$lingvo ne ""} {
        set opcioj($nomo) [lindex $lingvo 0]
    }
}
PreferajxojDialogo instproc createSystemMenu {} {
    # no menuo
}
PreferajxojDialogo instproc getTitle {} {
    return [mc "Preferaĵoj"]
}
PreferajxojDialogo instproc initFonts {} {
    if {[lsearch [font names] espfont_pref]<0} {
        font create espfont_pref
    }
    EsperantoConf prenuRevoFont
    if {[lsearch [font names] revofont_pref]<0} {
        font create revofont_pref
    }
    eval font configure espfont_pref [font actual espfont]
    eval font configure revofont_pref [font actual revofont]
}
PreferajxojDialogo instproc kreu_bool {wnomo nomo priskribo} {
    my instvar opcioj
    set opcioj($nomo) [my prenuOption $nomo]
    checkbutton $wnomo -text $priskribo -variable [self]::opcioj($nomo)
}
PreferajxojDialogo instproc kreu_dosierujo {wnomo nomo priskribo} {
    my instvar opcioj
    set opcioj($nomo) [my prenuOption $nomo]
    frame $wnomo
    label $wnomo.l -textvariable [self]::opcioj($nomo)
    button $wnomo.b -text $priskribo -command [list [self] selektuDosierujon $nomo]
    pack $wnomo.l $wnomo.b -side left
}
PreferajxojDialogo instproc kreu_font {wnomo nomo priskribo} {
    frame $wnomo
    label $wnomo.flab -text "$priskribo"
    label $wnomo.fexample  -border 2 -relief sunken -text "Ekzempla teksto" -font $nomo
    button $wnomo.fchange -text [mc "Ŝanĝu"] -command [list [self] changeFont $nomo]
    pack $wnomo.flab $wnomo.fexample $wnomo.fchange -side left
}
PreferajxojDialogo instproc kreu_lingvo {wnomo nomo priskribo} {
    my instvar opcioj
    set opcioj($nomo) [my prenuOption $nomo]
    frame $wnomo
    label $wnomo.flab -text "${priskribo}:"
    label $wnomo.lingvo -textvariable [self]::opcioj($nomo)
    button $wnomo.fchange -text [mc "Ŝanĝu"] -command [list [self] changeLingvon $nomo]
    pack $wnomo.flab $wnomo.lingvo $wnomo.fchange -side left
}
PreferajxojDialogo instproc kreu_string {wnomo nomo priskribo} {
    my instvar opcioj
    set opcioj($nomo) [my prenuOption $nomo]
    frame $wnomo
    label $wnomo.l -text $priskribo
    entry $wnomo.e -text $priskribo -textvariable [self]::opcioj($nomo)
    pack $wnomo.l $wnomo.e -side left
}
PreferajxojDialogo instproc metuOption {nomo valuo} {
    if {$nomo eq "espfont_pref"} {
        eval font configure espfont $valuo
        EsperantoConf set literGrandeco [font configure espfont -size]
        EsperantoConf set literArto [font configure espfont -family]
        return
    }
    if {$nomo eq "revofont_pref"} {
        eval font configure revofont $valuo
        EsperantoConf set revoLiterGrandeco [font configure revofont -size]
        EsperantoConf set revoLiterArto [font configure revofont -family]
        return
    }
    EsperantoConf set $nomo $valuo
}
PreferajxojDialogo instproc montruKategorion katnumero {
    my instvar win opcioj aktualaPago
    if {$aktualaPago>=0} {
        pack forget $win.dframe.k$aktualaPago
    }
    set aktualaPago $katnumero
    pack $win.dframe.k$aktualaPago -fill both -expand yes -padx 4 -pady 4
}
PreferajxojDialogo instproc prenuOption nomo {
    EsperantoConf set $nomo
}
PreferajxojDialogo instproc prenuPriskribo {} {
    set p ""
    set tm_p {
        [list [mc "traduka asistanto"]] {
            tradUzuTradukMemoron [list [mc "Uzu tradukan memoron"]] bool
            segPrenuFonton [list [mc "Kopiu unue fontan tekston al celo"]] bool
            tradXLIFFUAltTrans [list [mc "XLIFF uzu 'alt-trans' Etiketon"]] bool
        }
    }
    set tm_p [subst $tm_p]
    set p {
        [mc "redaktilo"] {
            xAnstatuaigo [list [mc "Traktu X kiel ĉapelo de litero"]] bool
            xAnstatuaigoPaste [list [mc "X-Anstataŭigo ĉe intergluo de teksto"]] bool
            literoKonvertoKunVortaro [list [mc "Konvertado de literoj kun vortaro"]] bool
            addUTFTrailer [list [mc "Aligu UTF8 kapon dum konservado"]] bool
            espfont_pref [list [mc "Aspekto de literoj en redaktilo"]] font
            revofont_pref [list [mc "Aspekto de literoj en vortaroj"]] font
            testUpdate [list [mc "Testu aŭtomate novan eldonon"]] bool
            uzuMalnovanVortaron [list [mc "Uzu malnovan uzulan interfacon por vortaro"]] bool
            literumadoDumSkribado [list [mc "Literumu dum skribado"]] bool
            autoEncoding [list [mc "Trovu aŭtomate enkodon"]] bool
        }
        [mc "korektado"] {
            ignoruDerivoj [list [mc "Ignoru derivaĵojn"]] bool
            ignoruMallongigoj [list [mc "Ignoru eventualan mallongigojn"]] bool
            derivuEVortoj [list [mc "Derivu E-Vortojn aŭtomate"]] bool
            gramatikaKorektado [list [mc "Gramatika korektado"]] bool
            gramatikaMRegulojKorektado [list [mc "Korektado laŭ ekzemplaj reguloj"]] bool
            gramatikaKorektadoCxeNekonataj [list [mc "Gramatika korektado ankaŭ ĉe nekonataj vortoj"]] bool
            gramTestuKomojn [list [mc "Testu komojn"]] bool
            gramTestuSignojn [list [mc "Testu mankantajn ? aŭ !"]] bool
            gramRaportuCxion [list [mc "Raportu ĉiujn gramatikajn dubojn"]] bool
            gramTipografio [list [mc "Raportu tipografiajn erarojn"]] bool
            gramFrancaTipografio [list [mc "Franca tipografio por ?!:"]] bool
            gramatikaPliBonajVortoj [list [mc "Proponu pli konvenajn sinonimojn"]] bool
            gramatikaFalsajAmikoj  [list [mc "Avertu pri ebla falsa amiko"]] bool
            gramatikaFalsajAmikojNaciaLingvo [list [mc "Lingvo por falsaj amikoj"]] lingvo
        }
        [list [mc "maŝina tradukado"]] {
            tradDerivuAutomate [list [mc "Derivu tradukojn aŭtomate"]] bool
            tradPreferuInanSekson [list [mc "Supozu inan sekson por pronomoj"]] bool
            tradPlForiguPronomojn [list [mc "Forigu nenecasajn pronomojn"]] bool
            tradRemorifgo [list [mc "Uzu inversan esperantan vortfaradon"]] bool
            tradUzuFrazpartoVortaron [list [mc "Uzu vortaron de frazpartoj"]] bool
            tradDeOrdonoAlSubstantivo [list [mc "(germana) ordono al substantivo"]] bool
            tradNeTradukoKiamNekonataj [list [mc "Ne traduku kiam supozas ne esperantan frazon"]] bool
            tradMontruKoloreTradukkvaliton [list [mc "Montru diverskolore tradukkvaliton"]] bool
            tradMontruRaporton [list [mc "Montru statistikan raporton"]] bool
            tradMontroDeFontoteksto [list [mc "Rapida Montro de Fontotekso"]] bool
        }
        $tm_p
        [mc "vikipedio"] {
            httpProxy {http Proxy} string
            httpProxyPort {http Proxy Port} string
            wikipediaOffline [list [mc "Loka vikipedio"]] bool
            wikipediaDosierujo [list [mc "Loka vikipedio-dosierujo"]] dosierujo
        }
    }
    if {[EsperantiloLancxilo estasTM]} {
        set p $tm_p
    }
    subst $p
}
PreferajxojDialogo instproc prenu_bool nomo {
    my instvar opcioj
    return $opcioj($nomo)
}
PreferajxojDialogo instproc prenu_dosierujo nomo {
    my prenu_bool $nomo
}
PreferajxojDialogo instproc prenu_font nomo {
    font actual $nomo
}
PreferajxojDialogo instproc prenu_lingvo nomo {
    my prenu_bool $nomo
}
PreferajxojDialogo instproc prenu_string nomo {
    my prenu_bool $nomo
}
PreferajxojDialogo instproc selektuDosierujon nomo {
    my instvar opcioj
    set d [IDE::Dialog getDir $opcioj($nomo)]
    if {$d ne ""} {
        set opcioj($nomo) $d
    }
}
PreferajxojDialogo instproc selektuListoElemento {} {
    my instvar win
    set currsel [lindex [$win.kat curselection] 0]
    if {$currsel ne ""} {
        my montruKategorion $currsel
    }
}
PreferajxojDialogo instproc specificInit {} {
    my instvar win opcioj aktualaPago
    my requireNamespace

    my initFonts
    listbox $win.kat
    bind $win.kat <<ListboxSelect>> [list [self] selektuListoElemento]

    frame $win.butonoj
    button $win.butonoj.akceptu -text [mc "Akceptu"] -command [list [self] akceptuSxangxojn]
    button $win.butonoj.forlasu -text [mc "Forlasu"] -command [list [self] destroy]
    pack $win.butonoj.forlasu $win.butonoj.akceptu -side right -padx 5 -pady 5

    frame $win.dframe -width 450 -height 350
    set i 0
    set aktualaPago -1
    foreach {kat difino} [my prenuPriskribo] {
        $win.kat insert end $kat
        labelframe $win.dframe.k$i -text $kat
        set kat [subst $kat]
        set difino [subst $difino]
        set y 0
        foreach {nomo priskribo specio} $difino {
            set onomo $win.dframe.k$i.o$y
            #puts "kreu_$specio $onomo $nomo $priskribo"
            my kreu_$specio $onomo $nomo $priskribo
            pack $onomo -anchor w
            incr y
        }
        incr i
    }
    pack $win.butonoj -side bottom -anchor e
    pack $win.kat -side left -fill y -padx 3 -pady 3
    pack $win.dframe -expand yes -fill both
    $win.kat selection set 0
    pack propagate $win.dframe 0
    my montruKategorion 0
}
PreferajxojDialogo proc newBrowser {} {
    my instvar prefobj
    EsperantoConf statAktiono PR
    if {![info exists prefobj] || ![Object isobject $prefobj]} {
       set prefobj [my new [Object autoname .pdialog]]
    }
}
@ Class RadikaroRedaktilo {
description {Redaktilo por esperanta vortaro. Tiu vortaro estas uzato por literumado kaj sintaksa analizo}
}
Class RadikaroRedaktilo -superclass {::IDE::Browser ::IDE::GUICommands}
@ ::RadikaroRedaktilo idemeta categories init-release
@ ::RadikaroRedaktilo idemeta categoriesMethods {{createSystemMenu getTitle fillMenuStruct getMenuStruct specificInit}}
@ ::RadikaroRedaktilo idemeta component EsperantoEdit
RadikaroRedaktilo instproc akzeptuSxangxojn {} {
    my instvar radobj derivo aktualaGramkat
    set attr [list]
    foreach {nomo priskribo} [Radiko prenuDerivojPriskriboj] {
        if {$nomo eq $aktualaGramkat} {
            foreach pri $priskribo {
                set a [lindex $pri 0]
                if {[my set $a]} {
                    lappend attr $a
                }
            }
        }
    }
    $radobj metuDerivoAttr [lindex $derivo 0] [lindex $derivo 1] $attr
}
RadikaroRedaktilo instproc aliguDerivon {} {
    my instvar radobj
    set b [NovaDerivoDlg aliguDerivon [$radobj prenuRadiko] "" ""]
    if {[llength $b]>0} {
        my montruDerivojn
    }
}
RadikaroRedaktilo instproc aliguRadikon {} {
    my instvar win
    set novobj [NovaRadikoDlg aliguRadikon ""]
    if {$novobj ne ""} {
        my set radobj $novobj
        $win.radiko del 0 end
        $win.radiko insert 0 [$novobj prenuRadiko]
        my montruDerivojn
    }
}
RadikaroRedaktilo instproc createSystemMenu {} {
    my createNonSystemMenu
}
RadikaroRedaktilo instproc fillMenuStruct ms {
    $ms enablementHandler [self]

    $ms addCommand [mc "Eksportu radikaron"] [list [self] konserviRadikaron]
    $ms addCommand [mc "Eksportu radikaron kiel xml"] [list [self] konserviRadikaronXML]
    $ms addCommand [mc "Eksportu eblajn vortojn"] [list [self] konserviEblajnVortojn]
}
RadikaroRedaktilo instproc foriguDerivon {} {
    my instvar radobj derivo
    set rez [$radobj foriguDerivo [lindex $derivo 0] [lindex $derivo 1]]
    if {$rez} {
        my montruDerivojn
    } else {
        EsperantoBrowser message [mc "Derivo ne povas esti forigita"]
    }
}
RadikaroRedaktilo instproc foriguRadikon {} {
    my instvar radobj win
    if {[EsperantoBrowser yesNo [mc "Ĉu vere forigi radiko %s" [$radobj prenuRadiko]]]} {
        $radobj forigu
        set radobj ""
        $win.radiko del 0 end
        $win.derivo del 0 end
        foreach w {foriguRadikon aliguDerivon foriguDerivon konservu} {
            $win.$w configure -state disabled
        }
        my @derivoj resetList
    }
}
RadikaroRedaktilo instproc getMenuStruct {} {
    IDE::MenuStruct create [self]::ms [mc "Radikaro"] 0
}
RadikaroRedaktilo instproc getTitle {} {
    return "Radikaro-Redaktilo"
}
RadikaroRedaktilo instproc inspectRadiko {} {
    [my set radobj] inspect
}
RadikaroRedaktilo instproc konserviEblajnVortojn {} {
    set dosiero [IDE::Dialog getSaveFile *.txt]
    if {$dosiero ne ""} {
        Radiko eksportuEblajVortoj $dosiero
    }
}
RadikaroRedaktilo instproc konserviRadikaron {} {
    set dosiero [IDE::Dialog getSaveFile *.txt]
    if {$dosiero ne ""} {
        Radiko eksportuVortoj $dosiero
    }
}
RadikaroRedaktilo instproc konserviRadikaronXML {} {
    set dosiero [IDE::Dialog getSaveFile vortaro.xml]
    if {$dosiero ne ""} {
        Radiko eksportuXMLVortaro $dosiero
    }
}
RadikaroRedaktilo instproc montruDerivo derivo {
    foreach i [my @derivoj getList] {
        if {[string map {- ""} $i] eq $derivo} {
            my @derivoj setSelectedItem $i
            break
        }
    }
}
RadikaroRedaktilo instproc montruDerivojn {} {
    my instvar radobj derivo win
    $win.aliguDerivon configure -state normal
    set radiko [$radobj prenuRadiko]
    set l [list]
    set derivoj [list]
    foreach d [$radobj prenuListDerivoj] {
        set pre [lindex $d 0]
        set suf [lindex $d 1]
        lappend l [join [concat $pre $radiko $suf] -]
        lappend derivoj "$pre$radiko$suf"
    }
    my @derivoj setList $l
    set indekso [lsearch [lsort $derivoj] $derivo]
    if {$indekso<0} {
        set indekso 0
    }
    my @derivoj setSelectedIndex $indekso
}
RadikaroRedaktilo instproc montruRadikon {} {
    my instvar radobj win
    set pri ""
    if {[$radobj exists arto]} {
        append pri /[$radobj arto]
    }
    if {[$radobj istype Pronomo]} {
        append pri [mc ", primitiva Vorto - %s" [$radobj prenuTypo]]
    }
    if {[$radobj istype Propranono]} {
        append pri [mc ", propra Nomo"]
    }
    $win.priradiko configure -text [mc "Radiko %s" [$radobj prenuRadiko]$pri]
    my montruDerivojn
}
RadikaroRedaktilo instproc montruRadikonVorto radiko {
    my instvar win
    $win.radiko del 0 end
    $win.radiko insert 0 $radiko
    my montruRadikonVortoBasa $radiko
}
RadikaroRedaktilo instproc montruRadikonVortoBasa radiko {
    my instvar radobj win
    set tobj Radiko::$radiko
    if {![Object isobject $tobj]} {
        EsperantoBrowser message "Radiko $radiko ne trovita"
        return
    }
    $win.derivo del 0 end
    set radobj $tobj
    my montruRadikon
}
RadikaroRedaktilo instproc selektuDerivo item {
    my instvar win radobj derivo aktualaGramkat derivoTeksto
    set radiko [$radobj prenuRadiko]
    set derivoTeksto $item
    set basavorto [join [split $item -] ""]
    set d [$radobj sxercxuDerivon $basavorto]
    if {$d ne ""} {
        $win.foriguDerivon configure -state normal
        $win.konservu configure -state normal
    } else {
        $win.foriguDerivon configure -state disabled
        return
    }
    set derivo $d
    set m [lindex $d 2]
    set gramkat ""
    if {![[Vortaro prenuVortaron] estasVorteto $basavorto]} {
        switch -- [string index $basavorto end] {
            i {
                set gramkat Verbo
            }
            o {
                set gramkat Substantivo
            }
            a {
                set gramkat Adjektivo
            }
            e {
                set gramkat Adverbo
            }
        }
    }
    if {$gramkat ne ""} {
        if {$aktualaGramkat ne ""} {
            update idletasks
            grid propagate $win 0
            grid forget $win.p$aktualaGramkat
        }
        set aktualaGramkat $gramkat
        set fwin $win.p$gramkat
        grid $fwin -column 2 -row 4 -sticky wn
        foreach {g grampri} [Radiko prenuDerivojPriskriboj] {
            if {$g eq $gramkat} {
                foreach pri $grampri {
                    set d [lindex $pri 0]
                    if {[lsearch $m $d]>=0} {
                        my set $d 1
                    } else {
                        my set $d 0
                    }
                }
            }
        }
    } else {
        if {$aktualaGramkat ne ""} {
            update idletasks
            grid propagate $win 0
            grid forget $win.p$aktualaGramkat
            set aktualaGramkat ""
        }
    }
}
RadikaroRedaktilo instproc specificInit {} {
    my instvar win aktualaGramkat derivoTeksto
    my requireNamespace
    set aktualaGramkat ""

    label $win.lderivo -text [mc "Derivaĵo:"]
    entry $win.derivo -textvariable [self]::derivoTeksto
    bind $win.derivo <Key-Return> [list [self] sxercxiDerivon]
    ::esp::metuXEvento $win.derivo

    label $win.lradiko -text [mc "Radiko:"]
    entry $win.radiko
    bind $win.radiko <Key-Return> [list [self] sxercxiRadikon]
    ::esp::metuXEvento $win.radiko

    button $win.ekderivo -text [mc "Ek"] -command [list [self] sxercxiDerivon]
    button $win.ekradiko -text [mc "Ek"] -command [list [self] sxercxiRadikon]

    frame $win.butradiko
    button $win.aliguRadikon -text [mc "Aligu Radikon"] -command [list [self] aliguRadikon]
    button $win.foriguRadikon -text [mc "Forigu Radikon"] -command [list [self] foriguRadikon] -state disabled
    pack $win.aliguRadikon $win.foriguRadikon -side left -in $win.butradiko
    if {[EsperantoConf isInDelopingMode]} {
        button $win.inspektuRadiko -text [mc "Inspektu"] -command [list [self] inspectRadiko]
        pack $win.inspektuRadiko -side left -in $win.butradiko
    }

    label $win.priradiko -anchor w -border 1
    IDE::NListView create [self]::@derivoj $win.derivoj -notify [self] -notifyProc selektuDerivo

    frame $win.butderivo
    button $win.aliguDerivon -text [mc "Aligu Derivaĵon"] -command [list [self] aliguDerivon] -state disabled
    button $win.foriguDerivon -text [mc "Forigu Derivaĵon"] -command [list [self] foriguDerivon] -state disabled
    button $win.konservu -text [mc "Akceptu ŝanĝojn"] -command [list [self] akzeptuSxangxojn] -state disabled
    pack $win.aliguDerivon $win.foriguDerivon $win.konservu -side left -in $win.butderivo -padx 10 -pady 5

    foreach {gramkat grampri} [Radiko prenuDerivojPriskriboj] {
        set gf [labelframe $win.p$gramkat -text $gramkat]
        foreach pri $grampri {
            set abr [lindex $pri 0]
            set priskribo [lindex $pri 1]
            my set $abr 0
            checkbutton $gf.$abr -text $priskribo -variable [self]::$abr
            pack $gf.$abr -anchor w
        }
    }

    grid $win.lderivo -column 0 -row 0 -sticky e
    grid $win.derivo -column 1 -row 0 -sticky ew
    grid $win.ekderivo -column 2 -row 0 -sticky w

    grid $win.lradiko -column 0 -row 1 -sticky e
    grid $win.radiko -column 1 -row 1 -sticky ew
    grid $win.ekradiko -column 2 -row 1 -sticky w

    grid $win.priradiko -column 0 -row 2 -columnspan 3 -sticky ew
    grid $win.butradiko -column 0 -row 3 -columnspan 3  -sticky ew
    grid $win.derivoj -column 0 -row 4 -columnspan 2 -sticky news

    grid $win.butderivo -column 0 -row 5 -columnspan 3 -sticky ew

    grid columnconfigure $win 0 -weight 1
    grid rowconfigure $win 4 -weight 1

    grid $win.pVerbo -column 2 -row 4 -sticky wn
    set aktualaGramkat Verbo

    my set derivo ""
    focus $win.derivo
    next

}
RadikaroRedaktilo instproc sxercxiDerivon {} {
    my instvar win derivo radobj
    set tderivo [string tolower [string trim [$win.derivo get]]]
    if {$tderivo eq ""} return
    set vortaro [Vortaro prenuVortaron]
    if {[$vortaro estasVorto $tderivo]==2} {
        set radobj Radiko::[$vortaro set radiko]
        if {![Object isobject $radobj]} {
            EsperantoBrowser message [mc "vorto '%s' estas vorteto" $tderivo]
        } else {
            set derivo $tderivo
            $win.radiko del 0 end
            $win.radiko insert 0 [$vortaro set radiko]
            my montruRadikon
        }
    } else {
        EsperantoBrowser message [mc "vorto '%s' ne trovita" $tderivo]
    }
}
RadikaroRedaktilo instproc sxercxiRadikon {} {
    my instvar radobj win
    set radiko [$win.radiko get]
    if {$radiko eq ""} return
    my montruRadikonVortoBasa $radiko
    $win.foriguRadikon configure -state normal
}
RadikaroRedaktilo proc montruRadiko radiko {
    [my newBrowser] montruRadikonVorto $radiko
}
RadikaroRedaktilo proc montruRadikoDerivo {radiko derivo} {
    set b [my newBrowser]
    $b montruRadikonVorto $radiko
    $b montruDerivo $derivo
}
RadikaroRedaktilo proc newBrowser {} {
   EsperantoConf statAktiono RR
   if {![Object isobject radredaktilo]} {
      Vortaro prenuVortaron
      my create radredaktilo .radikaroredaktilo
   } else {
      return radredaktilo
   }
}
@ Class RezultoFenestro {
description {Fenestro uzata por montri mallongajn tekstajn rezultojn}
}
Class RezultoFenestro -superclass ::IDE::Browser -parameter result
@ ::RezultoFenestro idemeta component EsperantoEdit
RezultoFenestro instproc createSystemMenu {} {
    # no menu
}
RezultoFenestro instproc getTitle {} {
    return {Rezulto}
}
RezultoFenestro instproc getVortaron {} {
    if {![Object isobject ::espvortaro]} {
        Vortaro create ::espvortaro
    }
    return ::espvortaro
}
RezultoFenestro instproc setResult text {
    [self]::@resulttext setText $text
}
RezultoFenestro instproc specificInit {} {
    my instvar win result
    EspText [self]::@resulttext $win.resulttext
    set twin [my @resulttext getTextWindow]
    $twin configure -tabs {6c left}
    $twin configure -font espfont

    grid $win.resulttext -row 0 -column 0 -sticky news

    grid columnconfigure $win 0 -weight 1
    grid rowconfigure $win 0 -weight 1

    #my @resulttext switchWrap
    my setResult [my result]
    next
}
RezultoFenestro proc newBrowser result {
    return [my new [Object autoname .result] [list -result $result]]
}
RezultoFenestro proc newBrowserReuse result {
    foreach i [RezultoFenestro info instances] {
        $i setResult $result
        return
    }
    my newBrowser $result
}
@ Class SintaksCanvasGraf {
description {Motrilo de sintaksaj arboj en Tk elemento ''canvas''}
}
Class SintaksCanvasGraf -superclass {::IDE::Browser ::IDE::GUICommands} -parameter {asto title}
@ ::SintaksCanvasGraf idemeta categories init
@ ::SintaksCanvasGraf idemeta categoriesMethods {{fillMenuStruct getMenuStruct getTitle specificInit}}
@ ::SintaksCanvasGraf idemeta component EsperantoEdit
SintaksCanvasGraf instproc astItemEnter {} {
    my instvar restoreCmd win astoArr
    set c $win.c

    if {[winfo depth $c] == 1} {
	set restoreCmd {}
	return
    }
    set type [$c type current]
    if {$type == "window"} {
	set restoreCmd {}
	return
    }
    set fill [lindex [$c itemconfig current -fill] 4]
    if {($type == "text")} {
        set id [$c find withtag current]
        if {[info exists astoArr($id)]} {
            set asto $astoArr($id)
            if {[$asto istype TradukAsto]} {
                set restoreCmd "$c itemconfig current -fill $fill"
                $c itemconfig current -fill SteelBlue2
                $win.disk configure -text [$astoArr($id) prenuDiskribo]
            }
        }
    }
}
SintaksCanvasGraf instproc astItemLeave {} {
    my instvar restoreCmd win
    if {[info exists restoreCmd]} {
        eval $restoreCmd
        $win.disk configure -text ""
    }
}
SintaksCanvasGraf instproc createSystemMenu {} {
    my createNonSystemMenu
}
SintaksCanvasGraf instproc destroy {} {
    my instvar asto
    catch {
        if {[$asto ismixin ::IDE::DestroyMixForward]} {
            $asto unregisterDestroyForwardObj [self]
        }
    }
    next
}
SintaksCanvasGraf instproc eksportuDosieron {typo {dosiero {}}} {
    my instvar asto cwin
    if {$dosiero eq ""} {
        set dosiero [IDE::Dialog getSaveFile sarbo.[string tolower $typo]]
    }
    if {$dosiero eq ""} return
    switch $typo {
        XML {
            package require tdom
            set docu [dom createDocument frazoj]
            set elem [$asto asDOM $docu]
            [$docu documentElement] appendChild $elem
            set text [$elem asXML]
            $docu delete
            set f [open $dosiero w]
            fconfigure $f -encoding utf-8
            puts $f $text
            close $f
        }
        LISTO {
            set f [open $dosiero w]
            fconfigure $f -encoding utf-8
            puts $f [$elem prenuListon]
            close $f
        }
        SVG {
            package require can2svg
            can2svg::canvas2file $cwin $dosiero
        }
    }
}
SintaksCanvasGraf instproc eksportuSVG dosiero {
    my instvar cwin
    can2svg::canvas2file $cwin $dosiero
}
SintaksCanvasGraf instproc fillMenuStruct ms {
   $ms enablementHandler [self]
   $ms addCommand [mc "Eksportu Kiel XML"] [list [self] eksportuDosieron XML]
   $ms addCommand [mc "Eksportu Kiel SVG"] [list [self] eksportuDosieron SVG]
   $ms addCommand [mc "Eksportu Kiel Listo"] [list [self] eksportuDosieron Listo]
}
SintaksCanvasGraf instproc getMenuStruct {} {
    IDE::MenuStruct [self]::ms [mc "Eksportado"] 0
}
SintaksCanvasGraf instproc getTitle {} {
    return [mc "Sintaksa Arbo"]
}
SintaksCanvasGraf instproc inspektAston {} {
    my instvar asto
    $asto inspect
}
SintaksCanvasGraf instproc inspektuElementon {} {
    my instvar win elementoArr
    set c $win.c

    set id [$c find withtag current]
    if {[info exists elementoArr($id)]} {
         $elementoArr($id) inspect
    }
}
SintaksCanvasGraf instproc instanceDestroying {} {
    my destroy
}
SintaksCanvasGraf instproc ispektuAston {} {
    my instvar win astoArr
    set c $win.c

    set id [$c find withtag current]
    if {[info exists astoArr($id)]} {
         $astoArr($id) inspect
    }
}
SintaksCanvasGraf instproc itemEnter {} {
    my instvar restoreCmd win elementoArr
    set c $win.c

    if {[winfo depth $c] == 1} {
	set restoreCmd {}
	return
    }
    set type [$c type current]
    if {$type == "window"} {
	set restoreCmd {}
	return
    }
    set fill [lindex [$c itemconfig current -fill] 4]
    if {($type == "text")} {
	set restoreCmd "$c itemconfig current -fill $fill"
	$c itemconfig current -fill SteelBlue2
        set id [$c find withtag current]
        if {[info exists elementoArr($id)]} {
            $win.disk configure -text [$elementoArr($id) prenuDiskribo]
        }
    }
}
SintaksCanvasGraf instproc itemLeave {} {
    my instvar restoreCmd win
    if {[info exists restoreCmd]} {
        eval $restoreCmd
        $win.disk configure -text ""
    }
}
SintaksCanvasGraf instproc klariguCanvas {} {
    my instvar cwin astoArr elementoArr idArr
    $cwin delete all
    unset -nocomplain astoArr elementoArr idArr
}
SintaksCanvasGraf instproc layout {} {
    my instvar asto cwin profundo
    set profundo [expr {[$asto prenuProfundon]+1}]
    my layoutAsto $asto 0 40

    foreach {- - x1 y1} [$cwin bbox all] break
    $cwin config -scrollregion [list 0 0 [expr {$x1+10}] [expr {$y1+10}]]
}
SintaksCanvasGraf instproc layoutAsto {asto level xoffset} {
    my instvar cwin profundo astoArr idArr
    set cx $xoffset
    set ylongo 40
    set xlist [list]
    foreach a [$asto astoj] {
         if {[$a istype ::ArboFolio]} {
            set ax [my layoutElemento $a [expr {$level+1}] $cx]
         } else {
            set ax [my layoutAsto $a [expr {$level+1}] $cx]
         }
         lappend xlist $ax
         incr cx $ax
    }

    set y [expr {$level*$ylongo+20}]
    set x [expr {($cx-$xoffset)/2+$xoffset}]
    set id [$cwin create text $x $y -text [$asto prenuFunkcioNomo] -anchor n -tags astitem]
    set astoArr($id) $asto
    set idArr($asto) $id
    set y [lindex [$cwin bbox $id] 3]
    set id [$cwin create text $x $y -text [$asto prenuSimbolo] -anchor n]
    set coord [$cwin bbox $id]
    set y [lindex $coord 3]
    set y2 [expr {($level+1)*$ylongo+20}]
    set lxoffset $xoffset
    foreach ex $xlist {
        $cwin create line $x $y [expr ($lxoffset+$ex/2)] $y2
        incr lxoffset $ex
    }
    return [expr {$cx-$xoffset}]
}
SintaksCanvasGraf instproc layoutElemento {asto level xoffset} {
    my instvar cwin profundo elementoArr idArr
    set cx $xoffset
    set ylongo 40
    set yv [expr {$profundo*$ylongo+20}]
    set vid [$cwin create text $xoffset $yv -text [$asto vorto] -anchor nw -tags item]
    set elementoArr($vid) $asto
    set idArr($asto) $vid
    set ret [$cwin bbox $vid]
    set largxo [expr {[lindex $ret 2]-[lindex $ret 0]+5}]

    set y [expr {$level*$ylongo+20}]
    set x [expr {$xoffset+$largxo/2}]
    set fid [$cwin create text $x $y -text [$asto prenuFunkcioNomo] -anchor n]
    set ret [$cwin bbox $fid]
    set nlargxo [expr {[lindex $ret 2]-[lindex $ret 0]+5}]
    if {$nlargxo>$largxo} {
        $cwin move $vid [expr {($nlargxo-$largxo)/2}] 0
        $cwin move $fid [expr {($nlargxo-$largxo)/2}] 0
        set largxo $nlargxo
        set x [expr {$xoffset+$largxo/2}]
    }

    set y [lindex [$cwin bbox $fid] 3]
    set id [$cwin create text $x $y -text [$asto prenuSimbolo] -anchor n]
    set ret [$cwin bbox $id]
    set nlargxo [expr {[lindex $ret 2]-[lindex $ret 0]+5}]
    if {$nlargxo>$largxo} {
        $cwin move $id [expr {($nlargxo-$largxo)/2}] 0
        $cwin move $vid [expr {($nlargxo-$largxo)/2}] 0
        $cwin move $fid [expr {($nlargxo-$largxo)/2}] 0
        set largxo $nlargxo
        set x [expr {$xoffset+$largxo/2}]
    }

    set y [lindex [$cwin bbox $id] 3]

    $cwin create line $x $y $x $yv

    return $largxo
}
SintaksCanvasGraf instproc specificInit {} {
    my instvar win title asto cwin
    set cwin [canvas $win.c -xscrollcommand [list $win.hscroll set]]
    scrollbar $win.hscroll -orient horiz -command [list $cwin xview]
    if {[info exists asto]} {
        my layout
    }
    pack $cwin -fill both -expand yes
    pack $win.hscroll -fill x -anchor n
    message $win.disk -width [$cwin cget -width]
    pack $win.disk -anchor w
    if {[info exists title] && $title ne ""} {
        set t [label $win.t -text $title]
        pack $t
    }
    frame $win.buttons
    pack $win.buttons -fill x
    if {[EsperantoConf isInDelopingMode]} {
        button $win.inspect -text [mc "Inspektu"] -command [list [self] inspektAston]
        pack $win.inspect -side left -in $win.buttons
        $cwin bind astitem <Button-1> [list [self] ispektuAston]
        $cwin bind item <Button-1> [list [self] inspektuElementon]
    }
    $cwin bind astitem <Any-Enter> [list [self] astItemEnter]
    $cwin bind astitem <Any-Leave> [list [self] astItemLeave]

    $cwin bind item <Any-Enter> [list [self] itemEnter]
    $cwin bind item <Any-Leave> [list [self] itemLeave]
    # bind life of ast with its inspector
    if {[info exists asto]} {
        $asto mixin add IDE::DestroyMixForward
        $asto setDestroyForwardObj [self]
    }
    next
}
SintaksCanvasGraf proc drawGraph {asto {title {}}} {
    my new [Object autoname .esperantoedit] [list -asto $asto] [list -title $title]
}
SintaksCanvasGraf proc drawTradukGraph {asto {title {}}} {
    my new [Object autoname .esperantoedit] -asto $asto -title $title
}
@ Class SintaksDebugger {
description {Debugger por sintaksa analizilo}
}
Class SintaksDebugger -superclass ::SintaksCanvasGraf
@ ::SintaksDebugger idemeta component EsperantoEdit
SintaksDebugger instproc atenduSignalon {} {
    my vwait sigvariablo
}
SintaksDebugger instproc daurigu {} {
    my set sigvariablo 1
}
SintaksDebugger instproc debug {tasto pozicio priskribo} {
    my instvar asto win idArr cwin debugProgramon
    set asto $tasto
    my klariguCanvas
    my layout
    set masto [lindex [$tasto astoj] $pozicio]
    if {[info exists idArr($masto)]} {
        set id $idArr($masto)
        $cwin itemconfig $id -fill red
    }
    $win.disk configure -text $priskribo
    set debugProgramon 0
    my atenduSignalon
    if {$debugProgramon} {
        my halt
    }
}
SintaksDebugger instproc debugProgramon {} {
    my set debugProgramon 1
    my set sigvariablo 1
}
SintaksDebugger instproc destroy {} {
    my daurigu
    next
}
SintaksDebugger instproc finiguDebug tasto {
    my instvar win asto
    set asto $tasto
    my klariguCanvas
    my layout
    $win.disk configure -text "fino"
    my atenduSignalon
    my destroy
}
SintaksDebugger instproc specificInit {} {
    my instvar win
    next
    button $win.daurigu -text [mc "daŭrigu"] -command [list [self] daurigu]
    button $win.debug -text "debug" -command [list [self] debugProgramon]
    pack $win.daurigu $win.debug -side left -in $win.buttons
}
SintaksDebugger proc debugAston {asto pozicio priskribo} {
    my instvar instanco
    if {![info exists instanco] || ![Object isobject $instanco]} {
         set instanco [SintaksDebugger new [Object autoname .sintaksdeb]]
    }
    $instanco debug $asto $pozicio $priskribo
}
SintaksDebugger proc finiguDebug asto {
    my instvar instanco
    if {[info exists instanco] && [Object isobject $instanco]} {
         $instanco finiguDebug $asto
    }
}
Class TezauroMontrilo -superclass ::IDE::Browser
@ ::TezauroMontrilo idemeta component EsperantoEdit
TezauroMontrilo instproc anstatuiguVorton vorto {

}
TezauroMontrilo instproc anstautauigu {} {
    my closeWindow
}
TezauroMontrilo instproc createSystemMenu {} {
    my createNonSystemMenu
}
TezauroMontrilo instproc getTitle {} {
    return [mc "Tezaŭro"]
}
TezauroMontrilo instproc metuVorto nvorto {
    my instvar avorto
    set avorto $nvorto
}
TezauroMontrilo instproc montru {} {
    my instvar vorto
    my montruPorVorto $vorto
}
TezauroMontrilo instproc montruPorVorto mvorto {
    my instvar avorto vorto
    set vorto $mvorto
    set arto [string index $vorto end]
    set evortaro [EspEspVortaro prenuVortaron]
    set list [$evortaro trovuSinonimojPorVorto $vorto]
    my @sinonimoj setListUnsorted $list
    set avorto ""
    if {[llength $list]==0} {
        set vortaro [Vortaro prenuVortaron]
        if {[$vortaro estasVorto $vorto]==2} {
            my setStatusBarText [mc "neniuj sinonimoj por vorto %s" $vorto]
        } else {
            my setStatusBarText [mc "vorto '%s' estas ne konata" $vorto]
        }
    } else {
        my setStatusBarText "[llength $list] sinonimoj"
    }
}
TezauroMontrilo instproc specificInit {} {
    my instvar win vorto avorto
    my requireNamespace

    checkbutton $win.uzutrad -text [mc "uzu tradukadon"] -variable EsperantoConf::sinonimojUzuTradukado

    label $win.lvorto -text [mc "vorto"]
    entry $win.vorto -textvariable [self]::vorto
    bind $win.vorto <Return> [list [self] montru]
    esp::metuXEvento $win.vorto
    label $win.lanstatauigo -text [mc "anstataŭigo"]
    entry $win.anstatauigo -textvariable [self]::avorto
    esp::metuXEvento $win.anstatauigo
    label $win.lsinonimo -text [mc "sinonimo"]
    IDE::NListView create [self]::@sinonimoj $win.sinonimoj -notify [self] -notifyProc metuVorto -doubleNotifyProc anstatuiguVorton

    frame $win.butonoj -relief raised -borderwidth 3
    button $win.forlasu -text [mc "Forlasu"] -command [list [self] closeWindow]
    button $win.anstautauigu -text [mc "Anstataŭigu"] -command [list [self] anstautauigu]
    #pack $win.anstautauigu $win.forlasu -in $win.butonoj -side left
    pack $win.forlasu -in $win.butonoj -side right

    grid $win.uzutrad -column 0 -row 0 -sticky w
    grid $win.lvorto -column 0 -row 1 -sticky w
    grid $win.vorto -column 0 -row 2 -sticky we
    grid $win.lanstatauigo -column 1 -row 1 -sticky w
    grid $win.anstatauigo -column 1 -row 2 -sticky we
    grid $win.lsinonimo -column 1 -row 3 -sticky w
    grid $win.sinonimoj -column 1 -row 4 -sticky news
    grid $win.butonoj -column 0 -row 6 -columnspan 2 -sticky ew

    grid columnconfigure $win 0 -weight 1
    grid columnconfigure $win 1 -weight 1
    grid rowconfigure $win 4 -weight 1

    my initStatusBar 5 2
    focus $win.vorto
}
TezauroMontrilo proc montruPorVorto vorto {
    [my newBrowser] montruPorVorto $vorto
}
TezauroMontrilo proc newBrowser {} {
   if {![Object isobject ::tezauromontrolo]} {
      my create ::tezauromontrolo .tezauromontrilo
   } else {
      ::tezauromontrolo
   }
}
@ Class VortaroSignoKonvertilo {
description {Konvertilo de esperantaj skribmanieroj kun testado de vortoj kun esperanta vortaro}
}
Class VortaroSignoKonvertilo -superclass ::EsperantoStringConverter
@ ::VortaroSignoKonvertilo idemeta component EsperantoEdit
VortaroSignoKonvertilo instproc init {} {
    my initVariables
}
@ VortaroSignoKonvertilo instproc kovertuDeFrazoLegilo {} {
description {Konvertas la skribmanieroj de cxapelitaj literoj per aldona uzo de esperanta vortaro}
}
VortaroSignoKonvertilo instproc kovertuDeFrazoLegilo {frazoLegilo transFrom transTo} {
    set map [my prenuMap $transFrom $transTo]
    set ret ""
    set signoLegilo [$frazoLegilo signoLegilo]
    set komenco [$signoLegilo kursoro]
    set vortaro [HunspellTestiloEo prenuVortaron]
    while {[set vorto [$frazoLegilo prenuVorton]] ne ""} {
        if {$vorto eq "_FINO_"} {
            continue
        }
        set trans [string map $map $vorto]
        if {$trans ne $vorto} {
            if {[$vortaro estasVorto [string tolower $trans]]!=0} {
                set vorto $trans
            }
        }
        append ret [$signoLegilo prenuRegionon $komenco [$signoLegilo set vortkomenco]]
        append ret $vorto
        set komenco [$signoLegilo kursoro]
    }
    append ret [$signoLegilo prenuRegionon $komenco [$signoLegilo set vortkomenco]]
    return $ret
}
VortaroSignoKonvertilo proc konvertuTekston {teksto transFrom transTo} {
    set frazoLegilo [FrazoLegilo newOn $teksto]
    if {[regexp -nocase {<\s*html\W} $teksto]} {
       $frazoLegilo class HTMLFrazoLegilo
    }
    set i [my new]
    set ret [$i kovertuDeFrazoLegilo $frazoLegilo $transFrom $transTo]
    $frazoLegilo destroy
    $i destroy
    return $ret
}
EspGUIConfigurationMix initializeAfterLoad
FindReplaceMix initializeAfterLoad
FrazpartoFrekMontrilo initializeAfterLoad

